
ISA SEQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800390c  0800390c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003910  08003910  00004910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003914  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000010  08003924  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003924  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6dd  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c1  00000000  00000000  00010715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000120d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000823  00000000  00000000  00012b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010930  00000000  00000000  0001336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4ef  00000000  00000000  00023c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067c34  00000000  00000000  0003018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002554  00000000  00000000  00097e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0009a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003880 	.word	0x08003880

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003880 	.word	0x08003880

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//reset the GPIO's pin for PWM
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	429a      	cmp	r2, r3
 800045e:	d107      	bne.n	8000470 <HAL_TIM_PeriodElapsedCallback+0x24>
		GPIOC->BSRR = (1 << 0) | (1 << 13);
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000462:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000464:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR = 1 << 9;
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000468:	2280      	movs	r2, #128	@ 0x80
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	619a      	str	r2, [r3, #24]
				systemstate = THIRD_PHASE;
				break;
		}
	}

}
 800046e:	e013      	b.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x4c>
	else if(htim->Instance == TIM21){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d10e      	bne.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x4c>
		switch(recall){
 800047a:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d002      	beq.n	8000488 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000482:	2b02      	cmp	r3, #2
 8000484:	d004      	beq.n	8000490 <HAL_TIM_PeriodElapsedCallback+0x44>
}
 8000486:	e007      	b.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x4c>
				systemstate = SECOND_PHASE;
 8000488:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800048a:	2202      	movs	r2, #2
 800048c:	701a      	strb	r2, [r3, #0]
				break;
 800048e:	e003      	b.n	8000498 <HAL_TIM_PeriodElapsedCallback+0x4c>
				systemstate = THIRD_PHASE;
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000492:	2203      	movs	r2, #3
 8000494:	701a      	strb	r2, [r3, #0]
				break;
 8000496:	46c0      	nop			@ (mov r8, r8)
}
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	50000800 	.word	0x50000800
 80004a4:	00002001 	.word	0x00002001
 80004a8:	50000400 	.word	0x50000400
 80004ac:	40010800 	.word	0x40010800
 80004b0:	20000136 	.word	0x20000136
 80004b4:	20000135 	.word	0x20000135

080004b8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7e1b      	ldrb	r3, [r3, #24]
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d00f      	beq.n	80004e8 <HAL_TIM_OC_DelayElapsedCallback+0x30>
 80004c8:	dc13      	bgt.n	80004f2 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d002      	beq.n	80004d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d005      	beq.n	80004de <HAL_TIM_OC_DelayElapsedCallback+0x26>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_3: //PWM PARA
			GPIOB->BSRR = 1 << 25;
			break;
		default:
			break;
 80004d2:	e00e      	b.n	80004f2 <HAL_TIM_OC_DelayElapsedCallback+0x3a>
			GPIOC->BSRR = 1 << 16;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80004d6:	2280      	movs	r2, #128	@ 0x80
 80004d8:	0252      	lsls	r2, r2, #9
 80004da:	619a      	str	r2, [r3, #24]
			break;
 80004dc:	e00a      	b.n	80004f4 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			GPIOC->BSRR = 1 << 29;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0592      	lsls	r2, r2, #22
 80004e4:	619a      	str	r2, [r3, #24]
			break;
 80004e6:	e005      	b.n	80004f4 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			GPIOB->BSRR = 1 << 25;
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	0492      	lsls	r2, r2, #18
 80004ee:	619a      	str	r2, [r3, #24]
			break;
 80004f0:	e000      	b.n	80004f4 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			break;
 80004f2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	50000800 	.word	0x50000800
 8000500:	50000400 	.word	0x50000400

08000504 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	0002      	movs	r2, r0
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	801a      	strh	r2, [r3, #0]

	if(!rocket_launched){
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d14d      	bne.n	80005b4 <HAL_GPIO_EXTI_Callback+0xb0>
		switch(GPIO_Pin){
 8000518:	1dbb      	adds	r3, r7, #6
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	0212      	lsls	r2, r2, #8
 8000520:	4293      	cmp	r3, r2
 8000522:	d026      	beq.n	8000572 <HAL_GPIO_EXTI_Callback+0x6e>
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	0212      	lsls	r2, r2, #8
 8000528:	4293      	cmp	r3, r2
 800052a:	dc43      	bgt.n	80005b4 <HAL_GPIO_EXTI_Callback+0xb0>
 800052c:	2b04      	cmp	r3, #4
 800052e:	d002      	beq.n	8000536 <HAL_GPIO_EXTI_Callback+0x32>
 8000530:	2b08      	cmp	r3, #8
 8000532:	d004      	beq.n	800053e <HAL_GPIO_EXTI_Callback+0x3a>
				}
				state_EXP ^= 1;
				break;
		}
	}
}
 8000534:	e03e      	b.n	80005b4 <HAL_GPIO_EXTI_Callback+0xb0>
				systemstate = FIRST_PHASE;
 8000536:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
				break;
 800053c:	e03a      	b.n	80005b4 <HAL_GPIO_EXTI_Callback+0xb0>
				if(state_PARA){
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d009      	beq.n	800055a <HAL_GPIO_EXTI_Callback+0x56>
					HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000546:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000548:	2108      	movs	r1, #8
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fedc 	bl	8002308 <HAL_TIM_OC_Start_IT>
					TIM2->CCR3 = 5000;
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	4a1d      	ldr	r2, [pc, #116]	@ (80005cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8000556:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000558:	e003      	b.n	8000562 <HAL_GPIO_EXTI_Callback+0x5e>
					TIM2->CCR3 = 3000;
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000560:	63da      	str	r2, [r3, #60]	@ 0x3c
				state_PARA ^= 1;
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2201      	movs	r2, #1
 8000568:	4053      	eors	r3, r2
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800056e:	701a      	strb	r2, [r3, #0]
				break;
 8000570:	e020      	b.n	80005b4 <HAL_GPIO_EXTI_Callback+0xb0>
				if(state_EXP){
 8000572:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00a      	beq.n	8000590 <HAL_GPIO_EXTI_Callback+0x8c>
					HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800057a:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800057c:	2100      	movs	r1, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fec2 	bl	8002308 <HAL_TIM_OC_Start_IT>
					HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000586:	2104      	movs	r1, #4
 8000588:	0018      	movs	r0, r3
 800058a:	f001 febd 	bl	8002308 <HAL_TIM_OC_Start_IT>
 800058e:	e009      	b.n	80005a4 <HAL_GPIO_EXTI_Callback+0xa0>
					HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000590:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000592:	2100      	movs	r1, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 ff83 	bl	80024a0 <HAL_TIM_OC_Stop_IT>
					HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_2);
 800059a:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800059c:	2104      	movs	r1, #4
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 ff7e 	bl	80024a0 <HAL_TIM_OC_Stop_IT>
				state_EXP ^= 1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	4053      	eors	r3, r2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005b0:	701a      	strb	r2, [r3, #0]
				break;
 80005b2:	46c0      	nop			@ (mov r8, r8)
}
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000134 	.word	0x20000134
 80005c0:	20000135 	.word	0x20000135
 80005c4:	20000000 	.word	0x20000000
 80005c8:	200000b4 	.word	0x200000b4
 80005cc:	00001388 	.word	0x00001388
 80005d0:	00000bb8 	.word	0x00000bb8
 80005d4:	20000001 	.word	0x20000001

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fbdc 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f874 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f9fc 	bl	80009e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005e8:	f000 f8d8 	bl	800079c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80005ec:	f000 f904 	bl	80007f8 <MX_TIM2_Init>
  MX_TIM21_Init();
 80005f0:	f000 f99e 	bl	8000930 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <main+0xcc>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fdd4 	bl	80021a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3); //LOCK THE SERVO ON POWER UP
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <main+0xcc>)
 80005fe:	2108      	movs	r1, #8
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fe81 	bl	8002308 <HAL_TIM_OC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIOB->ODR = 0b11;
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <main+0xd0>)
 8000608:	2203      	movs	r2, #3
 800060a:	615a      	str	r2, [r3, #20]
	  HAL_Delay(2000);
 800060c:	23fa      	movs	r3, #250	@ 0xfa
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fc31 	bl	8000e78 <HAL_Delay>

	  switch(systemstate){
 8000616:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <main+0xd4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d03d      	beq.n	800069a <main+0xc2>
 800061e:	dcf2      	bgt.n	8000606 <main+0x2e>
 8000620:	2b02      	cmp	r3, #2
 8000622:	d01a      	beq.n	800065a <main+0x82>
 8000624:	dcef      	bgt.n	8000606 <main+0x2e>
 8000626:	2b00      	cmp	r3, #0
 8000628:	d039      	beq.n	800069e <main+0xc6>
 800062a:	2b01      	cmp	r3, #1
 800062c:	d138      	bne.n	80006a0 <main+0xc8>
	  	  case WAITING:
			  break;

	  	  case FIRST_PHASE:
			rocket_launched = 1;
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <main+0xd8>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR |= 1 << 3; //EXP_START SIG
 8000634:	23a0      	movs	r3, #160	@ 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	23a0      	movs	r3, #160	@ 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2108      	movs	r1, #8
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
			HAL_TIM_Base_Start_IT(&htim21); //start countdown until apoapsis 13.5sec
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <main+0xdc>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fdac 	bl	80021a4 <HAL_TIM_Base_Start_IT>
			recall = FIRST_PHASE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <main+0xe0>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
			systemstate = WAITING;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0xd4>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
			break;
 8000658:	e022      	b.n	80006a0 <main+0xc8>

		  case SECOND_PHASE:
			TIM2->CCR3 = 3000; //SERVO WILL UNLOCK !
 800065a:	2380      	movs	r3, #128	@ 0x80
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <main+0xe4>)
 8000660:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_Delay(3000);
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <main+0xe4>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fc07 	bl	8000e78 <HAL_Delay>
			//TODO THrow in the exp servos
			HAL_TIM_Base_Stop_IT(&htim21);
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <main+0xdc>)
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fddd 	bl	800222c <HAL_TIM_Base_Stop_IT>
			TIM21->ARR = 65601;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <main+0xe8>)
 8000674:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <main+0xec>)
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
			TIM21->PSC = 29311;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0xe8>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <main+0xf0>)
 800067c:	629a      	str	r2, [r3, #40]	@ 0x28
			TIM21->CNT = 0;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <main+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim21);//start countdown until landing 120sec
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <main+0xdc>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fd8c 	bl	80021a4 <HAL_TIM_Base_Start_IT>
			recall = SECOND_PHASE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <main+0xe0>)
 800068e:	2202      	movs	r2, #2
 8000690:	701a      	strb	r2, [r3, #0]
			systemstate = WAITING;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <main+0xd4>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
			break;
 8000698:	e002      	b.n	80006a0 <main+0xc8>

		  case THIRD_PHASE:
			  //TODO
			  break;
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	e7b3      	b.n	8000606 <main+0x2e>
			  break;
 800069e:	46c0      	nop			@ (mov r8, r8)
	  GPIOB->ODR = 0b11;
 80006a0:	e7b1      	b.n	8000606 <main+0x2e>
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	200000b4 	.word	0x200000b4
 80006a8:	50000400 	.word	0x50000400
 80006ac:	20000135 	.word	0x20000135
 80006b0:	20000134 	.word	0x20000134
 80006b4:	200000f4 	.word	0x200000f4
 80006b8:	20000136 	.word	0x20000136
 80006bc:	00000bb8 	.word	0x00000bb8
 80006c0:	40010800 	.word	0x40010800
 80006c4:	00010041 	.word	0x00010041
 80006c8:	0000727f 	.word	0x0000727f

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b099      	sub	sp, #100	@ 0x64
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	242c      	movs	r4, #44	@ 0x2c
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2334      	movs	r3, #52	@ 0x34
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 f8a3 	bl	8003828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e2:	2318      	movs	r3, #24
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 f89b 	bl	8003828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2318      	movs	r3, #24
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 f894 	bl	8003828 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <SystemClock_Config+0xc8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <SystemClock_Config+0xcc>)
 8000706:	401a      	ands	r2, r3
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xc8>)
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	0109      	lsls	r1, r1, #4
 800070e:	430a      	orrs	r2, r1
 8000710:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2210      	movs	r2, #16
 8000724:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fe4c 	bl	80013cc <HAL_RCC_OscConfig>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000738:	f000 fa20 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	2118      	movs	r1, #24
 800073e:	187b      	adds	r3, r7, r1
 8000740:	220f      	movs	r2, #15
 8000742:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f9af 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076a:	f000 fa07 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800076e:	003b      	movs	r3, r7
 8000770:	2204      	movs	r2, #4
 8000772:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	003b      	movs	r3, r7
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fba5 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000786:	f000 f9f9 	bl	8000b7c <Error_Handler>
  }
}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b019      	add	sp, #100	@ 0x64
 8000790:	bd90      	pop	{r4, r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	40007000 	.word	0x40007000
 8000798:	ffffe7ff 	.word	0xffffe7ff

0800079c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <MX_LPUART1_UART_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007a8:	22e1      	movs	r2, #225	@ 0xe1
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	0552      	lsls	r2, r2, #21
 80007b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007c4:	220c      	movs	r2, #12
 80007c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <MX_LPUART1_UART_Init+0x54>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 fb55 	bl	8002e8c <HAL_UART_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 80007e6:	f000 f9c9 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000002c 	.word	0x2000002c
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	2318      	movs	r3, #24
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f003 f80d 	bl	8003828 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	2310      	movs	r3, #16
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	0018      	movs	r0, r3
 8000814:	2308      	movs	r3, #8
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f003 f805 	bl	8003828 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	2310      	movs	r3, #16
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f002 fffe 	bl	8003828 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082c:	4b3b      	ldr	r3, [pc, #236]	@ (800091c <MX_TIM2_Init+0x124>)
 800082e:	2280      	movs	r2, #128	@ 0x80
 8000830:	05d2      	lsls	r2, r2, #23
 8000832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000834:	4b39      	ldr	r3, [pc, #228]	@ (800091c <MX_TIM2_Init+0x124>)
 8000836:	2207      	movs	r2, #7
 8000838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b38      	ldr	r3, [pc, #224]	@ (800091c <MX_TIM2_Init+0x124>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000840:	4b36      	ldr	r3, [pc, #216]	@ (800091c <MX_TIM2_Init+0x124>)
 8000842:	4a37      	ldr	r2, [pc, #220]	@ (8000920 <MX_TIM2_Init+0x128>)
 8000844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b35      	ldr	r3, [pc, #212]	@ (800091c <MX_TIM2_Init+0x124>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b33      	ldr	r3, [pc, #204]	@ (800091c <MX_TIM2_Init+0x124>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_TIM2_Init+0x124>)
 8000854:	0018      	movs	r0, r3
 8000856:	f001 fc65 	bl	8002124 <HAL_TIM_Base_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f98d 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	2118      	movs	r1, #24
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	0152      	lsls	r2, r2, #5
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086c:	187a      	adds	r2, r7, r1
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <MX_TIM2_Init+0x124>)
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f001 ffbc 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800087c:	f000 f97e 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000880:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_TIM2_Init+0x124>)
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fcf8 	bl	8002278 <HAL_TIM_OC_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800088c:	f000 f976 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2110      	movs	r1, #16
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_TIM2_Init+0x124>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 faa1 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80008ae:	f000 f965 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2500;
 80008b8:	003b      	movs	r3, r7
 80008ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000924 <MX_TIM2_Init+0x12c>)
 80008bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	0039      	movs	r1, r7
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <MX_TIM2_Init+0x124>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 ff35 	bl	8002740 <HAL_TIM_OC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008da:	f000 f94f 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.Pulse = 3800;
 80008de:	003b      	movs	r3, r7
 80008e0:	4a11      	ldr	r2, [pc, #68]	@ (8000928 <MX_TIM2_Init+0x130>)
 80008e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e4:	0039      	movs	r1, r7
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <MX_TIM2_Init+0x124>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 ff28 	bl	8002740 <HAL_TIM_OC_ConfigChannel>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80008f4:	f000 f942 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 80008f8:	003b      	movs	r3, r7
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <MX_TIM2_Init+0x134>)
 80008fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fe:	0039      	movs	r1, r7
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_TIM2_Init+0x124>)
 8000902:	2208      	movs	r2, #8
 8000904:	0018      	movs	r0, r3
 8000906:	f001 ff1b 	bl	8002740 <HAL_TIM_OC_ConfigChannel>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800090e:	f000 f935 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b00a      	add	sp, #40	@ 0x28
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	200000b4 	.word	0x200000b4
 8000920:	00009c3f 	.word	0x00009c3f
 8000924:	000009c4 	.word	0x000009c4
 8000928:	00000ed8 	.word	0x00000ed8
 800092c:	00001388 	.word	0x00001388

08000930 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	2308      	movs	r3, #8
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	0018      	movs	r0, r3
 800093c:	2310      	movs	r3, #16
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f002 ff71 	bl	8003828 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	2308      	movs	r3, #8
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f002 ff6a 	bl	8003828 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 8000956:	4a1f      	ldr	r2, [pc, #124]	@ (80009d4 <MX_TIM21_Init+0xa4>)
 8000958:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 3295;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 800095c:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <MX_TIM21_Init+0xa8>)
 800095e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65532;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <MX_TIM21_Init+0xac>)
 800096a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fbd2 	bl	8002124 <HAL_TIM_Base_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f8fa 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	2108      	movs	r1, #8
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	0152      	lsls	r2, r2, #5
 8000990:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000992:	187a      	adds	r2, r7, r1
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f001 ff29 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80009a2:	f000 f8eb 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80009b2:	003a      	movs	r2, r7
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_TIM21_Init+0xa0>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fa17 	bl	8002dec <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80009c2:	f000 f8db 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b006      	add	sp, #24
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	200000f4 	.word	0x200000f4
 80009d4:	40010800 	.word	0x40010800
 80009d8:	00000cdf 	.word	0x00000cdf
 80009dc:	0000fffc 	.word	0x0000fffc

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	240c      	movs	r4, #12
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2314      	movs	r3, #20
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f002 ff19 	bl	8003828 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b5c      	ldr	r3, [pc, #368]	@ (8000b68 <MX_GPIO_Init+0x188>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b68 <MX_GPIO_Init+0x188>)
 80009fc:	2104      	movs	r1, #4
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a02:	4b59      	ldr	r3, [pc, #356]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a06:	2204      	movs	r2, #4
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b56      	ldr	r3, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a12:	4b55      	ldr	r3, [pc, #340]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a1a:	4b53      	ldr	r3, [pc, #332]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a32:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <MX_GPIO_Init+0x188>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	2202      	movs	r2, #2
 8000a38:	4013      	ands	r3, r2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_EXP1_Pin|PWM_EXP2_Pin, GPIO_PIN_RESET);
 8000a3e:	494b      	ldr	r1, [pc, #300]	@ (8000b6c <MX_GPIO_Init+0x18c>)
 8000a40:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <MX_GPIO_Init+0x190>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fc87 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXP_START_GPIO_Port, EXP_START_Pin, GPIO_PIN_RESET);
 8000a4a:	23a0      	movs	r3, #160	@ 0xa0
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2108      	movs	r1, #8
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fc80 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_SEQ_Pin|PWM_PARACH_Pin, GPIO_PIN_RESET);
 8000a58:	4946      	ldr	r1, [pc, #280]	@ (8000b74 <MX_GPIO_Init+0x194>)
 8000a5a:	4b47      	ldr	r3, [pc, #284]	@ (8000b78 <MX_GPIO_Init+0x198>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fc7a 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM_EXP1_Pin PWM_EXP2_Pin */
  GPIO_InitStruct.Pin = PWM_EXP1_Pin|PWM_EXP2_Pin;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	4a41      	ldr	r2, [pc, #260]	@ (8000b6c <MX_GPIO_Init+0x18c>)
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2203      	movs	r2, #3
 8000a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b70 <MX_GPIO_Init+0x190>)
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f000 fafa 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_START_Pin */
  GPIO_InitStruct.Pin = EXP_START_Pin;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EXP_START_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	193a      	adds	r2, r7, r4
 8000aa2:	23a0      	movs	r3, #160	@ 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fae7 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_SEQ_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_SEQ_Pin;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b78 <MX_GPIO_Init+0x198>)
 8000aca:	0019      	movs	r1, r3
 8000acc:	0010      	movs	r0, r2
 8000ace:	f000 fad5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LAUNCH_SIG_Pin RLD_PARA_Pin */
  GPIO_InitStruct.Pin = LAUNCH_SIG_Pin|RLD_PARA_Pin;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2284      	movs	r2, #132	@ 0x84
 8000adc:	0392      	lsls	r2, r2, #14
 8000ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <MX_GPIO_Init+0x198>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 fac5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : RLD_EXP_Pin */
  GPIO_InitStruct.Pin = RLD_EXP_Pin;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	0212      	lsls	r2, r2, #8
 8000af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2284      	movs	r2, #132	@ 0x84
 8000afe:	0392      	lsls	r2, r2, #14
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RLD_EXP_GPIO_Port, &GPIO_InitStruct);
 8000b08:	193a      	adds	r2, r7, r4
 8000b0a:	23a0      	movs	r3, #160	@ 0xa0
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fab3 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_PARACH_Pin */
  GPIO_InitStruct.Pin = PWM_PARACH_Pin;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_PARACH_GPIO_Port, &GPIO_InitStruct);
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <MX_GPIO_Init+0x198>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f000 fa9f 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2006      	movs	r0, #6
 8000b44:	f000 fa68 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b48:	2006      	movs	r0, #6
 8000b4a:	f000 fa7a 	bl	8001042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 fa60 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f000 fa72 	bl	8001042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b009      	add	sp, #36	@ 0x24
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	00002001 	.word	0x00002001
 8000b70:	50000800 	.word	0x50000800
 8000b74:	00000203 	.word	0x00000203
 8000b78:	50000400 	.word	0x50000400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <HAL_MspInit+0x24>)
 8000b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_MspInit+0x24>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <HAL_MspInit+0x24>)
 8000b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_MspInit+0x24>)
 8000b9e:	2180      	movs	r1, #128	@ 0x80
 8000ba0:	0549      	lsls	r1, r1, #21
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	@ 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	240c      	movs	r4, #12
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fe30 	bl	8003828 <memset>
  if(huart->Instance==LPUART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_UART_MspInit+0x80>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d129      	bne.n	8000c26 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	02c9      	lsls	r1, r1, #11
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000be6:	2102      	movs	r1, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	22c0      	movs	r2, #192	@ 0xc0
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	0021      	movs	r1, r4
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2202      	movs	r2, #2
 8000c06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2203      	movs	r2, #3
 8000c12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2206      	movs	r2, #6
 8000c18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	4a06      	ldr	r2, [pc, #24]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000c1e:	0019      	movs	r1, r3
 8000c20:	0010      	movs	r0, r2
 8000c22:	f000 fa2b 	bl	800107c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b009      	add	sp, #36	@ 0x24
 8000c2c:	bd90      	pop	{r4, r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	40004800 	.word	0x40004800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000400 	.word	0x50000400

08000c3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d10e      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_TIM_Base_MspInit+0x50>)
 8000c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_TIM_Base_MspInit+0x50>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	200f      	movs	r0, #15
 8000c62:	f000 f9d9 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f9eb 	bl	8001042 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM21_MspInit 1 */

    /* USER CODE END TIM21_MspInit 1 */
  }

}
 8000c6c:	e00a      	b.n	8000c84 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_TIM_Base_MspInit+0x54>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d105      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_TIM_Base_MspInit+0x50>)
 8000c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_TIM_Base_MspInit+0x50>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8c0 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAUNCH_SIG_Pin);
 8000cca:	2004      	movs	r0, #4
 8000ccc:	f000 fb62 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RLD_PARA_Pin);
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f000 fb5f 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RLD_EXP_Pin);
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fb55 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <TIM2_IRQHandler+0x14>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 fc56 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	200000b4 	.word	0x200000b4

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <Reset_Handler>:
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <LoopForever+0x2>)
 8000d16:	4685      	mov	sp, r0
 8000d18:	f7ff fff6 	bl	8000d08 <SystemInit>
 8000d1c:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <LoopForever+0x6>)
 8000d1e:	6801      	ldr	r1, [r0, #0]
 8000d20:	0e09      	lsrs	r1, r1, #24
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <LoopForever+0xa>)
 8000d24:	4291      	cmp	r1, r2
 8000d26:	d105      	bne.n	8000d34 <ApplicationStart>
 8000d28:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <LoopForever+0xe>)
 8000d2a:	4912      	ldr	r1, [pc, #72]	@ (8000d74 <LoopForever+0x12>)
 8000d2c:	6001      	str	r1, [r0, #0]
 8000d2e:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <LoopForever+0x16>)
 8000d30:	4912      	ldr	r1, [pc, #72]	@ (8000d7c <LoopForever+0x1a>)
 8000d32:	6001      	str	r1, [r0, #0]

08000d34 <ApplicationStart>:
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <LoopForever+0x1e>)
 8000d36:	4913      	ldr	r1, [pc, #76]	@ (8000d84 <LoopForever+0x22>)
 8000d38:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <LoopForever+0x26>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:
 8000d3e:	58d4      	ldr	r4, [r2, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:
 8000d44:	18c4      	adds	r4, r0, r3
 8000d46:	428c      	cmp	r4, r1
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
 8000d4a:	4a10      	ldr	r2, [pc, #64]	@ (8000d8c <LoopForever+0x2a>)
 8000d4c:	4c10      	ldr	r4, [pc, #64]	@ (8000d90 <LoopForever+0x2e>)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:
 8000d56:	42a2      	cmp	r2, r4
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>
 8000d5a:	f002 fd6d 	bl	8003838 <__libc_init_array>
 8000d5e:	f7ff fc3b 	bl	80005d8 <main>

08000d62 <LoopForever>:
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
 8000d64:	20002000 	.word	0x20002000
 8000d68:	00000004 	.word	0x00000004
 8000d6c:	0000001f 	.word	0x0000001f
 8000d70:	40021034 	.word	0x40021034
 8000d74:	00000001 	.word	0x00000001
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	00000000 	.word	0x00000000
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000010 	.word	0x20000010
 8000d88:	08003914 	.word	0x08003914
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	2000013c 	.word	0x2000013c

08000d94 <ADC1_IRQHandler>:
 8000d94:	e7fe      	b.n	8000d94 <ADC1_IRQHandler>
	...

08000d98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_Init+0x3c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_Init+0x3c>)
 8000daa:	2140      	movs	r1, #64	@ 0x40
 8000dac:	430a      	orrs	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f811 	bl	8000dd8 <HAL_InitTick>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e001      	b.n	8000dc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc2:	f7ff fee1 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000de2:	681c      	ldr	r4, [r3, #0]
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <HAL_InitTick+0x60>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	0019      	movs	r1, r3
 8000dea:	23fa      	movs	r3, #250	@ 0xfa
 8000dec:	0098      	lsls	r0, r3, #2
 8000dee:	f7ff f98b 	bl	8000108 <__udivsi3>
 8000df2:	0003      	movs	r3, r0
 8000df4:	0019      	movs	r1, r3
 8000df6:	0020      	movs	r0, r4
 8000df8:	f7ff f986 	bl	8000108 <__udivsi3>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 f92f 	bl	8001062 <HAL_SYSTICK_Config>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e00f      	b.n	8000e2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d80b      	bhi.n	8000e2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	2301      	movs	r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	2200      	movs	r2, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 f8fc 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_InitTick+0x64>)
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b003      	add	sp, #12
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	20000004 	.word	0x20000004
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	20000008 	.word	0x20000008

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	18d2      	adds	r2, r2, r3
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000138 	.word	0x20000138

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	20000138 	.word	0x20000138

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff fff0 	bl	8000e64 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001a      	movs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	f7ff ffe0 	bl	8000e64 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed2:	d809      	bhi.n	8000ee8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	401a      	ands	r2, r3
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_EnableIRQ+0x30>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
  }
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f08:	d828      	bhi.n	8000f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	33c0      	adds	r3, #192	@ 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	589b      	ldr	r3, [r3, r2]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	@ 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	@ 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	481f      	ldr	r0, [pc, #124]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	33c0      	adds	r3, #192	@ 0xc0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f5a:	e031      	b.n	8000fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0019      	movs	r1, r3
 8000f64:	230f      	movs	r3, #15
 8000f66:	400b      	ands	r3, r1
 8000f68:	3b08      	subs	r3, #8
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	@ 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	@ 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	001c      	movs	r4, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	4023      	ands	r3, r4
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	18c3      	adds	r3, r0, r3
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	045b      	lsls	r3, r3, #17
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d301      	bcc.n	8000fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e010      	b.n	800100a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <SysTick_Config+0x44>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff7c 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x44>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x44>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	0002      	movs	r2, r0
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ffaf 	bl	8000fd0 <SysTick_Config>
 8001072:	0003      	movs	r3, r0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001092:	e149      	b.n	8001328 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x30>
 80010aa:	e13a      	b.n	8001322 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	2201      	movs	r2, #1
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	58d3      	ldr	r3, [r2, r3]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2207      	movs	r2, #7
 8001180:	4013      	ands	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2107      	movs	r1, #7
 800119a:	400b      	ands	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	401a      	ands	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	23c0      	movs	r3, #192	@ 0xc0
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d100      	bne.n	80011f8 <HAL_GPIO_Init+0x17c>
 80011f6:	e094      	b.n	8001322 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b51      	ldr	r3, [pc, #324]	@ (8001340 <HAL_GPIO_Init+0x2c4>)
 80011fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011fc:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <HAL_GPIO_Init+0x2c4>)
 80011fe:	2101      	movs	r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001204:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <HAL_GPIO_Init+0x2c8>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	589b      	ldr	r3, [r3, r2]
 8001210:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	23a0      	movs	r3, #160	@ 0xa0
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	429a      	cmp	r2, r3
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1de>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a44      	ldr	r2, [pc, #272]	@ (8001348 <HAL_GPIO_Init+0x2cc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1da>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a43      	ldr	r2, [pc, #268]	@ (800134c <HAL_GPIO_Init+0x2d0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1d6>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a42      	ldr	r2, [pc, #264]	@ (8001350 <HAL_GPIO_Init+0x2d4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1d2>
 800124a:	2305      	movs	r3, #5
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1e0>
 800124e:	2306      	movs	r3, #6
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1e0>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1e0>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1e0>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	@ (8001344 <HAL_GPIO_Init+0x2c8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b36      	ldr	r3, [pc, #216]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129e:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	039b      	lsls	r3, r3, #14
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c8:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f2:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_GPIO_Init+0x2d8>)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	40da      	lsrs	r2, r3
 8001330:	1e13      	subs	r3, r2, #0
 8001332:	d000      	beq.n	8001336 <HAL_GPIO_Init+0x2ba>
 8001334:	e6ae      	b.n	8001094 <HAL_GPIO_Init+0x18>
  }
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	50000400 	.word	0x50000400
 800134c:	50000800 	.word	0x50000800
 8001350:	50001c00 	.word	0x50001c00
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	0008      	movs	r0, r1
 8001362:	0011      	movs	r1, r2
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	1c7b      	adds	r3, r7, #1
 800136c:	1c0a      	adds	r2, r1, #0
 800136e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	1c7b      	adds	r3, r7, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a0:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	1dba      	adds	r2, r7, #6
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	4013      	ands	r3, r2
 80013aa:	d008      	beq.n	80013be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013ae:	1dba      	adds	r2, r7, #6
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff f8a3 	bl	8000504 <HAL_GPIO_EXTI_Callback>
  }
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 fb6c 	bl	8001ab8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e0:	4bc8      	ldr	r3, [pc, #800]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ea:	4bc6      	ldr	r3, [pc, #792]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x36>
 8001400:	e07d      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d007      	beq.n	8001418 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d112      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	429a      	cmp	r2, r3
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	4bba      	ldr	r3, [pc, #744]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d100      	bne.n	8001426 <HAL_RCC_OscConfig+0x5a>
 8001424:	e06a      	b.n	80014fc <HAL_RCC_OscConfig+0x130>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d166      	bne.n	80014fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f000 fb42 	bl	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x84>
 8001440:	4bb0      	ldr	r3, [pc, #704]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4baf      	ldr	r3, [pc, #700]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e027      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23a0      	movs	r3, #160	@ 0xa0
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	429a      	cmp	r2, r3
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0xae>
 800145c:	4ba9      	ldr	r3, [pc, #676]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4ba8      	ldr	r3, [pc, #672]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001462:	2180      	movs	r1, #128	@ 0x80
 8001464:	02c9      	lsls	r1, r1, #11
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4ba6      	ldr	r3, [pc, #664]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4ba5      	ldr	r3, [pc, #660]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e012      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 800147a:	4ba2      	ldr	r3, [pc, #648]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4ba1      	ldr	r3, [pc, #644]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001480:	49a1      	ldr	r1, [pc, #644]	@ (8001708 <HAL_RCC_OscConfig+0x33c>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b9f      	ldr	r3, [pc, #636]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4b9b      	ldr	r3, [pc, #620]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b9a      	ldr	r3, [pc, #616]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800149a:	499c      	ldr	r1, [pc, #624]	@ (800170c <HAL_RCC_OscConfig+0x340>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d014      	beq.n	80014d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcdc 	bl	8000e64 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fcd7 	bl	8000e64 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	@ 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e2f9      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0xe6>
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fcc7 	bl	8000e64 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcc2 	bl	8000e64 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	@ 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2e4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014ee:	4b85      	ldr	r3, [pc, #532]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x110>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d100      	bne.n	800150a <HAL_RCC_OscConfig+0x13e>
 8001508:	e099      	b.n	800163e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	2220      	movs	r2, #32
 8001514:	4013      	ands	r3, r2
 8001516:	d009      	beq.n	800152c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001518:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b79      	ldr	r3, [pc, #484]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800151e:	2120      	movs	r1, #32
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	2220      	movs	r2, #32
 8001528:	4393      	bics	r3, r2
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d13e      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1ea>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d13b      	bne.n	80015b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800153e:	4b71      	ldr	r3, [pc, #452]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d004      	beq.n	8001552 <HAL_RCC_OscConfig+0x186>
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e2b2      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b6c      	ldr	r3, [pc, #432]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a6e      	ldr	r2, [pc, #440]	@ (8001710 <HAL_RCC_OscConfig+0x344>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	4b68      	ldr	r3, [pc, #416]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001568:	4b66      	ldr	r3, [pc, #408]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2209      	movs	r2, #9
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	4b64      	ldr	r3, [pc, #400]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157a:	f000 fbeb 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 800157e:	0001      	movs	r1, r0
 8001580:	4b60      	ldr	r3, [pc, #384]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	220f      	movs	r2, #15
 8001588:	4013      	ands	r3, r2
 800158a:	4a62      	ldr	r2, [pc, #392]	@ (8001714 <HAL_RCC_OscConfig+0x348>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	000a      	movs	r2, r1
 8001590:	40da      	lsrs	r2, r3
 8001592:	4b61      	ldr	r3, [pc, #388]	@ (8001718 <HAL_RCC_OscConfig+0x34c>)
 8001594:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001596:	4b61      	ldr	r3, [pc, #388]	@ (800171c <HAL_RCC_OscConfig+0x350>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2513      	movs	r5, #19
 800159c:	197c      	adds	r4, r7, r5
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fc1a 	bl	8000dd8 <HAL_InitTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015a8:	197b      	adds	r3, r7, r5
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d046      	beq.n	800163e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80015b0:	197b      	adds	r3, r7, r5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	e280      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d027      	beq.n	800160c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015bc:	4b51      	ldr	r3, [pc, #324]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2209      	movs	r2, #9
 80015c2:	4393      	bics	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80015c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fc49 	bl	8000e64 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc44 	bl	8000e64 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e266      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ea:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2204      	movs	r2, #4
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f1      	beq.n	80015d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b43      	ldr	r3, [pc, #268]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	@ (8001710 <HAL_RCC_OscConfig+0x344>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	021a      	lsls	r2, r3, #8
 8001604:	4b3f      	ldr	r3, [pc, #252]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e018      	b.n	800163e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b3c      	ldr	r3, [pc, #240]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001612:	2101      	movs	r1, #1
 8001614:	438a      	bics	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fc24 	bl	8000e64 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc1f 	bl	8000e64 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e241      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001634:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2204      	movs	r2, #4
 800163a:	4013      	ands	r3, r2
 800163c:	d1f1      	bne.n	8001622 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2210      	movs	r2, #16
 8001644:	4013      	ands	r3, r2
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x27e>
 8001648:	e0a1      	b.n	800178e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d140      	bne.n	80016d2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001650:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d005      	beq.n	8001668 <HAL_RCC_OscConfig+0x29c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e227      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a2c      	ldr	r2, [pc, #176]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1a      	ldr	r2, [r3, #32]
 8001676:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	0a19      	lsrs	r1, r3, #8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	061a      	lsls	r2, r3, #24
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	0b5b      	lsrs	r3, r3, #13
 8001696:	3301      	adds	r3, #1
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	0212      	lsls	r2, r2, #8
 800169c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	210f      	movs	r1, #15
 80016a6:	400b      	ands	r3, r1
 80016a8:	491a      	ldr	r1, [pc, #104]	@ (8001714 <HAL_RCC_OscConfig+0x348>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_RCC_OscConfig+0x34c>)
 80016b0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_RCC_OscConfig+0x350>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2513      	movs	r5, #19
 80016b8:	197c      	adds	r4, r7, r5
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fb8c 	bl	8000dd8 <HAL_InitTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016c4:	197b      	adds	r3, r7, r5
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d060      	beq.n	800178e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	e1f2      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03f      	beq.n	800175a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_OscConfig+0x338>)
 80016e0:	2180      	movs	r1, #128	@ 0x80
 80016e2:	0049      	lsls	r1, r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fbbc 	bl	8000e64 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f0:	e018      	b.n	8001724 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f2:	f7ff fbb7 	bl	8000e64 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d911      	bls.n	8001724 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1d9      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
 8001704:	40021000 	.word	0x40021000
 8001708:	fffeffff 	.word	0xfffeffff
 800170c:	fffbffff 	.word	0xfffbffff
 8001710:	ffffe0ff 	.word	0xffffe0ff
 8001714:	08003898 	.word	0x08003898
 8001718:	20000004 	.word	0x20000004
 800171c:	20000008 	.word	0x20000008
 8001720:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001724:	4bc9      	ldr	r3, [pc, #804]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d0e0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001730:	4bc6      	ldr	r3, [pc, #792]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4ac6      	ldr	r2, [pc, #792]	@ (8001a50 <HAL_RCC_OscConfig+0x684>)
 8001736:	4013      	ands	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1a      	ldr	r2, [r3, #32]
 800173e:	4bc3      	ldr	r3, [pc, #780]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001744:	4bc1      	ldr	r3, [pc, #772]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	0a19      	lsrs	r1, r3, #8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	061a      	lsls	r2, r3, #24
 8001752:	4bbe      	ldr	r3, [pc, #760]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001754:	430a      	orrs	r2, r1
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	e019      	b.n	800178e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800175a:	4bbc      	ldr	r3, [pc, #752]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4bbb      	ldr	r3, [pc, #748]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001760:	49bc      	ldr	r1, [pc, #752]	@ (8001a54 <HAL_RCC_OscConfig+0x688>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb7d 	bl	8000e64 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001770:	f7ff fb78 	bl	8000e64 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e19a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001782:	4bb2      	ldr	r3, [pc, #712]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2208      	movs	r2, #8
 8001794:	4013      	ands	r3, r2
 8001796:	d036      	beq.n	8001806 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d019      	beq.n	80017d4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a0:	4baa      	ldr	r3, [pc, #680]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017a4:	4ba9      	ldr	r3, [pc, #676]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fb5a 	bl	8000e64 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb55 	bl	8000e64 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e177      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d0f1      	beq.n	80017b6 <HAL_RCC_OscConfig+0x3ea>
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017d8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017da:	2101      	movs	r1, #1
 80017dc:	438a      	bics	r2, r1
 80017de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb40 	bl	8000e64 <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fb3b 	bl	8000e64 <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e15d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fc:	4b93      	ldr	r3, [pc, #588]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d1f1      	bne.n	80017ea <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x446>
 8001810:	e0ae      	b.n	8001970 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2023      	movs	r0, #35	@ 0x23
 8001814:	183b      	adds	r3, r7, r0
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800181c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	055b      	lsls	r3, r3, #21
 8001822:	4013      	ands	r3, r2
 8001824:	d109      	bne.n	800183a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b89      	ldr	r3, [pc, #548]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800182a:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	0549      	lsls	r1, r1, #21
 8001830:	430a      	orrs	r2, r1
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001834:	183b      	adds	r3, r7, r0
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b87      	ldr	r3, [pc, #540]	@ (8001a58 <HAL_RCC_OscConfig+0x68c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d11a      	bne.n	800187c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b84      	ldr	r3, [pc, #528]	@ (8001a58 <HAL_RCC_OscConfig+0x68c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b83      	ldr	r3, [pc, #524]	@ (8001a58 <HAL_RCC_OscConfig+0x68c>)
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	0049      	lsls	r1, r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001854:	f7ff fb06 	bl	8000e64 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fb01 	bl	8000e64 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b64      	cmp	r3, #100	@ 0x64
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e123      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <HAL_RCC_OscConfig+0x68c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4cc>
 8001888:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800188a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	0049      	lsls	r1, r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	651a      	str	r2, [r3, #80]	@ 0x50
 8001896:	e031      	b.n	80018fc <HAL_RCC_OscConfig+0x530>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x4ee>
 80018a0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018a6:	496b      	ldr	r1, [pc, #428]	@ (8001a54 <HAL_RCC_OscConfig+0x688>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80018ac:	4b67      	ldr	r3, [pc, #412]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018b2:	496a      	ldr	r1, [pc, #424]	@ (8001a5c <HAL_RCC_OscConfig+0x690>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80018b8:	e020      	b.n	80018fc <HAL_RCC_OscConfig+0x530>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	23a0      	movs	r3, #160	@ 0xa0
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10e      	bne.n	80018e4 <HAL_RCC_OscConfig+0x518>
 80018c6:	4b61      	ldr	r3, [pc, #388]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ca:	4b60      	ldr	r3, [pc, #384]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	00c9      	lsls	r1, r1, #3
 80018d0:	430a      	orrs	r2, r1
 80018d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80018d4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018da:	2180      	movs	r1, #128	@ 0x80
 80018dc:	0049      	lsls	r1, r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x530>
 80018e4:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018e8:	4b58      	ldr	r3, [pc, #352]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018ea:	495a      	ldr	r1, [pc, #360]	@ (8001a54 <HAL_RCC_OscConfig+0x688>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80018f0:	4b56      	ldr	r3, [pc, #344]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018f4:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80018f6:	4959      	ldr	r1, [pc, #356]	@ (8001a5c <HAL_RCC_OscConfig+0x690>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff faae 	bl	8000e64 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190c:	e009      	b.n	8001922 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff faa9 	bl	8000e64 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a51      	ldr	r2, [pc, #324]	@ (8001a60 <HAL_RCC_OscConfig+0x694>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0ca      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001922:	4b4a      	ldr	r3, [pc, #296]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d0ef      	beq.n	800190e <HAL_RCC_OscConfig+0x542>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fa98 	bl	8000e64 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001938:	e009      	b.n	800194e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fa93 	bl	8000e64 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a46      	ldr	r2, [pc, #280]	@ (8001a60 <HAL_RCC_OscConfig+0x694>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0b4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d1ef      	bne.n	800193a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195a:	2323      	movs	r3, #35	@ 0x23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800196a:	493e      	ldr	r1, [pc, #248]	@ (8001a64 <HAL_RCC_OscConfig+0x698>)
 800196c:	400a      	ands	r2, r1
 800196e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <HAL_RCC_OscConfig+0x5ae>
 8001978:	e09d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b0c      	cmp	r3, #12
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x5b6>
 8001980:	e076      	b.n	8001a70 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	2b02      	cmp	r3, #2
 8001988:	d145      	bne.n	8001a16 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b30      	ldr	r3, [pc, #192]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001990:	4935      	ldr	r1, [pc, #212]	@ (8001a68 <HAL_RCC_OscConfig+0x69c>)
 8001992:	400a      	ands	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fa65 	bl	8000e64 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fa60 	bl	8000e64 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e082      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	049b      	lsls	r3, r3, #18
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <HAL_RCC_OscConfig+0x6a0>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	431a      	orrs	r2, r3
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0449      	lsls	r1, r1, #17
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa3a 	bl	8000e64 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff fa35 	bl	8000e64 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e057      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	049b      	lsls	r3, r3, #18
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x62a>
 8001a14:	e04f      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001a1c:	4912      	ldr	r1, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x69c>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa1f 	bl	8000e64 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff fa1a 	bl	8000e64 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e03c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a3e:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	@ 0x80
 8001a44:	049b      	lsls	r3, r3, #18
 8001a46:	4013      	ands	r3, r2
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x660>
 8001a4a:	e034      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6ea>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	ffff1fff 	.word	0xffff1fff
 8001a54:	fffffeff 	.word	0xfffffeff
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	fffffbff 	.word	0xfffffbff
 8001a60:	00001388 	.word	0x00001388
 8001a64:	efffffff 	.word	0xefffffff
 8001a68:	feffffff 	.word	0xfeffffff
 8001a6c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_RCC_OscConfig+0x6f4>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	401a      	ands	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10f      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	23f0      	movs	r3, #240	@ 0xf0
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	23c0      	movs	r3, #192	@ 0xc0
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b00a      	add	sp, #40	@ 0x28
 8001abe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e128      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b96      	ldr	r3, [pc, #600]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d91e      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b93      	ldr	r3, [pc, #588]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4393      	bics	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	4b90      	ldr	r3, [pc, #576]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f9b4 	bl	8000e64 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7ff f9af 	bl	8000e64 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	4a8a      	ldr	r2, [pc, #552]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e109      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b87      	ldr	r3, [pc, #540]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1ee      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2e:	4b83      	ldr	r3, [pc, #524]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	22f0      	movs	r2, #240	@ 0xf0
 8001b34:	4393      	bics	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
 8001b4c:	e089      	b.n	8001c62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b56:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d120      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0e1      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b6e:	4b73      	ldr	r3, [pc, #460]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	049b      	lsls	r3, r3, #18
 8001b76:	4013      	ands	r3, r2
 8001b78:	d114      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0d5      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b86:	4b6d      	ldr	r3, [pc, #436]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0ca      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b94:	4b69      	ldr	r3, [pc, #420]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0c2      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba4:	4b65      	ldr	r3, [pc, #404]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4b62      	ldr	r3, [pc, #392]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f954 	bl	8000e64 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff f94b 	bl	8000e64 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0a5      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bde:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	220c      	movs	r2, #12
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_ClockConfig+0x106>
 8001bea:	e03a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d111      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7ff f935 	bl	8000e64 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a4d      	ldr	r2, [pc, #308]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e08f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x132>
 8001c16:	e024      	b.n	8001c62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d11b      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c22:	f7ff f91f 	bl	8000e64 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a42      	ldr	r2, [pc, #264]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e079      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c36:	4b41      	ldr	r3, [pc, #260]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x15e>
 8001c42:	e00e      	b.n	8001c62 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f90e 	bl	8000e64 <HAL_GetTick>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e068      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c58:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d21e      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4393      	bics	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c82:	f7ff f8ef 	bl	8000e64 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	e009      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f8ea 	bl	8000e64 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4a28      	ldr	r2, [pc, #160]	@ (8001d38 <HAL_RCC_ClockConfig+0x274>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e044      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_ClockConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d1ee      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <HAL_RCC_ClockConfig+0x27c>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00a      	beq.n	8001cec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4a1a      	ldr	r2, [pc, #104]	@ (8001d44 <HAL_RCC_ClockConfig+0x280>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00da      	lsls	r2, r3, #3
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cec:	f000 f832 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_RCC_ClockConfig+0x278>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <HAL_RCC_ClockConfig+0x284>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	000a      	movs	r2, r1
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_RCC_ClockConfig+0x288>)
 8001d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_RCC_ClockConfig+0x28c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	250b      	movs	r5, #11
 8001d0e:	197c      	adds	r4, r7, r5
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff f861 	bl	8000dd8 <HAL_InitTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d1a:	197b      	adds	r3, r7, r5
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d22:	197b      	adds	r3, r7, r5
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bdb0      	pop	{r4, r5, r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	40022000 	.word	0x40022000
 8001d38:	00001388 	.word	0x00001388
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	fffff8ff 	.word	0xfffff8ff
 8001d44:	ffffc7ff 	.word	0xffffc7ff
 8001d48:	08003898 	.word	0x08003898
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	20000008 	.word	0x20000008

08001d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	220c      	movs	r2, #12
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d013      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x3e>
 8001d6a:	d85c      	bhi.n	8001e26 <HAL_RCC_GetSysClockFreq+0xd2>
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d002      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x22>
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d00b      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x38>
 8001d74:	e057      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d76:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d002      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d80:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d82:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d84:	e05d      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001d86:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d88:	613b      	str	r3, [r7, #16]
      break;
 8001d8a:	e05a      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	e057      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	220f      	movs	r2, #15
 8001d98:	4013      	ands	r3, r2
 8001d9a:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	0d9b      	lsrs	r3, r3, #22
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
 8001da8:	3301      	adds	r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	4013      	ands	r3, r2
 8001db6:	d00f      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	000a      	movs	r2, r1
 8001dbc:	0152      	lsls	r2, r2, #5
 8001dbe:	1a52      	subs	r2, r2, r1
 8001dc0:	0193      	lsls	r3, r2, #6
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	185b      	adds	r3, r3, r1
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe f99b 	bl	8000108 <__udivsi3>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e023      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00f      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	000a      	movs	r2, r1
 8001de6:	0152      	lsls	r2, r2, #5
 8001de8:	1a52      	subs	r2, r2, r1
 8001dea:	0193      	lsls	r3, r2, #6
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	185b      	adds	r3, r3, r1
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7fe f986 	bl	8000108 <__udivsi3>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e00e      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	000a      	movs	r2, r1
 8001e06:	0152      	lsls	r2, r2, #5
 8001e08:	1a52      	subs	r2, r2, r1
 8001e0a:	0193      	lsls	r3, r2, #6
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	185b      	adds	r3, r3, r1
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe f976 	bl	8000108 <__udivsi3>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	e00d      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      break;
 8001e40:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e42:	693b      	ldr	r3, [r7, #16]
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b006      	add	sp, #24
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	003d0900 	.word	0x003d0900
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	080038b0 	.word	0x080038b0

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	@ (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	2207      	movs	r2, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d9      	lsrs	r1, r3
 8001e8e:	000b      	movs	r3, r1
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080038a8 	.word	0x080038a8

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffdc 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea8:	0001      	movs	r1, r0
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	0adb      	lsrs	r3, r3, #11
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	000b      	movs	r3, r1
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080038a8 	.word	0x080038a8

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ed4:	2017      	movs	r0, #23
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ee6:	e0c7      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee8:	4b84      	ldr	r3, [pc, #528]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b81      	ldr	r3, [pc, #516]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ef8:	4b80      	ldr	r3, [pc, #512]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001efa:	2180      	movs	r1, #128	@ 0x80
 8001efc:	0549      	lsls	r1, r1, #21
 8001efe:	430a      	orrs	r2, r1
 8001f00:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b7d      	ldr	r3, [pc, #500]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d11a      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f14:	4b7a      	ldr	r3, [pc, #488]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b79      	ldr	r3, [pc, #484]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	0049      	lsls	r1, r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7fe ff9f 	bl	8000e64 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	e008      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe ff9a 	bl	8000e64 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0d9      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	23c0      	movs	r3, #192	@ 0xc0
 8001f50:	039b      	lsls	r3, r3, #14
 8001f52:	4013      	ands	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	23c0      	movs	r3, #192	@ 0xc0
 8001f5c:	039b      	lsls	r3, r3, #14
 8001f5e:	4013      	ands	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d013      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	23c0      	movs	r3, #192	@ 0xc0
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	401a      	ands	r2, r3
 8001f70:	23c0      	movs	r3, #192	@ 0xc0
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10a      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f78:	4b60      	ldr	r3, [pc, #384]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	401a      	ands	r2, r3
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d101      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0b1      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f92:	23c0      	movs	r3, #192	@ 0xc0
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d03b      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	23c0      	movs	r3, #192	@ 0xc0
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	4013      	ands	r3, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d033      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d02e      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001fba:	4b50      	ldr	r3, [pc, #320]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fbe:	4a51      	ldr	r2, [pc, #324]	@ (8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	0309      	lsls	r1, r1, #12
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fd6:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd8:	494b      	ldr	r1, [pc, #300]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001fda:	400a      	ands	r2, r1
 8001fdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001fde:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d014      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe ff39 	bl	8000e64 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff6:	e009      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ff34 	bl	8000e64 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e072      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200c:	4b3b      	ldr	r3, [pc, #236]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800200e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0ef      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	4013      	ands	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	23c0      	movs	r3, #192	@ 0xc0
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	401a      	ands	r2, r3
 800202c:	23c0      	movs	r3, #192	@ 0xc0
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	429a      	cmp	r2, r3
 8002032:	d10c      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a35      	ldr	r2, [pc, #212]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	23c0      	movs	r3, #192	@ 0xc0
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	401a      	ands	r2, r3
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002050:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	23c0      	movs	r3, #192	@ 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	401a      	ands	r2, r3
 800205c:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800205e:	430a      	orrs	r2, r1
 8002060:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002062:	2317      	movs	r3, #23
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800206e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002072:	4928      	ldr	r1, [pc, #160]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002074:	400a      	ands	r2, r1
 8002076:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	220c      	movs	r2, #12
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002092:	430a      	orrs	r2, r1
 8002094:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	4a16      	ldr	r2, [pc, #88]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	fffcffff 	.word	0xfffcffff
 8002108:	fff7ffff 	.word	0xfff7ffff
 800210c:	00001388 	.word	0x00001388
 8002110:	ffcfffff 	.word	0xffcfffff
 8002114:	efffffff 	.word	0xefffffff
 8002118:	fffff3ff 	.word	0xfffff3ff
 800211c:	ffffcfff 	.word	0xffffcfff
 8002120:	fff3ffff 	.word	0xfff3ffff

08002124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e032      	b.n	800219c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2239      	movs	r2, #57	@ 0x39
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2238      	movs	r2, #56	@ 0x38
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe fd75 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2239      	movs	r2, #57	@ 0x39
 8002156:	2102      	movs	r1, #2
 8002158:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	0019      	movs	r1, r3
 8002164:	0010      	movs	r0, r2
 8002166:	f000 fc2f 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223e      	movs	r2, #62	@ 0x3e
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223a      	movs	r2, #58	@ 0x3a
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	223b      	movs	r2, #59	@ 0x3b
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	223c      	movs	r2, #60	@ 0x3c
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223d      	movs	r2, #61	@ 0x3d
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2239      	movs	r2, #57	@ 0x39
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2239      	movs	r2, #57	@ 0x39
 80021b0:	5c9b      	ldrb	r3, [r3, r2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d001      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e031      	b.n	8002220 <HAL_TIM_Base_Start_IT+0x7c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2239      	movs	r2, #57	@ 0x39
 80021c0:	2102      	movs	r1, #2
 80021c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	05db      	lsls	r3, r3, #23
 80021dc:	429a      	cmp	r2, r3
 80021de:	d004      	beq.n	80021ea <HAL_TIM_Base_Start_IT+0x46>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_TIM_Base_Start_IT+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_TIM_Base_Start_IT+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2207      	movs	r2, #7
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d010      	beq.n	800221e <HAL_TIM_Base_Start_IT+0x7a>
    {
      __HAL_TIM_ENABLE(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	e007      	b.n	800221e <HAL_TIM_Base_Start_IT+0x7a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010800 	.word	0x40010800

0800222c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	438a      	bics	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_TIM_Base_Stop_IT+0x48>)
 800224c:	4013      	ands	r3, r2
 800224e:	d107      	bne.n	8002260 <HAL_TIM_Base_Stop_IT+0x34>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	438a      	bics	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2239      	movs	r2, #57	@ 0x39
 8002264:	2101      	movs	r1, #1
 8002266:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	00001111 	.word	0x00001111

08002278 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e032      	b.n	80022f0 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2239      	movs	r2, #57	@ 0x39
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2238      	movs	r2, #56	@ 0x38
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f829 	bl	80022f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2239      	movs	r2, #57	@ 0x39
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fb85 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	223e      	movs	r2, #62	@ 0x3e
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223a      	movs	r2, #58	@ 0x3a
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223b      	movs	r2, #59	@ 0x3b
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223c      	movs	r2, #60	@ 0x3c
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223d      	movs	r2, #61	@ 0x3d
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2239      	movs	r2, #57	@ 0x39
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	230f      	movs	r3, #15
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d108      	bne.n	8002332 <HAL_TIM_OC_Start_IT+0x2a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223a      	movs	r2, #58	@ 0x3a
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	4193      	sbcs	r3, r2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	e01f      	b.n	8002372 <HAL_TIM_OC_Start_IT+0x6a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d108      	bne.n	800234a <HAL_TIM_OC_Start_IT+0x42>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	223b      	movs	r2, #59	@ 0x3b
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	4193      	sbcs	r3, r2
 8002346:	b2db      	uxtb	r3, r3
 8002348:	e013      	b.n	8002372 <HAL_TIM_OC_Start_IT+0x6a>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d108      	bne.n	8002362 <HAL_TIM_OC_Start_IT+0x5a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	223c      	movs	r2, #60	@ 0x3c
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	4193      	sbcs	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	e007      	b.n	8002372 <HAL_TIM_OC_Start_IT+0x6a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	@ 0x3d
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	4193      	sbcs	r3, r2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e08b      	b.n	8002492 <HAL_TIM_OC_Start_IT+0x18a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <HAL_TIM_OC_Start_IT+0x82>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223a      	movs	r2, #58	@ 0x3a
 8002384:	2102      	movs	r1, #2
 8002386:	5499      	strb	r1, [r3, r2]
 8002388:	e013      	b.n	80023b2 <HAL_TIM_OC_Start_IT+0xaa>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d104      	bne.n	800239a <HAL_TIM_OC_Start_IT+0x92>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223b      	movs	r2, #59	@ 0x3b
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]
 8002398:	e00b      	b.n	80023b2 <HAL_TIM_OC_Start_IT+0xaa>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d104      	bne.n	80023aa <HAL_TIM_OC_Start_IT+0xa2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	223c      	movs	r2, #60	@ 0x3c
 80023a4:	2102      	movs	r1, #2
 80023a6:	5499      	strb	r1, [r3, r2]
 80023a8:	e003      	b.n	80023b2 <HAL_TIM_OC_Start_IT+0xaa>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	223d      	movs	r2, #61	@ 0x3d
 80023ae:	2102      	movs	r1, #2
 80023b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d02a      	beq.n	800240e <HAL_TIM_OC_Start_IT+0x106>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d830      	bhi.n	8002420 <HAL_TIM_OC_Start_IT+0x118>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d01b      	beq.n	80023fc <HAL_TIM_OC_Start_IT+0xf4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d82a      	bhi.n	8002420 <HAL_TIM_OC_Start_IT+0x118>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_TIM_OC_Start_IT+0xd0>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d009      	beq.n	80023ea <HAL_TIM_OC_Start_IT+0xe2>
 80023d6:	e023      	b.n	8002420 <HAL_TIM_OC_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]
      break;
 80023e8:	e01f      	b.n	800242a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2104      	movs	r1, #4
 80023f6:	430a      	orrs	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]
      break;
 80023fa:	e016      	b.n	800242a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2108      	movs	r1, #8
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]
      break;
 800240c:	e00d      	b.n	800242a <HAL_TIM_OC_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2110      	movs	r1, #16
 800241a:	430a      	orrs	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
      break;
 800241e:	e004      	b.n	800242a <HAL_TIM_OC_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
      break;
 8002428:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d12b      	bne.n	800248c <HAL_TIM_OC_Start_IT+0x184>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	0018      	movs	r0, r3
 800243e:	f000 fcb1 	bl	8002da4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d004      	beq.n	8002458 <HAL_TIM_OC_Start_IT+0x150>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a12      	ldr	r2, [pc, #72]	@ (800249c <HAL_TIM_OC_Start_IT+0x194>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d111      	bne.n	800247c <HAL_TIM_OC_Start_IT+0x174>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2207      	movs	r2, #7
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d010      	beq.n	800248c <HAL_TIM_OC_Start_IT+0x184>
      {
        __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e007      	b.n	800248c <HAL_TIM_OC_Start_IT+0x184>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800248c:	230f      	movs	r3, #15
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	781b      	ldrb	r3, [r3, #0]
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	40010800 	.word	0x40010800

080024a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	230f      	movs	r3, #15
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d02a      	beq.n	800250e <HAL_TIM_OC_Stop_IT+0x6e>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d830      	bhi.n	8002520 <HAL_TIM_OC_Stop_IT+0x80>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d01b      	beq.n	80024fc <HAL_TIM_OC_Stop_IT+0x5c>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d82a      	bhi.n	8002520 <HAL_TIM_OC_Stop_IT+0x80>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_TIM_OC_Stop_IT+0x38>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d009      	beq.n	80024ea <HAL_TIM_OC_Stop_IT+0x4a>
 80024d6:	e023      	b.n	8002520 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	438a      	bics	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]
      break;
 80024e8:	e01f      	b.n	800252a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2104      	movs	r1, #4
 80024f6:	438a      	bics	r2, r1
 80024f8:	60da      	str	r2, [r3, #12]
      break;
 80024fa:	e016      	b.n	800252a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2108      	movs	r1, #8
 8002508:	438a      	bics	r2, r1
 800250a:	60da      	str	r2, [r3, #12]
      break;
 800250c:	e00d      	b.n	800252a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2110      	movs	r1, #16
 800251a:	438a      	bics	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
      break;
 800251e:	e004      	b.n	800252a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
      break;
 8002528:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d130      	bne.n	8002596 <HAL_TIM_OC_Stop_IT+0xf6>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fc31 	bl	8002da4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <HAL_TIM_OC_Stop_IT+0x104>)
 800254a:	4013      	ands	r3, r2
 800254c:	d107      	bne.n	800255e <HAL_TIM_OC_Stop_IT+0xbe>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	438a      	bics	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_TIM_OC_Stop_IT+0xce>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	223a      	movs	r2, #58	@ 0x3a
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]
 800256c:	e013      	b.n	8002596 <HAL_TIM_OC_Stop_IT+0xf6>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d104      	bne.n	800257e <HAL_TIM_OC_Stop_IT+0xde>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223b      	movs	r2, #59	@ 0x3b
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]
 800257c:	e00b      	b.n	8002596 <HAL_TIM_OC_Stop_IT+0xf6>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d104      	bne.n	800258e <HAL_TIM_OC_Stop_IT+0xee>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223c      	movs	r2, #60	@ 0x3c
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]
 800258c:	e003      	b.n	8002596 <HAL_TIM_OC_Stop_IT+0xf6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	223d      	movs	r2, #61	@ 0x3d
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002596:	230f      	movs	r3, #15
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00001111 	.word	0x00001111

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d021      	beq.n	800260c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d01d      	beq.n	800260c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2203      	movs	r2, #3
 80025d6:	4252      	negs	r2, r2
 80025d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2203      	movs	r2, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f9d2 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e007      	b.n	8002606 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7fd ff5d 	bl	80004b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 f9d1 	bl	80029a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	d01e      	beq.n	800265a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2205      	movs	r2, #5
 8002622:	4252      	negs	r2, r2
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4013      	ands	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f9ab 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 8002642:	e007      	b.n	8002654 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd ff36 	bl	80004b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f9aa 	bl	80029a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2208      	movs	r2, #8
 800265e:	4013      	ands	r3, r2
 8002660:	d021      	beq.n	80026a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
 8002668:	d01d      	beq.n	80026a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2209      	movs	r2, #9
 8002670:	4252      	negs	r2, r2
 8002672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	d004      	beq.n	8002690 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f985 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 800268e:	e007      	b.n	80026a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f7fd ff10 	bl	80004b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 f984 	bl	80029a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2210      	movs	r2, #16
 80026aa:	4013      	ands	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2210      	movs	r2, #16
 80026b2:	4013      	ands	r3, r2
 80026b4:	d01e      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2211      	movs	r2, #17
 80026bc:	4252      	negs	r2, r2
 80026be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2208      	movs	r2, #8
 80026c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	23c0      	movs	r3, #192	@ 0xc0
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f95e 	bl	8002998 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e007      	b.n	80026ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fd fee9 	bl	80004b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f95d 	bl	80029a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d008      	beq.n	8002716 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2202      	movs	r2, #2
 800270a:	4252      	negs	r2, r2
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fd fe9b 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2240      	movs	r2, #64	@ 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	d00c      	beq.n	8002738 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2240      	movs	r2, #64	@ 0x40
 8002722:	4013      	ands	r3, r2
 8002724:	d008      	beq.n	8002738 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2241      	movs	r2, #65	@ 0x41
 800272c:	4252      	negs	r2, r2
 800272e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f940 	bl	80029b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	46c0      	nop			@ (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2317      	movs	r3, #23
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2238      	movs	r2, #56	@ 0x38
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_TIM_OC_ConfigChannel+0x22>
 800275e:	2302      	movs	r3, #2
 8002760:	e042      	b.n	80027e8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2238      	movs	r2, #56	@ 0x38
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d027      	beq.n	80027c0 <HAL_TIM_OC_ConfigChannel+0x80>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d82c      	bhi.n	80027d0 <HAL_TIM_OC_ConfigChannel+0x90>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d019      	beq.n	80027b0 <HAL_TIM_OC_ConfigChannel+0x70>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d826      	bhi.n	80027d0 <HAL_TIM_OC_ConfigChannel+0x90>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_TIM_OC_ConfigChannel+0x50>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d008      	beq.n	80027a0 <HAL_TIM_OC_ConfigChannel+0x60>
 800278e:	e01f      	b.n	80027d0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f965 	bl	8002a68 <TIM_OC1_SetConfig>
      break;
 800279e:	e01c      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f999 	bl	8002ae0 <TIM_OC2_SetConfig>
      break;
 80027ae:	e014      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f9d3 	bl	8002b64 <TIM_OC3_SetConfig>
      break;
 80027be:	e00c      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fa0b 	bl	8002be4 <TIM_OC4_SetConfig>
      break;
 80027ce:	e004      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80027d0:	2317      	movs	r3, #23
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
      break;
 80027d8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2238      	movs	r2, #56	@ 0x38
 80027de:	2100      	movs	r1, #0
 80027e0:	5499      	strb	r1, [r3, r2]

  return status;
 80027e2:	2317      	movs	r3, #23
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b006      	add	sp, #24
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	230f      	movs	r3, #15
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2238      	movs	r2, #56	@ 0x38
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x20>
 800280c:	2302      	movs	r3, #2
 800280e:	e0bc      	b.n	800298a <HAL_TIM_ConfigClockSource+0x19a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2238      	movs	r2, #56	@ 0x38
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2239      	movs	r2, #57	@ 0x39
 800281c:	2102      	movs	r1, #2
 800281e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2277      	movs	r2, #119	@ 0x77
 800282c:	4393      	bics	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	0192      	lsls	r2, r2, #6
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xde>
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	0192      	lsls	r2, r2, #6
 8002850:	4293      	cmp	r3, r2
 8002852:	d900      	bls.n	8002856 <HAL_TIM_ConfigClockSource+0x66>
 8002854:	e088      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	0152      	lsls	r2, r2, #5
 800285a:	4293      	cmp	r3, r2
 800285c:	d100      	bne.n	8002860 <HAL_TIM_ConfigClockSource+0x70>
 800285e:	e088      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x182>
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	0152      	lsls	r2, r2, #5
 8002864:	4293      	cmp	r3, r2
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x7a>
 8002868:	e07e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800286a:	2b70      	cmp	r3, #112	@ 0x70
 800286c:	d018      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xb0>
 800286e:	d900      	bls.n	8002872 <HAL_TIM_ConfigClockSource+0x82>
 8002870:	e07a      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002872:	2b60      	cmp	r3, #96	@ 0x60
 8002874:	d04f      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x126>
 8002876:	d900      	bls.n	800287a <HAL_TIM_ConfigClockSource+0x8a>
 8002878:	e076      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800287a:	2b50      	cmp	r3, #80	@ 0x50
 800287c:	d03b      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x106>
 800287e:	d900      	bls.n	8002882 <HAL_TIM_ConfigClockSource+0x92>
 8002880:	e072      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002882:	2b40      	cmp	r3, #64	@ 0x40
 8002884:	d057      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x146>
 8002886:	d900      	bls.n	800288a <HAL_TIM_ConfigClockSource+0x9a>
 8002888:	e06e      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 800288a:	2b30      	cmp	r3, #48	@ 0x30
 800288c:	d063      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800288e:	d86b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d060      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 8002894:	d868      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d05d      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800289a:	2b10      	cmp	r3, #16
 800289c:	d05b      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 800289e:	e063      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	f000 fa58 	bl	8002d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2277      	movs	r2, #119	@ 0x77
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e052      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	f000 fa41 	bl	8002d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	01c9      	lsls	r1, r1, #7
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e03e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	001a      	movs	r2, r3
 8002904:	f000 f9b4 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2150      	movs	r1, #80	@ 0x50
 800290e:	0018      	movs	r0, r3
 8002910:	f000 fa0e 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 8002914:	e02e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002922:	001a      	movs	r2, r3
 8002924:	f000 f9d2 	bl	8002ccc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2160      	movs	r1, #96	@ 0x60
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f9fe 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 8002934:	e01e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	001a      	movs	r2, r3
 8002944:	f000 f994 	bl	8002c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2140      	movs	r1, #64	@ 0x40
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f9ee 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 8002954:	e00e      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0019      	movs	r1, r3
 8002960:	0010      	movs	r0, r2
 8002962:	f000 f9e5 	bl	8002d30 <TIM_ITRx_SetConfig>
      break;
 8002966:	e005      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
      break;
 8002970:	e000      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002972:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2239      	movs	r2, #57	@ 0x39
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2238      	movs	r2, #56	@ 0x38
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

  return status;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	ffff00ff 	.word	0xffff00ff

08002998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	429a      	cmp	r2, r3
 80029e0:	d003      	beq.n	80029ea <TIM_Base_SetConfig+0x22>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a60 <TIM_Base_SetConfig+0x98>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2270      	movs	r2, #112	@ 0x70
 80029ee:	4393      	bics	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x46>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <TIM_Base_SetConfig+0x98>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <TIM_Base_SetConfig+0x9c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	4393      	bics	r3, r2
 8002a26:	001a      	movs	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010800 	.word	0x40010800
 8002a64:	fffffcff 	.word	0xfffffcff

08002a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4393      	bics	r3, r2
 8002a80:	001a      	movs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2270      	movs	r2, #112	@ 0x70
 8002a96:	4393      	bics	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	621a      	str	r2, [r3, #32]
}
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b006      	add	sp, #24
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	2210      	movs	r2, #16
 8002af6:	4393      	bics	r3, r2
 8002af8:	001a      	movs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <TIM_OC2_SetConfig+0x7c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <TIM_OC2_SetConfig+0x80>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	46c0      	nop			@ (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffff8fff 	.word	0xffff8fff
 8002b60:	fffffcff 	.word	0xfffffcff

08002b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <TIM_OC3_SetConfig+0x78>)
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2270      	movs	r2, #112	@ 0x70
 8002b90:	4393      	bics	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4393      	bics	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <TIM_OC3_SetConfig+0x7c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b006      	add	sp, #24
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	fffffdff 	.word	0xfffffdff

08002be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <TIM_OC4_SetConfig+0x7c>)
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <TIM_OC4_SetConfig+0x80>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <TIM_OC4_SetConfig+0x84>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4a10      	ldr	r2, [pc, #64]	@ (8002c6c <TIM_OC4_SetConfig+0x88>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	031b      	lsls	r3, r3, #12
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b006      	add	sp, #24
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	ffffefff 	.word	0xffffefff
 8002c64:	ffff8fff 	.word	0xffff8fff
 8002c68:	fffffcff 	.word	0xfffffcff
 8002c6c:	ffffdfff 	.word	0xffffdfff

08002c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4393      	bics	r3, r2
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	22f0      	movs	r2, #240	@ 0xf0
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	220a      	movs	r2, #10
 8002cac:	4393      	bics	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <TIM_TI2_ConfigInputStage+0x60>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	22a0      	movs	r2, #160	@ 0xa0
 8002d08:	4393      	bics	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	ffff0fff 	.word	0xffff0fff

08002d30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2270      	movs	r2, #112	@ 0x70
 8002d44:	4393      	bics	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <TIM_ETR_SetConfig+0x3c>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b006      	add	sp, #24
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	ffff00ff 	.word	0xffff00ff

08002da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	221f      	movs	r2, #31
 8002db4:	4013      	ands	r3, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	0013      	movs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	43d2      	mvns	r2, r2
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	211f      	movs	r1, #31
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4099      	lsls	r1, r3
 8002dda:	000b      	movs	r3, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b006      	add	sp, #24
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2238      	movs	r2, #56	@ 0x38
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e03d      	b.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2238      	movs	r2, #56	@ 0x38
 8002e08:	2101      	movs	r1, #1
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2239      	movs	r2, #57	@ 0x39
 8002e10:	2102      	movs	r1, #2
 8002e12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2270      	movs	r2, #112	@ 0x70
 8002e28:	4393      	bics	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d004      	beq.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10c      	bne.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	4393      	bics	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2239      	movs	r2, #57	@ 0x39
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2238      	movs	r2, #56	@ 0x38
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010800 	.word	0x40010800

08002e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e044      	b.n	8002f28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d107      	bne.n	8002eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2278      	movs	r2, #120	@ 0x78
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd fe7d 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2224      	movs	r2, #36	@ 0x24
 8002eba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	438a      	bics	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fa76 	bl	80033c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f828 	bl	8002f34 <UART_SetConfig>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01c      	b.n	8002f28 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	490d      	ldr	r1, [pc, #52]	@ (8002f30 <HAL_UART_Init+0xa4>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	212a      	movs	r1, #42	@ 0x2a
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fb05 	bl	8003530 <UART_CheckIdleState>
 8002f26:	0003      	movs	r3, r0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	ffffb7ff 	.word	0xffffb7ff

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b08e      	sub	sp, #56	@ 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3c:	231a      	movs	r3, #26
 8002f3e:	2218      	movs	r2, #24
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4ab4      	ldr	r2, [pc, #720]	@ (8003238 <UART_SetConfig+0x304>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4aaf      	ldr	r2, [pc, #700]	@ (800323c <UART_SetConfig+0x308>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4aa9      	ldr	r2, [pc, #676]	@ (8003240 <UART_SetConfig+0x30c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4aa5      	ldr	r2, [pc, #660]	@ (8003244 <UART_SetConfig+0x310>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4aa1      	ldr	r2, [pc, #644]	@ (8003248 <UART_SetConfig+0x314>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d131      	bne.n	800302c <UART_SetConfig+0xf8>
 8002fc8:	4ba0      	ldr	r3, [pc, #640]	@ (800324c <UART_SetConfig+0x318>)
 8002fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fcc:	220c      	movs	r2, #12
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d01d      	beq.n	8003010 <UART_SetConfig+0xdc>
 8002fd4:	d823      	bhi.n	800301e <UART_SetConfig+0xea>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d00c      	beq.n	8002ff4 <UART_SetConfig+0xc0>
 8002fda:	d820      	bhi.n	800301e <UART_SetConfig+0xea>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <UART_SetConfig+0xb2>
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d00e      	beq.n	8003002 <UART_SetConfig+0xce>
 8002fe4:	e01b      	b.n	800301e <UART_SetConfig+0xea>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2218      	movs	r2, #24
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e065      	b.n	80030c0 <UART_SetConfig+0x18c>
 8002ff4:	231b      	movs	r3, #27
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	19db      	adds	r3, r3, r7
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e05e      	b.n	80030c0 <UART_SetConfig+0x18c>
 8003002:	231b      	movs	r3, #27
 8003004:	2218      	movs	r2, #24
 8003006:	189b      	adds	r3, r3, r2
 8003008:	19db      	adds	r3, r3, r7
 800300a:	2204      	movs	r2, #4
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e057      	b.n	80030c0 <UART_SetConfig+0x18c>
 8003010:	231b      	movs	r3, #27
 8003012:	2218      	movs	r2, #24
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2208      	movs	r2, #8
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e050      	b.n	80030c0 <UART_SetConfig+0x18c>
 800301e:	231b      	movs	r3, #27
 8003020:	2218      	movs	r2, #24
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2210      	movs	r2, #16
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e049      	b.n	80030c0 <UART_SetConfig+0x18c>
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a83      	ldr	r2, [pc, #524]	@ (8003240 <UART_SetConfig+0x30c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d13e      	bne.n	80030b4 <UART_SetConfig+0x180>
 8003036:	4b85      	ldr	r3, [pc, #532]	@ (800324c <UART_SetConfig+0x318>)
 8003038:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800303a:	23c0      	movs	r3, #192	@ 0xc0
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4013      	ands	r3, r2
 8003040:	22c0      	movs	r2, #192	@ 0xc0
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <UART_SetConfig+0x164>
 8003048:	22c0      	movs	r2, #192	@ 0xc0
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	4293      	cmp	r3, r2
 800304e:	d82a      	bhi.n	80030a6 <UART_SetConfig+0x172>
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	4293      	cmp	r3, r2
 8003056:	d011      	beq.n	800307c <UART_SetConfig+0x148>
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	4293      	cmp	r3, r2
 800305e:	d822      	bhi.n	80030a6 <UART_SetConfig+0x172>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <UART_SetConfig+0x13a>
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	00d2      	lsls	r2, r2, #3
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <UART_SetConfig+0x156>
 800306c:	e01b      	b.n	80030a6 <UART_SetConfig+0x172>
 800306e:	231b      	movs	r3, #27
 8003070:	2218      	movs	r2, #24
 8003072:	189b      	adds	r3, r3, r2
 8003074:	19db      	adds	r3, r3, r7
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e021      	b.n	80030c0 <UART_SetConfig+0x18c>
 800307c:	231b      	movs	r3, #27
 800307e:	2218      	movs	r2, #24
 8003080:	189b      	adds	r3, r3, r2
 8003082:	19db      	adds	r3, r3, r7
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e01a      	b.n	80030c0 <UART_SetConfig+0x18c>
 800308a:	231b      	movs	r3, #27
 800308c:	2218      	movs	r2, #24
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	2204      	movs	r2, #4
 8003094:	701a      	strb	r2, [r3, #0]
 8003096:	e013      	b.n	80030c0 <UART_SetConfig+0x18c>
 8003098:	231b      	movs	r3, #27
 800309a:	2218      	movs	r2, #24
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2208      	movs	r2, #8
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e00c      	b.n	80030c0 <UART_SetConfig+0x18c>
 80030a6:	231b      	movs	r3, #27
 80030a8:	2218      	movs	r2, #24
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	2210      	movs	r2, #16
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e005      	b.n	80030c0 <UART_SetConfig+0x18c>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2218      	movs	r2, #24
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	19db      	adds	r3, r3, r7
 80030bc:	2210      	movs	r2, #16
 80030be:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003240 <UART_SetConfig+0x30c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d000      	beq.n	80030cc <UART_SetConfig+0x198>
 80030ca:	e084      	b.n	80031d6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030cc:	231b      	movs	r3, #27
 80030ce:	2218      	movs	r2, #24
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d01d      	beq.n	8003116 <UART_SetConfig+0x1e2>
 80030da:	dc20      	bgt.n	800311e <UART_SetConfig+0x1ea>
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d015      	beq.n	800310c <UART_SetConfig+0x1d8>
 80030e0:	dc1d      	bgt.n	800311e <UART_SetConfig+0x1ea>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <UART_SetConfig+0x1b8>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d005      	beq.n	80030f6 <UART_SetConfig+0x1c2>
 80030ea:	e018      	b.n	800311e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ec:	f7fe fec2 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80030f0:	0003      	movs	r3, r0
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030f4:	e01c      	b.n	8003130 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f6:	4b55      	ldr	r3, [pc, #340]	@ (800324c <UART_SetConfig+0x318>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	4013      	ands	r3, r2
 80030fe:	d002      	beq.n	8003106 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003100:	4b53      	ldr	r3, [pc, #332]	@ (8003250 <UART_SetConfig+0x31c>)
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003104:	e014      	b.n	8003130 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003106:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <UART_SetConfig+0x320>)
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800310a:	e011      	b.n	8003130 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310c:	f7fe fe22 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8003110:	0003      	movs	r3, r0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003114:	e00c      	b.n	8003130 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800311c:	e008      	b.n	8003130 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003122:	231a      	movs	r3, #26
 8003124:	2218      	movs	r2, #24
 8003126:	189b      	adds	r3, r3, r2
 8003128:	19db      	adds	r3, r3, r7
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
        break;
 800312e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d100      	bne.n	8003138 <UART_SetConfig+0x204>
 8003136:	e12f      	b.n	8003398 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	0013      	movs	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	189b      	adds	r3, r3, r2
 8003142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003144:	429a      	cmp	r2, r3
 8003146:	d305      	bcc.n	8003154 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800314e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d906      	bls.n	8003162 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003154:	231a      	movs	r3, #26
 8003156:	2218      	movs	r2, #24
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e11a      	b.n	8003398 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	6939      	ldr	r1, [r7, #16]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	000b      	movs	r3, r1
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	0010      	movs	r0, r2
 8003174:	0205      	lsls	r5, r0, #8
 8003176:	431d      	orrs	r5, r3
 8003178:	000b      	movs	r3, r1
 800317a:	021c      	lsls	r4, r3, #8
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68b8      	ldr	r0, [r7, #8]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	1900      	adds	r0, r0, r4
 800318e:	4169      	adcs	r1, r5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f7fd f83f 	bl	8000220 <__aeabi_uldivmod>
 80031a2:	0002      	movs	r2, r0
 80031a4:	000b      	movs	r3, r1
 80031a6:	0013      	movs	r3, r2
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ac:	23c0      	movs	r3, #192	@ 0xc0
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d309      	bcc.n	80031c8 <UART_SetConfig+0x294>
 80031b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	035b      	lsls	r3, r3, #13
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d204      	bcs.n	80031c8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e0e7      	b.n	8003398 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80031c8:	231a      	movs	r3, #26
 80031ca:	2218      	movs	r2, #24
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e0e0      	b.n	8003398 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	429a      	cmp	r2, r3
 80031e0:	d000      	beq.n	80031e4 <UART_SetConfig+0x2b0>
 80031e2:	e082      	b.n	80032ea <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80031e4:	231b      	movs	r3, #27
 80031e6:	2218      	movs	r2, #24
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d834      	bhi.n	800325c <UART_SetConfig+0x328>
 80031f2:	009a      	lsls	r2, r3, #2
 80031f4:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <UART_SetConfig+0x324>)
 80031f6:	18d3      	adds	r3, r2, r3
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031fc:	f7fe fe3a 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003200:	0003      	movs	r3, r0
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003204:	e033      	b.n	800326e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003206:	f7fe fe4b 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 800320a:	0003      	movs	r3, r0
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800320e:	e02e      	b.n	800326e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <UART_SetConfig+0x318>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2210      	movs	r2, #16
 8003216:	4013      	ands	r3, r2
 8003218:	d002      	beq.n	8003220 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <UART_SetConfig+0x31c>)
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800321e:	e026      	b.n	800326e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <UART_SetConfig+0x320>)
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003224:	e023      	b.n	800326e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fd95 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 800322a:	0003      	movs	r3, r0
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800322e:	e01e      	b.n	800326e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003236:	e01a      	b.n	800326e <UART_SetConfig+0x33a>
 8003238:	efff69f3 	.word	0xefff69f3
 800323c:	ffffcfff 	.word	0xffffcfff
 8003240:	40004800 	.word	0x40004800
 8003244:	fffff4ff 	.word	0xfffff4ff
 8003248:	40004400 	.word	0x40004400
 800324c:	40021000 	.word	0x40021000
 8003250:	003d0900 	.word	0x003d0900
 8003254:	00f42400 	.word	0x00f42400
 8003258:	080038bc 	.word	0x080038bc
      default:
        pclk = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003260:	231a      	movs	r3, #26
 8003262:	2218      	movs	r2, #24
 8003264:	189b      	adds	r3, r3, r2
 8003266:	19db      	adds	r3, r3, r7
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
        break;
 800326c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d100      	bne.n	8003276 <UART_SetConfig+0x342>
 8003274:	e090      	b.n	8003398 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	005a      	lsls	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	18d2      	adds	r2, r2, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0019      	movs	r1, r3
 8003288:	0010      	movs	r0, r2
 800328a:	f7fc ff3d 	bl	8000108 <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d921      	bls.n	80032dc <UART_SetConfig+0x3a8>
 8003298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	025b      	lsls	r3, r3, #9
 800329e:	429a      	cmp	r2, r3
 80032a0:	d21c      	bcs.n	80032dc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	200e      	movs	r0, #14
 80032a8:	2418      	movs	r4, #24
 80032aa:	1903      	adds	r3, r0, r4
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	210f      	movs	r1, #15
 80032b0:	438a      	bics	r2, r1
 80032b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2207      	movs	r2, #7
 80032bc:	4013      	ands	r3, r2
 80032be:	b299      	uxth	r1, r3
 80032c0:	1903      	adds	r3, r0, r4
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	1902      	adds	r2, r0, r4
 80032c6:	19d2      	adds	r2, r2, r7
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1902      	adds	r2, r0, r4
 80032d4:	19d2      	adds	r2, r2, r7
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e05d      	b.n	8003398 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	231a      	movs	r3, #26
 80032de:	2218      	movs	r2, #24
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	19db      	adds	r3, r3, r7
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e056      	b.n	8003398 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ea:	231b      	movs	r3, #27
 80032ec:	2218      	movs	r2, #24
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d822      	bhi.n	800333e <UART_SetConfig+0x40a>
 80032f8:	009a      	lsls	r2, r3, #2
 80032fa:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <UART_SetConfig+0x484>)
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003302:	f7fe fdb7 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003306:	0003      	movs	r3, r0
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800330a:	e021      	b.n	8003350 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7fe fdc8 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 8003310:	0003      	movs	r3, r0
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003314:	e01c      	b.n	8003350 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003316:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <UART_SetConfig+0x488>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2210      	movs	r2, #16
 800331c:	4013      	ands	r3, r2
 800331e:	d002      	beq.n	8003326 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003320:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <UART_SetConfig+0x48c>)
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003324:	e014      	b.n	8003350 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003326:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <UART_SetConfig+0x490>)
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332a:	e011      	b.n	8003350 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332c:	f7fe fd12 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8003330:	0003      	movs	r3, r0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003334:	e00c      	b.n	8003350 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800333c:	e008      	b.n	8003350 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003342:	231a      	movs	r3, #26
 8003344:	2218      	movs	r2, #24
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
        break;
 800334e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	085a      	lsrs	r2, r3, #1
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	18d2      	adds	r2, r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0019      	movs	r1, r3
 8003366:	0010      	movs	r0, r2
 8003368:	f7fc fece 	bl	8000108 <__udivsi3>
 800336c:	0003      	movs	r3, r0
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d90a      	bls.n	800338c <UART_SetConfig+0x458>
 8003376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003378:	2380      	movs	r3, #128	@ 0x80
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	429a      	cmp	r2, r3
 800337e:	d205      	bcs.n	800338c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	b29a      	uxth	r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	e005      	b.n	8003398 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800338c:	231a      	movs	r3, #26
 800338e:	2218      	movs	r2, #24
 8003390:	189b      	adds	r3, r3, r2
 8003392:	19db      	adds	r3, r3, r7
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2200      	movs	r2, #0
 800339c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033a4:	231a      	movs	r3, #26
 80033a6:	2218      	movs	r2, #24
 80033a8:	189b      	adds	r3, r3, r2
 80033aa:	19db      	adds	r3, r3, r7
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b00e      	add	sp, #56	@ 0x38
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	080038e0 	.word	0x080038e0
 80033bc:	40021000 	.word	0x40021000
 80033c0:	003d0900 	.word	0x003d0900
 80033c4:	00f42400 	.word	0x00f42400

080033c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2208      	movs	r2, #8
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <UART_AdvFeatureConfig+0x144>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a43      	ldr	r2, [pc, #268]	@ (8003510 <UART_AdvFeatureConfig+0x148>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2202      	movs	r2, #2
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a3b      	ldr	r2, [pc, #236]	@ (8003514 <UART_AdvFeatureConfig+0x14c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	2204      	movs	r2, #4
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a34      	ldr	r2, [pc, #208]	@ (8003518 <UART_AdvFeatureConfig+0x150>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	2210      	movs	r2, #16
 800345e:	4013      	ands	r3, r2
 8003460:	d00b      	beq.n	800347a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a2c      	ldr	r2, [pc, #176]	@ (800351c <UART_AdvFeatureConfig+0x154>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	2220      	movs	r2, #32
 8003480:	4013      	ands	r3, r2
 8003482:	d00b      	beq.n	800349c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4a25      	ldr	r2, [pc, #148]	@ (8003520 <UART_AdvFeatureConfig+0x158>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	2240      	movs	r2, #64	@ 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <UART_AdvFeatureConfig+0x15c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	035b      	lsls	r3, r3, #13
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10b      	bne.n	80034e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a15      	ldr	r2, [pc, #84]	@ (8003528 <UART_AdvFeatureConfig+0x160>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2280      	movs	r2, #128	@ 0x80
 80034e8:	4013      	ands	r3, r2
 80034ea:	d00b      	beq.n	8003504 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a0e      	ldr	r2, [pc, #56]	@ (800352c <UART_AdvFeatureConfig+0x164>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}
 800350c:	ffff7fff 	.word	0xffff7fff
 8003510:	fffdffff 	.word	0xfffdffff
 8003514:	fffeffff 	.word	0xfffeffff
 8003518:	fffbffff 	.word	0xfffbffff
 800351c:	ffffefff 	.word	0xffffefff
 8003520:	ffffdfff 	.word	0xffffdfff
 8003524:	ffefffff 	.word	0xffefffff
 8003528:	ff9fffff 	.word	0xff9fffff
 800352c:	fff7ffff 	.word	0xfff7ffff

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b092      	sub	sp, #72	@ 0x48
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2284      	movs	r2, #132	@ 0x84
 800353c:	2100      	movs	r1, #0
 800353e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fc90 	bl	8000e64 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2208      	movs	r2, #8
 8003550:	4013      	ands	r3, r2
 8003552:	2b08      	cmp	r3, #8
 8003554:	d12c      	bne.n	80035b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	0391      	lsls	r1, r2, #14
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4a46      	ldr	r2, [pc, #280]	@ (8003678 <UART_CheckIdleState+0x148>)
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	f000 f88c 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d021      	beq.n	80035b0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003576:	2301      	movs	r3, #1
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	f383 8810 	msr	PRIMASK, r3
}
 8003580:	46c0      	nop			@ (mov r8, r8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2180      	movs	r1, #128	@ 0x80
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	f383 8810 	msr	PRIMASK, r3
}
 800359c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2278      	movs	r2, #120	@ 0x78
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e05f      	b.n	8003670 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2204      	movs	r2, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d146      	bne.n	800364c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	03d1      	lsls	r1, r2, #15
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003678 <UART_CheckIdleState+0x148>)
 80035c8:	9200      	str	r2, [sp, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f000 f858 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d03b      	beq.n	800364c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d4:	f3ef 8310 	mrs	r3, PRIMASK
 80035d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035de:	2301      	movs	r3, #1
 80035e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			@ (mov r8, r8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4921      	ldr	r1, [pc, #132]	@ (800367c <UART_CheckIdleState+0x14c>)
 80035f6:	400a      	ands	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8310 	mrs	r3, PRIMASK
 800360a:	61bb      	str	r3, [r7, #24]
  return(result);
 800360c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003610:	2301      	movs	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	438a      	bics	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2278      	movs	r2, #120	@ 0x78
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e011      	b.n	8003670 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2280      	movs	r2, #128	@ 0x80
 8003656:	2120      	movs	r1, #32
 8003658:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2278      	movs	r2, #120	@ 0x78
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b010      	add	sp, #64	@ 0x40
 8003676:	bd80      	pop	{r7, pc}
 8003678:	01ffffff 	.word	0x01ffffff
 800367c:	fffffedf 	.word	0xfffffedf

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e051      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	3301      	adds	r3, #1
 8003696:	d04e      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7fd fbe4 	bl	8000e64 <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e051      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2204      	movs	r2, #4
 80036ba:	4013      	ands	r3, r2
 80036bc:	d03b      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b80      	cmp	r3, #128	@ 0x80
 80036c2:	d038      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d035      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2208      	movs	r2, #8
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d111      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f83c 	bl	8003760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2284      	movs	r2, #132	@ 0x84
 80036ec:	2108      	movs	r1, #8
 80036ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2278      	movs	r2, #120	@ 0x78
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e02c      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	401a      	ands	r2, r3
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	429a      	cmp	r2, r3
 800370e:	d112      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f81f 	bl	8003760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2284      	movs	r2, #132	@ 0x84
 8003726:	2120      	movs	r1, #32
 8003728:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2278      	movs	r2, #120	@ 0x78
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e00f      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	425a      	negs	r2, r3
 8003746:	4153      	adcs	r3, r2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	001a      	movs	r2, r3
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d09e      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8310 	mrs	r3, PRIMASK
 800376c:	617b      	str	r3, [r7, #20]
  return(result);
 800376e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4926      	ldr	r1, [pc, #152]	@ (8003824 <UART_EndRxTransfer+0xc4>)
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	623b      	str	r3, [r7, #32]
  return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d118      	bne.n	8003806 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037de:	2301      	movs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	2120      	movs	r1, #32
 800380c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b00e      	add	sp, #56	@ 0x38
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	fffffedf 	.word	0xfffffedf

08003828 <memset>:
 8003828:	0003      	movs	r3, r0
 800382a:	1882      	adds	r2, r0, r2
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	7019      	strb	r1, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	2600      	movs	r6, #0
 800383c:	4c0c      	ldr	r4, [pc, #48]	@ (8003870 <__libc_init_array+0x38>)
 800383e:	4d0d      	ldr	r5, [pc, #52]	@ (8003874 <__libc_init_array+0x3c>)
 8003840:	1b64      	subs	r4, r4, r5
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	42a6      	cmp	r6, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	2600      	movs	r6, #0
 800384a:	f000 f819 	bl	8003880 <_init>
 800384e:	4c0a      	ldr	r4, [pc, #40]	@ (8003878 <__libc_init_array+0x40>)
 8003850:	4d0a      	ldr	r5, [pc, #40]	@ (800387c <__libc_init_array+0x44>)
 8003852:	1b64      	subs	r4, r4, r5
 8003854:	10a4      	asrs	r4, r4, #2
 8003856:	42a6      	cmp	r6, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	00b3      	lsls	r3, r6, #2
 800385e:	58eb      	ldr	r3, [r5, r3]
 8003860:	4798      	blx	r3
 8003862:	3601      	adds	r6, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	00b3      	lsls	r3, r6, #2
 8003868:	58eb      	ldr	r3, [r5, r3]
 800386a:	4798      	blx	r3
 800386c:	3601      	adds	r6, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	0800390c 	.word	0x0800390c
 8003874:	0800390c 	.word	0x0800390c
 8003878:	08003910 	.word	0x08003910
 800387c:	0800390c 	.word	0x0800390c

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
