
ISA SEQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003838  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003964  08003964  00005028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800396c  0800396c  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800396c  0800396c  0000496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003974  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000028  0800399c  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800399c  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be1f  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf7  00000000  00000000  00010e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00012a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000888  00000000  00000000  00013558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010af9  00000000  00000000  00013de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0ba  00000000  00000000  000248d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067e28  00000000  00000000  00031993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000997bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000271c  00000000  00000000  00099800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0009bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038e0 	.word	0x080038e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080038e0 	.word	0x080038e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <generate_pwm_buffer>:
void init_DMA_TIM2();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_pwm_buffer(uint32_t *buffer, uint8_t duty_cycles[], uint8_t num_steps, uint8_t pin_numbers[]) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_steps; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e044      	b.n	80006c0 <generate_pwm_buffer+0xa0>

        for (int j = 0; j < 3;  j++){ //concatenate each PWM value
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	e03b      	b.n	80006b4 <generate_pwm_buffer+0x94>
			if (i < duty_cycles[j] * num_steps / 100) {
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	001a      	movs	r2, r3
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4353      	muls	r3, r2
 800064c:	2164      	movs	r1, #100	@ 0x64
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fde4 	bl	800021c <__divsi3>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4293      	cmp	r3, r2
 800065c:	da13      	bge.n	8000686 <generate_pwm_buffer+0x66>
				buffer[i] |= 1 << pin_numbers[j];
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	18cb      	adds	r3, r1, r3
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	2301      	movs	r3, #1
 8000674:	408b      	lsls	r3, r1
 8000676:	0018      	movs	r0, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	68f9      	ldr	r1, [r7, #12]
 800067e:	18cb      	adds	r3, r1, r3
 8000680:	4302      	orrs	r2, r0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e013      	b.n	80006ae <generate_pwm_buffer+0x8e>
			} else {
				buffer[i] |= 1 << (pin_numbers[j] + 16);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	18cb      	adds	r3, r1, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3310      	adds	r3, #16
 800069a:	2101      	movs	r1, #1
 800069c:	4099      	lsls	r1, r3
 800069e:	000b      	movs	r3, r1
 80006a0:	0018      	movs	r0, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	18cb      	adds	r3, r1, r3
 80006aa:	4302      	orrs	r2, r0
 80006ac:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3;  j++){ //concatenate each PWM value
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3301      	adds	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	ddc0      	ble.n	800063c <generate_pwm_buffer+0x1c>
    for (int i = 0; i < num_steps; i++) {
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	3301      	adds	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbb5      	blt.n	8000636 <generate_pwm_buffer+0x16>
			}
        }
    }
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b006      	add	sp, #24
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fb54 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f840 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f946 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e4:	f000 f926 	bl	8000934 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80006e8:	f000 f8a2 	bl	8000830 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80006ec:	f000 f8ce 	bl	800088c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  generate_pwm_buffer(buf_PWM, duty_cycles, PWM_RESOLUTION, pin_numbers);
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <main+0x68>)
 80006f2:	4913      	ldr	r1, [pc, #76]	@ (8000740 <main+0x6c>)
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <main+0x70>)
 80006f6:	2264      	movs	r2, #100	@ 0x64
 80006f8:	f7ff ff92 	bl	8000620 <generate_pwm_buffer>
  //init_DMA_TIM2();
  //DMA1_Channel2->CCR |= 1 << 0;
  //TIM2->CR1 |= 1 << 0;

  HAL_DMA_Start(&hdma_tim2_up, (uint32_t) buf_PWM, (uint32_t)&GPIOC->BSRR, 100);
 80006fc:	4911      	ldr	r1, [pc, #68]	@ (8000744 <main+0x70>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <main+0x74>)
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <main+0x78>)
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	f000 fd28 	bl	8001158 <HAL_DMA_Start>
  HAL_TIM_Base_Start_DMA(&htim2, (uint32_t*) buf_PWM, 100);
 8000708:	490e      	ldr	r1, [pc, #56]	@ (8000744 <main+0x70>)
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <main+0x7c>)
 800070c:	2264      	movs	r2, #100	@ 0x64
 800070e:	0018      	movs	r0, r3
 8000710:	f001 ff4c 	bl	80025ac <HAL_TIM_Base_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_Delay(500);
 8000714:	23fa      	movs	r3, #250	@ 0xfa
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fba3 	bl	8000e64 <HAL_Delay>
	 HAL_UART_Transmit(&hlpuart1, word, 20, 1000);
 800071e:	23fa      	movs	r3, #250	@ 0xfa
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	490c      	ldr	r1, [pc, #48]	@ (8000754 <main+0x80>)
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <main+0x84>)
 8000726:	2214      	movs	r2, #20
 8000728:	f002 fb94 	bl	8002e54 <HAL_UART_Transmit>
	 GPIOB->ODR ^= 1 << 1;
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <main+0x88>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <main+0x88>)
 8000732:	2102      	movs	r1, #2
 8000734:	404a      	eors	r2, r1
 8000736:	615a      	str	r2, [r3, #20]
	 HAL_Delay(500);
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	e7eb      	b.n	8000714 <main+0x40>
 800073c:	20000004 	.word	0x20000004
 8000740:	20000000 	.word	0x20000000
 8000744:	20000154 	.word	0x20000154
 8000748:	50000818 	.word	0x50000818
 800074c:	2000010c 	.word	0x2000010c
 8000750:	200000cc 	.word	0x200000cc
 8000754:	20000008 	.word	0x20000008
 8000758:	20000044 	.word	0x20000044
 800075c:	50000400 	.word	0x50000400

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b099      	sub	sp, #100	@ 0x64
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	242c      	movs	r4, #44	@ 0x2c
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2334      	movs	r3, #52	@ 0x34
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f003 f889 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	2318      	movs	r3, #24
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2314      	movs	r3, #20
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 f881 	bl	8003888 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	2318      	movs	r3, #24
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 f87a 	bl	8003888 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <SystemClock_Config+0xc8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a24      	ldr	r2, [pc, #144]	@ (800082c <SystemClock_Config+0xcc>)
 800079a:	401a      	ands	r2, r3
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <SystemClock_Config+0xc8>)
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	0109      	lsls	r1, r1, #4
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2202      	movs	r2, #2
 80007ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2210      	movs	r2, #16
 80007b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f806 	bl	80017d4 <HAL_RCC_OscConfig>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007cc:	f000 f99e 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	2118      	movs	r1, #24
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	220f      	movs	r2, #15
 80007d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fb69 	bl	8001ecc <HAL_RCC_ClockConfig>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007fe:	f000 f985 	bl	8000b0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000802:	003b      	movs	r3, r7
 8000804:	2204      	movs	r2, #4
 8000806:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fd5f 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800081a:	f000 f977 	bl	8000b0c <Error_Handler>
  }
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b019      	add	sp, #100	@ 0x64
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	40007000 	.word	0x40007000
 800082c:	ffffe7ff 	.word	0xffffe7ff

08000830 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <MX_LPUART1_UART_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 800083c:	22e1      	movs	r2, #225	@ 0xe1
 800083e:	0252      	lsls	r2, r2, #9
 8000840:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	0552      	lsls	r2, r2, #21
 8000848:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000858:	220c      	movs	r2, #12
 800085a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fa9b 	bl	8002dac <HAL_UART_Init>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f947 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000044 	.word	0x20000044
 8000888:	40004800 	.word	0x40004800

0800088c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	2308      	movs	r3, #8
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	0018      	movs	r0, r3
 8000898:	2310      	movs	r3, #16
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f002 fff3 	bl	8003888 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	003b      	movs	r3, r7
 80008a4:	0018      	movs	r0, r3
 80008a6:	2308      	movs	r3, #8
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f002 ffec 	bl	8003888 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	05d2      	lsls	r2, r2, #23
 80008b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <MX_TIM2_Init+0xa4>)
 80008c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fe27 	bl	800252c <HAL_TIM_Base_Init>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008e2:	f000 f913 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	2108      	movs	r1, #8
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	0152      	lsls	r2, r2, #5
 80008ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_TIM2_Init+0xa0>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 ffa0 	bl	800283c <HAL_TIM_ConfigClockSource>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000900:	f000 f904 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	003b      	movs	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	003b      	movs	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000910:	003a      	movs	r2, r7
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_TIM2_Init+0xa0>)
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f002 f9f8 	bl	8002d0c <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000920:	f000 f8f4 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b006      	add	sp, #24
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000cc 	.word	0x200000cc
 8000930:	00000c7f 	.word	0x00000c7f

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_DMA_Init+0x38>)
 800093c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_DMA_Init+0x38>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	631a      	str	r2, [r3, #48]	@ 0x30
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_DMA_Init+0x38>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200a      	movs	r0, #10
 8000958:	f000 fb54 	bl	8001004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800095c:	200a      	movs	r0, #10
 800095e:	f000 fb66 	bl	800102e <HAL_NVIC_EnableIRQ>

}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	@ 0x24
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	240c      	movs	r4, #12
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f002 ff81 	bl	8003888 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b5c      	ldr	r3, [pc, #368]	@ (8000af8 <MX_GPIO_Init+0x188>)
 8000988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800098a:	4b5b      	ldr	r3, [pc, #364]	@ (8000af8 <MX_GPIO_Init+0x188>)
 800098c:	2104      	movs	r1, #4
 800098e:	430a      	orrs	r2, r1
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000992:	4b59      	ldr	r3, [pc, #356]	@ (8000af8 <MX_GPIO_Init+0x188>)
 8000994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000996:	2204      	movs	r2, #4
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b56      	ldr	r3, [pc, #344]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009a2:	4b55      	ldr	r3, [pc, #340]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009aa:	4b53      	ldr	r3, [pc, #332]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b50      	ldr	r3, [pc, #320]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ba:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009bc:	2102      	movs	r1, #2
 80009be:	430a      	orrs	r2, r1
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c2:	4b4d      	ldr	r3, [pc, #308]	@ (8000af8 <MX_GPIO_Init+0x188>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	2202      	movs	r2, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_EXP1_Pin|PWM_EXP2_Pin, GPIO_PIN_RESET);
 80009ce:	494b      	ldr	r1, [pc, #300]	@ (8000afc <MX_GPIO_Init+0x18c>)
 80009d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b00 <MX_GPIO_Init+0x190>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 feb9 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXP_START_GPIO_Port, EXP_START_Pin, GPIO_PIN_RESET);
 80009da:	23a0      	movs	r3, #160	@ 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 feb2 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_SEQ_Pin|PWM_PARACH_Pin, GPIO_PIN_RESET);
 80009e8:	4946      	ldr	r1, [pc, #280]	@ (8000b04 <MX_GPIO_Init+0x194>)
 80009ea:	4b47      	ldr	r3, [pc, #284]	@ (8000b08 <MX_GPIO_Init+0x198>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 feac 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM_EXP1_Pin PWM_EXP2_Pin */
  GPIO_InitStruct.Pin = PWM_EXP1_Pin|PWM_EXP2_Pin;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	4a41      	ldr	r2, [pc, #260]	@ (8000afc <MX_GPIO_Init+0x18c>)
 80009f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2201      	movs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2203      	movs	r2, #3
 8000a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b00 <MX_GPIO_Init+0x190>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 fd2c 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_START_Pin */
  GPIO_InitStruct.Pin = EXP_START_Pin;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EXP_START_GPIO_Port, &GPIO_InitStruct);
 8000a30:	193a      	adds	r2, r7, r4
 8000a32:	23a0      	movs	r3, #160	@ 0xa0
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fd19 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_SEQ_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_SEQ_Pin;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2203      	movs	r2, #3
 8000a42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	4a2b      	ldr	r2, [pc, #172]	@ (8000b08 <MX_GPIO_Init+0x198>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f000 fd07 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAUNCH_SIG_Pin RLD_PARA_Pin */
  GPIO_InitStruct.Pin = LAUNCH_SIG_Pin|RLD_PARA_Pin;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	220c      	movs	r2, #12
 8000a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2284      	movs	r2, #132	@ 0x84
 8000a6c:	0392      	lsls	r2, r2, #14
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <MX_GPIO_Init+0x198>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 fcf7 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLD_EXP_Pin */
  GPIO_InitStruct.Pin = RLD_EXP_Pin;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2284      	movs	r2, #132	@ 0x84
 8000a8e:	0392      	lsls	r2, r2, #14
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RLD_EXP_GPIO_Port, &GPIO_InitStruct);
 8000a98:	193a      	adds	r2, r7, r4
 8000a9a:	23a0      	movs	r3, #160	@ 0xa0
 8000a9c:	05db      	lsls	r3, r3, #23
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fce5 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_PARACH_Pin */
  GPIO_InitStruct.Pin = PWM_PARACH_Pin;
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_PARACH_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <MX_GPIO_Init+0x198>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	0010      	movs	r0, r2
 8000aca:	f000 fcd1 	bl	8001470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f000 fa96 	bl	8001004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000ad8:	2006      	movs	r0, #6
 8000ada:	f000 faa8 	bl	800102e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fa8e 	bl	8001004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ae8:	2007      	movs	r0, #7
 8000aea:	f000 faa0 	bl	800102e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b009      	add	sp, #36	@ 0x24
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000
 8000afc:	00002001 	.word	0x00002001
 8000b00:	50000800 	.word	0x50000800
 8000b04:	00000203 	.word	0x00000203
 8000b08:	50000400 	.word	0x50000400

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <HAL_MspInit+0x24>)
 8000b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x24>)
 8000b22:	2101      	movs	r1, #1
 8000b24:	430a      	orrs	r2, r1
 8000b26:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <HAL_MspInit+0x24>)
 8000b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_MspInit+0x24>)
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	0549      	lsls	r1, r1, #21
 8000b32:	430a      	orrs	r2, r1
 8000b34:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	@ 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	240c      	movs	r4, #12
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fe98 	bl	8003888 <memset>
  if(huart->Instance==LPUART1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a18      	ldr	r2, [pc, #96]	@ (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d129      	bne.n	8000bb6 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	02c9      	lsls	r1, r1, #11
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b76:	2102      	movs	r1, #2
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b80:	2202      	movs	r2, #2
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	22c0      	movs	r2, #192	@ 0xc0
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	0021      	movs	r1, r4
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2206      	movs	r2, #6
 8000ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000bae:	0019      	movs	r1, r3
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	f000 fc5d 	bl	8001470 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b009      	add	sp, #36	@ 0x24
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400

08000bcc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d138      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_TIM_Base_MspInit+0x90>)
 8000be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_TIM_Base_MspInit+0x90>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	430a      	orrs	r2, r1
 8000bea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000bee:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <HAL_TIM_Base_MspInit+0x98>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_8;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf8:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c0c:	2280      	movs	r2, #128	@ 0x80
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fa1d 	bl	8001068 <HAL_DMA_Init>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8000c32:	f7ff ff6b 	bl	8000b0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c3a:	61da      	str	r2, [r3, #28]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_TIM_Base_MspInit+0x94>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f9dc 	bl	8001004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c4c:	200f      	movs	r0, #15
 8000c4e:	f000 f9ee 	bl	800102e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	2000010c 	.word	0x2000010c
 8000c64:	4002001c 	.word	0x4002001c

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8cc 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAUNCH_SIG_Pin);
 8000c9e:	2004      	movs	r0, #4
 8000ca0:	f000 fd72 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RLD_PARA_Pin);
 8000ca4:	2008      	movs	r0, #8
 8000ca6:	f000 fd6f 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RLD_EXP_Pin);
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fd65 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 faf3 	bl	80012b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	2000010c 	.word	0x2000010c

08000cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <TIM2_IRQHandler+0x14>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 fcde 	bl	80026a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	200000cc 	.word	0x200000cc

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d00:	4813      	ldr	r0, [pc, #76]	@ (8000d50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d02:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d04:	f7ff fff6 	bl	8000cf4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d08:	4812      	ldr	r0, [pc, #72]	@ (8000d54 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <LoopForever+0xa>)
    CMP R1, R2
 8000d10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d12:	d105      	bne.n	8000d20 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d16:	4912      	ldr	r1, [pc, #72]	@ (8000d60 <LoopForever+0x12>)
    STR R1, [R0]
 8000d18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d1a:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d1c:	4912      	ldr	r1, [pc, #72]	@ (8000d68 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d1e:	6001      	str	r1, [r0, #0]

08000d20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	4812      	ldr	r0, [pc, #72]	@ (8000d6c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d22:	4913      	ldr	r1, [pc, #76]	@ (8000d70 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <LoopForever+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d38:	4c10      	ldr	r4, [pc, #64]	@ (8000d7c <LoopForever+0x2e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fda7 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fcc3 	bl	80006d4 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
   ldr   r0, =_estack
 8000d50:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000d54:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000d58:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000d5c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000d60:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000d64:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000d68:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d74:	08003974 	.word	0x08003974
  ldr r2, =_sbss
 8000d78:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d7c:	200002e8 	.word	0x200002e8

08000d80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_IRQHandler>
	...

08000d84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <HAL_Init+0x3c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Init+0x3c>)
 8000d96:	2140      	movs	r1, #64	@ 0x40
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f811 	bl	8000dc4 <HAL_InitTick>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d003      	beq.n	8000dae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e001      	b.n	8000db2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dae:	f7ff feb3 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000dce:	681c      	ldr	r4, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	23fa      	movs	r3, #250	@ 0xfa
 8000dd8:	0098      	lsls	r0, r3, #2
 8000dda:	f7ff f995 	bl	8000108 <__udivsi3>
 8000dde:	0003      	movs	r3, r0
 8000de0:	0019      	movs	r1, r3
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff f990 	bl	8000108 <__udivsi3>
 8000de8:	0003      	movs	r3, r0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f92f 	bl	800104e <HAL_SYSTICK_Config>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e00f      	b.n	8000e18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d80b      	bhi.n	8000e16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f8fc 	bl	8001004 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_InitTick+0x64>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	2000001c 	.word	0x2000001c
 8000e24:	20000024 	.word	0x20000024
 8000e28:	20000020 	.word	0x20000020

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	001a      	movs	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	18d2      	adds	r2, r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	20000024 	.word	0x20000024
 8000e4c:	200002e4 	.word	0x200002e4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	@ (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	200002e4 	.word	0x200002e4

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff fff0 	bl	8000e50 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	001a      	movs	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	189b      	adds	r3, r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	f7ff ffe0 	bl	8000e50 <HAL_GetTick>
 8000e90:	0002      	movs	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	20000024 	.word	0x20000024

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ebe:	d809      	bhi.n	8000ed4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	401a      	ands	r2, r3
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <__NVIC_EnableIRQ+0x30>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
  }
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef4:	d828      	bhi.n	8000f48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	33c0      	adds	r3, #192	@ 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	589b      	ldr	r3, [r3, r2]
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	400a      	ands	r2, r1
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	21ff      	movs	r1, #255	@ 0xff
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	22ff      	movs	r2, #255	@ 0xff
 8000f24:	401a      	ands	r2, r3
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4003      	ands	r3, r0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	33c0      	adds	r3, #192	@ 0xc0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f46:	e031      	b.n	8000fac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0019      	movs	r1, r3
 8000f50:	230f      	movs	r3, #15
 8000f52:	400b      	ands	r3, r1
 8000f54:	3b08      	subs	r3, #8
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3306      	adds	r3, #6
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	@ 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	@ 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	001c      	movs	r4, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	4023      	ands	r3, r4
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	18c3      	adds	r3, r0, r3
 8000fa8:	3304      	adds	r3, #4
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	045b      	lsls	r3, r3, #17
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d301      	bcc.n	8000fd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e010      	b.n	8000ff6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <SysTick_Config+0x44>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff7c 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x44>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x44>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	210f      	movs	r1, #15
 8001010:	187b      	adds	r3, r7, r1
 8001012:	1c02      	adds	r2, r0, #0
 8001014:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	187b      	adds	r3, r7, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b004      	add	sp, #16
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	0002      	movs	r2, r0
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff33 	bl	8000eac <__NVIC_EnableIRQ>
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ffaf 	bl	8000fbc <SysTick_Config>
 800105e:	0003      	movs	r3, r0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e061      	b.n	800113e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_DMA_Init+0xe0>)
 8001080:	4694      	mov	ip, r2
 8001082:	4463      	add	r3, ip
 8001084:	2114      	movs	r1, #20
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff f83e 	bl	8000108 <__udivsi3>
 800108c:	0003      	movs	r3, r0
 800108e:	009a      	lsls	r2, r3, #2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a2d      	ldr	r2, [pc, #180]	@ (800114c <HAL_DMA_Init+0xe4>)
 8001098:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2225      	movs	r2, #37	@ 0x25
 800109e:	2102      	movs	r1, #2
 80010a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a28      	ldr	r2, [pc, #160]	@ (8001150 <HAL_DMA_Init+0xe8>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d018      	beq.n	8001126 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_DMA_Init+0xec>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fc:	211c      	movs	r1, #28
 80010fe:	400b      	ands	r3, r1
 8001100:	210f      	movs	r1, #15
 8001102:	4099      	lsls	r1, r3
 8001104:	000b      	movs	r3, r1
 8001106:	43d9      	mvns	r1, r3
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_DMA_Init+0xec>)
 800110a:	400a      	ands	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_DMA_Init+0xec>)
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	201c      	movs	r0, #28
 800111c:	4003      	ands	r3, r0
 800111e:	409a      	lsls	r2, r3
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_DMA_Init+0xec>)
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2225      	movs	r2, #37	@ 0x25
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	@ 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	bffdfff8 	.word	0xbffdfff8
 800114c:	40020000 	.word	0x40020000
 8001150:	ffff800f 	.word	0xffff800f
 8001154:	400200a8 	.word	0x400200a8

08001158 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2317      	movs	r3, #23
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2224      	movs	r2, #36	@ 0x24
 8001172:	5c9b      	ldrb	r3, [r3, r2]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_DMA_Start+0x24>
 8001178:	2302      	movs	r3, #2
 800117a:	e032      	b.n	80011e2 <HAL_DMA_Start+0x8a>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2224      	movs	r2, #36	@ 0x24
 8001180:	2101      	movs	r1, #1
 8001182:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2225      	movs	r2, #37	@ 0x25
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d11d      	bne.n	80011cc <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2225      	movs	r2, #37	@ 0x25
 8001194:	2102      	movs	r1, #2
 8001196:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f92c 	bl	8001412 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2224      	movs	r2, #36	@ 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]
    status = HAL_BUSY;
 80011d4:	2317      	movs	r3, #23
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2202      	movs	r2, #2
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80011dc:	2317      	movs	r3, #23
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	781b      	ldrb	r3, [r3, #0]
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b006      	add	sp, #24
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	2317      	movs	r3, #23
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2224      	movs	r2, #36	@ 0x24
 8001204:	5c9b      	ldrb	r3, [r3, r2]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_DMA_Start_IT+0x24>
 800120a:	2302      	movs	r3, #2
 800120c:	e04f      	b.n	80012ae <HAL_DMA_Start_IT+0xc4>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2224      	movs	r2, #36	@ 0x24
 8001212:	2101      	movs	r1, #1
 8001214:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2225      	movs	r2, #37	@ 0x25
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d13a      	bne.n	8001298 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2225      	movs	r2, #37	@ 0x25
 8001226:	2102      	movs	r1, #2
 8001228:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2101      	movs	r1, #1
 800123c:	438a      	bics	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f8e3 	bl	8001412 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	210e      	movs	r1, #14
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e00f      	b.n	8001286 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2104      	movs	r1, #4
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	210a      	movs	r1, #10
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e007      	b.n	80012a8 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2224      	movs	r2, #36	@ 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012a0:	2317      	movs	r3, #23
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2202      	movs	r2, #2
 80012a6:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80012a8:	2317      	movs	r3, #23
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b006      	add	sp, #24
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	221c      	movs	r2, #28
 80012d4:	4013      	ands	r3, r2
 80012d6:	2204      	movs	r2, #4
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	d026      	beq.n	8001330 <HAL_DMA_IRQHandler+0x7a>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
 80012e8:	d022      	beq.n	8001330 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4013      	ands	r3, r2
 80012f4:	d107      	bne.n	8001306 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2104      	movs	r1, #4
 8001302:	438a      	bics	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	221c      	movs	r2, #28
 800130c:	401a      	ands	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	2104      	movs	r1, #4
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <HAL_DMA_IRQHandler+0x6e>
 8001322:	e071      	b.n	8001408 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	0010      	movs	r0, r2
 800132c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800132e:	e06b      	b.n	8001408 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	221c      	movs	r2, #28
 8001336:	4013      	ands	r3, r2
 8001338:	2202      	movs	r2, #2
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	d02d      	beq.n	80013a0 <HAL_DMA_IRQHandler+0xea>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2202      	movs	r2, #2
 8001348:	4013      	ands	r3, r2
 800134a:	d029      	beq.n	80013a0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2220      	movs	r2, #32
 8001354:	4013      	ands	r3, r2
 8001356:	d10b      	bne.n	8001370 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	210a      	movs	r1, #10
 8001364:	438a      	bics	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2225      	movs	r2, #37	@ 0x25
 800136c:	2101      	movs	r1, #1
 800136e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	221c      	movs	r2, #28
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	2102      	movs	r1, #2
 800137e:	4091      	lsls	r1, r2
 8001380:	000a      	movs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d039      	beq.n	8001408 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	0010      	movs	r0, r2
 800139c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800139e:	e033      	b.n	8001408 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	221c      	movs	r2, #28
 80013a6:	4013      	ands	r3, r2
 80013a8:	2208      	movs	r2, #8
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	d02a      	beq.n	800140a <HAL_DMA_IRQHandler+0x154>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2208      	movs	r2, #8
 80013b8:	4013      	ands	r3, r2
 80013ba:	d026      	beq.n	800140a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	210e      	movs	r1, #14
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	221c      	movs	r2, #28
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2101      	movs	r1, #1
 80013da:	4091      	lsls	r1, r2
 80013dc:	000a      	movs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2225      	movs	r2, #37	@ 0x25
 80013ea:	2101      	movs	r1, #1
 80013ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2224      	movs	r2, #36	@ 0x24
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	0010      	movs	r0, r2
 8001406:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46c0      	nop			@ (mov r8, r8)
}
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}

08001412 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	221c      	movs	r2, #28
 8001426:	401a      	ands	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	4091      	lsls	r1, r2
 8001430:	000a      	movs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b10      	cmp	r3, #16
 8001442:	d108      	bne.n	8001456 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001454:	e007      	b.n	8001466 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	60da      	str	r2, [r3, #12]
}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001486:	e149      	b.n	800171c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <HAL_GPIO_Init+0x30>
 800149e:	e13a      	b.n	8001716 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	4013      	ands	r3, r2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	58d3      	ldr	r3, [r2, r3]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2107      	movs	r1, #7
 800158e:	400b      	ands	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2203      	movs	r2, #3
 80015c8:	401a      	ands	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	23c0      	movs	r3, #192	@ 0xc0
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_GPIO_Init+0x17c>
 80015ea:	e094      	b.n	8001716 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_GPIO_Init+0x2c4>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015f0:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_GPIO_Init+0x2c4>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x2c8>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	589b      	ldr	r3, [r3, r2]
 8001604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	43da      	mvns	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	23a0      	movs	r3, #160	@ 0xa0
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	429a      	cmp	r2, r3
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0x1de>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a44      	ldr	r2, [pc, #272]	@ (800173c <HAL_GPIO_Init+0x2cc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00d      	beq.n	800164a <HAL_GPIO_Init+0x1da>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a43      	ldr	r2, [pc, #268]	@ (8001740 <HAL_GPIO_Init+0x2d0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x1d6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <HAL_GPIO_Init+0x2d4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d101      	bne.n	8001642 <HAL_GPIO_Init+0x1d2>
 800163e:	2305      	movs	r3, #5
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x1e0>
 8001642:	2306      	movs	r3, #6
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x1e0>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x1e0>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x1e0>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2103      	movs	r1, #3
 8001654:	400a      	ands	r2, r1
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	@ (8001738 <HAL_GPIO_Init+0x2c8>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001692:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001698:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	4013      	ands	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_GPIO_Init+0x2d8>)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	40da      	lsrs	r2, r3
 8001724:	1e13      	subs	r3, r2, #0
 8001726:	d000      	beq.n	800172a <HAL_GPIO_Init+0x2ba>
 8001728:	e6ae      	b.n	8001488 <HAL_GPIO_Init+0x18>
  }
}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	50000400 	.word	0x50000400
 8001740:	50000800 	.word	0x50000800
 8001744:	50001c00 	.word	0x50001c00
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	0008      	movs	r0, r1
 8001756:	0011      	movs	r1, r2
 8001758:	1cbb      	adds	r3, r7, #2
 800175a:	1c02      	adds	r2, r0, #0
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	1c7b      	adds	r3, r7, #1
 8001760:	1c0a      	adds	r2, r1, #0
 8001762:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	1c7b      	adds	r3, r7, #1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	1dbb      	adds	r3, r7, #6
 8001792:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	1dba      	adds	r2, r7, #6
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	4013      	ands	r3, r2
 800179e:	d008      	beq.n	80017b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017a2:	1dba      	adds	r2, r7, #6
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a8:	1dbb      	adds	r3, r7, #6
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 f807 	bl	80017c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	0002      	movs	r2, r0
 80017c8:	1dbb      	adds	r3, r7, #6
 80017ca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f000 fb6c 	bl	8001ec0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e8:	4bc8      	ldr	r3, [pc, #800]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f2:	4bc6      	ldr	r3, [pc, #792]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x36>
 8001808:	e07d      	b.n	8001906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d007      	beq.n	8001820 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x68>
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	429a      	cmp	r2, r3
 800181e:	d10d      	bne.n	800183c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	4bba      	ldr	r3, [pc, #744]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x5a>
 800182c:	e06a      	b.n	8001904 <HAL_RCC_OscConfig+0x130>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d166      	bne.n	8001904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	f000 fb42 	bl	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x84>
 8001848:	4bb0      	ldr	r3, [pc, #704]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4baf      	ldr	r3, [pc, #700]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	0249      	lsls	r1, r1, #9
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e027      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	23a0      	movs	r3, #160	@ 0xa0
 800185e:	02db      	lsls	r3, r3, #11
 8001860:	429a      	cmp	r2, r3
 8001862:	d10e      	bne.n	8001882 <HAL_RCC_OscConfig+0xae>
 8001864:	4ba9      	ldr	r3, [pc, #676]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4ba8      	ldr	r3, [pc, #672]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800186a:	2180      	movs	r1, #128	@ 0x80
 800186c:	02c9      	lsls	r1, r1, #11
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	4ba6      	ldr	r3, [pc, #664]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4ba5      	ldr	r3, [pc, #660]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	0249      	lsls	r1, r1, #9
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e012      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001882:	4ba2      	ldr	r3, [pc, #648]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4ba1      	ldr	r3, [pc, #644]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001888:	49a1      	ldr	r1, [pc, #644]	@ (8001b10 <HAL_RCC_OscConfig+0x33c>)
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4b9f      	ldr	r3, [pc, #636]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4b9b      	ldr	r3, [pc, #620]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80018a2:	499c      	ldr	r1, [pc, #624]	@ (8001b14 <HAL_RCC_OscConfig+0x340>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d014      	beq.n	80018da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff face 	bl	8000e50 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff fac9 	bl	8000e50 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	@ 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2f9      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0xe6>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fab9 	bl	8000e50 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fab4 	bl	8000e50 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2e4      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018f6:	4b85      	ldr	r3, [pc, #532]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x110>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x13e>
 8001910:	e099      	b.n	8001a46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	2220      	movs	r2, #32
 800191c:	4013      	ands	r3, r2
 800191e:	d009      	beq.n	8001934 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001920:	4b7a      	ldr	r3, [pc, #488]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b79      	ldr	r3, [pc, #484]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001926:	2120      	movs	r1, #32
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	2220      	movs	r2, #32
 8001930:	4393      	bics	r3, r2
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d005      	beq.n	8001946 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d13e      	bne.n	80019be <HAL_RCC_OscConfig+0x1ea>
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d13b      	bne.n	80019be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001946:	4b71      	ldr	r3, [pc, #452]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2204      	movs	r2, #4
 800194c:	4013      	ands	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_RCC_OscConfig+0x186>
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e2b2      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b6c      	ldr	r3, [pc, #432]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b18 <HAL_RCC_OscConfig+0x344>)
 8001960:	4013      	ands	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	021a      	lsls	r2, r3, #8
 800196a:	4b68      	ldr	r3, [pc, #416]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001970:	4b66      	ldr	r3, [pc, #408]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2209      	movs	r2, #9
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	4b64      	ldr	r3, [pc, #400]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800197c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001982:	f000 fbeb 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8001986:	0001      	movs	r1, r0
 8001988:	4b60      	ldr	r3, [pc, #384]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	220f      	movs	r2, #15
 8001990:	4013      	ands	r3, r2
 8001992:	4a62      	ldr	r2, [pc, #392]	@ (8001b1c <HAL_RCC_OscConfig+0x348>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	000a      	movs	r2, r1
 8001998:	40da      	lsrs	r2, r3
 800199a:	4b61      	ldr	r3, [pc, #388]	@ (8001b20 <HAL_RCC_OscConfig+0x34c>)
 800199c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800199e:	4b61      	ldr	r3, [pc, #388]	@ (8001b24 <HAL_RCC_OscConfig+0x350>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2513      	movs	r5, #19
 80019a4:	197c      	adds	r4, r7, r5
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fa0c 	bl	8000dc4 <HAL_InitTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019b0:	197b      	adds	r3, r7, r5
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d046      	beq.n	8001a46 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	e280      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d027      	beq.n	8001a14 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019c4:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2209      	movs	r2, #9
 80019ca:	4393      	bics	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	4b4f      	ldr	r3, [pc, #316]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80019d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fa3b 	bl	8000e50 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff fa36 	bl	8000e50 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e266      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f2:	4b46      	ldr	r3, [pc, #280]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2204      	movs	r2, #4
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f1      	beq.n	80019e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a45      	ldr	r2, [pc, #276]	@ (8001b18 <HAL_RCC_OscConfig+0x344>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	021a      	lsls	r2, r3, #8
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e018      	b.n	8001a46 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a14:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b3c      	ldr	r3, [pc, #240]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa16 	bl	8000e50 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa11 	bl	8000e50 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e241      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	4b33      	ldr	r3, [pc, #204]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2204      	movs	r2, #4
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f1      	bne.n	8001a2a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x27e>
 8001a50:	e0a1      	b.n	8001b96 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d140      	bne.n	8001ada <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a58:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x29c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e227      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a2c      	ldr	r2, [pc, #176]	@ (8001b28 <HAL_RCC_OscConfig+0x354>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1a      	ldr	r2, [r3, #32]
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	0a19      	lsrs	r1, r3, #8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	061a      	lsls	r2, r3, #24
 8001a92:	4b1e      	ldr	r3, [pc, #120]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	0b5b      	lsrs	r3, r3, #13
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	0212      	lsls	r2, r2, #8
 8001aa4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	210f      	movs	r1, #15
 8001aae:	400b      	ands	r3, r1
 8001ab0:	491a      	ldr	r1, [pc, #104]	@ (8001b1c <HAL_RCC_OscConfig+0x348>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <HAL_RCC_OscConfig+0x34c>)
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_RCC_OscConfig+0x350>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2513      	movs	r5, #19
 8001ac0:	197c      	adds	r4, r7, r5
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff f97e 	bl	8000dc4 <HAL_InitTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001acc:	197b      	adds	r3, r7, r5
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d060      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ad4:	197b      	adds	r3, r7, r5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	e1f2      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03f      	beq.n	8001b62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_OscConfig+0x338>)
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	0049      	lsls	r1, r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f9ae 	bl	8000e50 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afa:	f7ff f9a9 	bl	8000e50 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d911      	bls.n	8001b2c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1d9      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	fffeffff 	.word	0xfffeffff
 8001b14:	fffbffff 	.word	0xfffbffff
 8001b18:	ffffe0ff 	.word	0xffffe0ff
 8001b1c:	080038f8 	.word	0x080038f8
 8001b20:	2000001c 	.word	0x2000001c
 8001b24:	20000020 	.word	0x20000020
 8001b28:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b2c:	4bc9      	ldr	r3, [pc, #804]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0e0      	beq.n	8001afa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b38:	4bc6      	ldr	r3, [pc, #792]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4ac6      	ldr	r2, [pc, #792]	@ (8001e58 <HAL_RCC_OscConfig+0x684>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	0019      	movs	r1, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1a      	ldr	r2, [r3, #32]
 8001b46:	4bc3      	ldr	r3, [pc, #780]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4c:	4bc1      	ldr	r3, [pc, #772]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	0a19      	lsrs	r1, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	061a      	lsls	r2, r3, #24
 8001b5a:	4bbe      	ldr	r3, [pc, #760]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	e019      	b.n	8001b96 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b62:	4bbc      	ldr	r3, [pc, #752]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4bbb      	ldr	r3, [pc, #748]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b68:	49bc      	ldr	r1, [pc, #752]	@ (8001e5c <HAL_RCC_OscConfig+0x688>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f96f 	bl	8000e50 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b78:	f7ff f96a 	bl	8000e50 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e19a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b8a:	4bb2      	ldr	r3, [pc, #712]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d036      	beq.n	8001c0e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d019      	beq.n	8001bdc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba8:	4baa      	ldr	r3, [pc, #680]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bac:	4ba9      	ldr	r3, [pc, #676]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f94c 	bl	8000e50 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f947 	bl	8000e50 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e177      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f1      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3ea>
 8001bda:	e018      	b.n	8001c0e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001bde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001be0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	438a      	bics	r2, r1
 8001be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f932 	bl	8000e50 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f92d 	bl	8000e50 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e15d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c04:	4b93      	ldr	r3, [pc, #588]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d1f1      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2204      	movs	r2, #4
 8001c14:	4013      	ands	r3, r2
 8001c16:	d100      	bne.n	8001c1a <HAL_RCC_OscConfig+0x446>
 8001c18:	e0ae      	b.n	8001d78 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2023      	movs	r0, #35	@ 0x23
 8001c1c:	183b      	adds	r3, r7, r0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b8c      	ldr	r3, [pc, #560]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	055b      	lsls	r3, r3, #21
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b89      	ldr	r3, [pc, #548]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c32:	4b88      	ldr	r3, [pc, #544]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	0549      	lsls	r1, r1, #21
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b87      	ldr	r3, [pc, #540]	@ (8001e60 <HAL_RCC_OscConfig+0x68c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d11a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b84      	ldr	r3, [pc, #528]	@ (8001e60 <HAL_RCC_OscConfig+0x68c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <HAL_RCC_OscConfig+0x68c>)
 8001c54:	2180      	movs	r1, #128	@ 0x80
 8001c56:	0049      	lsls	r1, r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f8f8 	bl	8000e50 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff f8f3 	bl	8000e50 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	@ 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e123      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b79      	ldr	r3, [pc, #484]	@ (8001e60 <HAL_RCC_OscConfig+0x68c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4cc>
 8001c90:	4b70      	ldr	r3, [pc, #448]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c94:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001c96:	2180      	movs	r1, #128	@ 0x80
 8001c98:	0049      	lsls	r1, r1, #1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c9e:	e031      	b.n	8001d04 <HAL_RCC_OscConfig+0x530>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x4ee>
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cac:	4b69      	ldr	r3, [pc, #420]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cae:	496b      	ldr	r1, [pc, #428]	@ (8001e5c <HAL_RCC_OscConfig+0x688>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cb4:	4b67      	ldr	r3, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb8:	4b66      	ldr	r3, [pc, #408]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cba:	496a      	ldr	r1, [pc, #424]	@ (8001e64 <HAL_RCC_OscConfig+0x690>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cc0:	e020      	b.n	8001d04 <HAL_RCC_OscConfig+0x530>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	23a0      	movs	r3, #160	@ 0xa0
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d10e      	bne.n	8001cec <HAL_RCC_OscConfig+0x518>
 8001cce:	4b61      	ldr	r3, [pc, #388]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd2:	4b60      	ldr	r3, [pc, #384]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	00c9      	lsls	r1, r1, #3
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001ce2:	2180      	movs	r1, #128	@ 0x80
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0x530>
 8001cec:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cf0:	4b58      	ldr	r3, [pc, #352]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cf2:	495a      	ldr	r1, [pc, #360]	@ (8001e5c <HAL_RCC_OscConfig+0x688>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cf8:	4b56      	ldr	r3, [pc, #344]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cfc:	4b55      	ldr	r3, [pc, #340]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001cfe:	4959      	ldr	r1, [pc, #356]	@ (8001e64 <HAL_RCC_OscConfig+0x690>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f8a0 	bl	8000e50 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff f89b 	bl	8000e50 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a51      	ldr	r2, [pc, #324]	@ (8001e68 <HAL_RCC_OscConfig+0x694>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0ca      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d0ef      	beq.n	8001d16 <HAL_RCC_OscConfig+0x542>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff f88a 	bl	8000e50 <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f885 	bl	8000e50 <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a46      	ldr	r2, [pc, #280]	@ (8001e68 <HAL_RCC_OscConfig+0x694>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0b4      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d56:	4b3f      	ldr	r3, [pc, #252]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d62:	2323      	movs	r3, #35	@ 0x23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d70:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d72:	493e      	ldr	r1, [pc, #248]	@ (8001e6c <HAL_RCC_OscConfig+0x698>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5ae>
 8001d80:	e09d      	b.n	8001ebe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5b6>
 8001d88:	e076      	b.n	8001e78 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d145      	bne.n	8001e1e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001d98:	4935      	ldr	r1, [pc, #212]	@ (8001e70 <HAL_RCC_OscConfig+0x69c>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff f857 	bl	8000e50 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f852 	bl	8000e50 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e082      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	049b      	lsls	r3, r3, #18
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a2a      	ldr	r2, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x6a0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	431a      	orrs	r2, r3
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0449      	lsls	r1, r1, #17
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f82c 	bl	8000e50 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f827 	bl	8000e50 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e057      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	049b      	lsls	r3, r3, #18
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x62a>
 8001e1c:	e04f      	b.n	8001ebe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001e24:	4912      	ldr	r1, [pc, #72]	@ (8001e70 <HAL_RCC_OscConfig+0x69c>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f811 	bl	8000e50 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f80c 	bl	8000e50 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e03c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e46:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_RCC_OscConfig+0x680>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	049b      	lsls	r3, r3, #18
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x660>
 8001e52:	e034      	b.n	8001ebe <HAL_RCC_OscConfig+0x6ea>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	ffff1fff 	.word	0xffff1fff
 8001e5c:	fffffeff 	.word	0xfffffeff
 8001e60:	40007000 	.word	0x40007000
 8001e64:	fffffbff 	.word	0xfffffbff
 8001e68:	00001388 	.word	0x00001388
 8001e6c:	efffffff 	.word	0xefffffff
 8001e70:	feffffff 	.word	0xfeffffff
 8001e74:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e84:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <HAL_RCC_OscConfig+0x6f4>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	401a      	ands	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	23f0      	movs	r3, #240	@ 0xf0
 8001e9e:	039b      	lsls	r3, r3, #14
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	23c0      	movs	r3, #192	@ 0xc0
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b00a      	add	sp, #40	@ 0x28
 8001ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e128      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b96      	ldr	r3, [pc, #600]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d91e      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b93      	ldr	r3, [pc, #588]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	4b90      	ldr	r3, [pc, #576]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f00:	f7fe ffa6 	bl	8000e50 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f08:	e009      	b.n	8001f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7fe ffa1 	bl	8000e50 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	4a8a      	ldr	r2, [pc, #552]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e109      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b87      	ldr	r3, [pc, #540]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f36:	4b83      	ldr	r3, [pc, #524]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	22f0      	movs	r2, #240	@ 0xf0
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b7f      	ldr	r3, [pc, #508]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	d100      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
 8001f54:	e089      	b.n	800206a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f5e:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d120      	bne.n	8001fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0e1      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f76:	4b73      	ldr	r3, [pc, #460]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d114      	bne.n	8001fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0d5      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
 8001f96:	d109      	bne.n	8001fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0ca      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f9c:	4b69      	ldr	r3, [pc, #420]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0c2      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fac:	4b65      	ldr	r3, [pc, #404]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4b62      	ldr	r3, [pc, #392]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe ff46 	bl	8000e50 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d111      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe ff3d 	bl	8000e50 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a58      	ldr	r2, [pc, #352]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0a5      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe6:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	220c      	movs	r2, #12
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d1ef      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x106>
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f7fe ff27 	bl	8000e50 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a4d      	ldr	r2, [pc, #308]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e08f      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002012:	4b4c      	ldr	r3, [pc, #304]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	220c      	movs	r2, #12
 8002018:	4013      	ands	r3, r2
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d1ef      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x132>
 800201e:	e024      	b.n	800206a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d11b      	bne.n	8002060 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002028:	e009      	b.n	800203e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7fe ff11 	bl	8000e50 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a42      	ldr	r2, [pc, #264]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e079      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	220c      	movs	r2, #12
 8002044:	4013      	ands	r3, r2
 8002046:	2b04      	cmp	r3, #4
 8002048:	d1ef      	bne.n	800202a <HAL_RCC_ClockConfig+0x15e>
 800204a:	e00e      	b.n	800206a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204c:	f7fe ff00 	bl	8000e50 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	4a3a      	ldr	r2, [pc, #232]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e068      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002060:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	220c      	movs	r2, #12
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206a:	4b34      	ldr	r3, [pc, #208]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d21e      	bcs.n	80020b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002078:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4393      	bics	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	4b2e      	ldr	r3, [pc, #184]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800208a:	f7fe fee1 	bl	8000e50 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe fedc 	bl	8000e50 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_RCC_ClockConfig+0x274>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e044      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a8:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_ClockConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d1ee      	bne.n	8002094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2204      	movs	r2, #4
 80020bc:	4013      	ands	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a20      	ldr	r2, [pc, #128]	@ (8002148 <HAL_RCC_ClockConfig+0x27c>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	4013      	ands	r3, r2
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a1a      	ldr	r2, [pc, #104]	@ (800214c <HAL_RCC_ClockConfig+0x280>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	00da      	lsls	r2, r3, #3
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f4:	f000 f832 	bl	800215c <HAL_RCC_GetSysClockFreq>
 80020f8:	0001      	movs	r1, r0
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	220f      	movs	r2, #15
 8002102:	4013      	ands	r3, r2
 8002104:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <HAL_RCC_ClockConfig+0x284>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	000a      	movs	r2, r1
 800210a:	40da      	lsrs	r2, r3
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_RCC_ClockConfig+0x288>)
 800210e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_ClockConfig+0x28c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	250b      	movs	r5, #11
 8002116:	197c      	adds	r4, r7, r5
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe fe53 	bl	8000dc4 <HAL_InitTick>
 800211e:	0003      	movs	r3, r0
 8002120:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002122:	197b      	adds	r3, r7, r5
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800212a:	197b      	adds	r3, r7, r5
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	e000      	b.n	8002132 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b004      	add	sp, #16
 8002138:	bdb0      	pop	{r4, r5, r7, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	40022000 	.word	0x40022000
 8002140:	00001388 	.word	0x00001388
 8002144:	40021000 	.word	0x40021000
 8002148:	fffff8ff 	.word	0xfffff8ff
 800214c:	ffffc7ff 	.word	0xffffc7ff
 8002150:	080038f8 	.word	0x080038f8
 8002154:	2000001c 	.word	0x2000001c
 8002158:	20000020 	.word	0x20000020

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002162:	4b3c      	ldr	r3, [pc, #240]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	220c      	movs	r2, #12
 800216c:	4013      	ands	r3, r2
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d013      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x3e>
 8002172:	d85c      	bhi.n	800222e <HAL_RCC_GetSysClockFreq+0xd2>
 8002174:	2b04      	cmp	r3, #4
 8002176:	d002      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x22>
 8002178:	2b08      	cmp	r3, #8
 800217a:	d00b      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x38>
 800217c:	e057      	b.n	800222e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800217e:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2210      	movs	r2, #16
 8002184:	4013      	ands	r3, r2
 8002186:	d002      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002188:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_RCC_GetSysClockFreq+0xfc>)
 800218a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800218c:	e05d      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800218e:	4b33      	ldr	r3, [pc, #204]	@ (800225c <HAL_RCC_GetSysClockFreq+0x100>)
 8002190:	613b      	str	r3, [r7, #16]
      break;
 8002192:	e05a      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x104>)
 8002196:	613b      	str	r3, [r7, #16]
      break;
 8002198:	e057      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0c9b      	lsrs	r3, r3, #18
 800219e:	220f      	movs	r2, #15
 80021a0:	4013      	ands	r3, r2
 80021a2:	4a30      	ldr	r2, [pc, #192]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	0d9b      	lsrs	r3, r3, #22
 80021ac:	2203      	movs	r2, #3
 80021ae:	4013      	ands	r3, r2
 80021b0:	3301      	adds	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b4:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	4013      	ands	r3, r2
 80021be:	d00f      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	000a      	movs	r2, r1
 80021c4:	0152      	lsls	r2, r2, #5
 80021c6:	1a52      	subs	r2, r2, r1
 80021c8:	0193      	lsls	r3, r2, #6
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	185b      	adds	r3, r3, r1
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fd ff97 	bl	8000108 <__udivsi3>
 80021da:	0003      	movs	r3, r0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e023      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	4013      	ands	r3, r2
 80021e8:	d00f      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	000a      	movs	r2, r1
 80021ee:	0152      	lsls	r2, r2, #5
 80021f0:	1a52      	subs	r2, r2, r1
 80021f2:	0193      	lsls	r3, r2, #6
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	185b      	adds	r3, r3, r1
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fd ff82 	bl	8000108 <__udivsi3>
 8002204:	0003      	movs	r3, r0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00e      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	000a      	movs	r2, r1
 800220e:	0152      	lsls	r2, r2, #5
 8002210:	1a52      	subs	r2, r2, r1
 8002212:	0193      	lsls	r3, r2, #6
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	185b      	adds	r3, r3, r1
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f7fd ff72 	bl	8000108 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	e00d      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0b5b      	lsrs	r3, r3, #13
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	2280      	movs	r2, #128	@ 0x80
 8002240:	0212      	lsls	r2, r2, #8
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800224a:	693b      	ldr	r3, [r7, #16]
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b006      	add	sp, #24
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	003d0900 	.word	0x003d0900
 800225c:	00f42400 	.word	0x00f42400
 8002260:	007a1200 	.word	0x007a1200
 8002264:	08003910 	.word	0x08003910

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <HAL_RCC_GetHCLKFreq+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	2000001c 	.word	0x2000001c

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff2 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002284:	0001      	movs	r1, r0
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	2207      	movs	r2, #7
 800228e:	4013      	ands	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	40d9      	lsrs	r1, r3
 8002296:	000b      	movs	r3, r1
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08003908 	.word	0x08003908

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022ac:	f7ff ffdc 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b0:	0001      	movs	r1, r0
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	0adb      	lsrs	r3, r3, #11
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	40d9      	lsrs	r1, r3
 80022c2:	000b      	movs	r3, r1
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08003908 	.word	0x08003908

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80022dc:	2017      	movs	r0, #23
 80022de:	183b      	adds	r3, r7, r0
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2220      	movs	r2, #32
 80022ea:	4013      	ands	r3, r2
 80022ec:	d100      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80022ee:	e0c7      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f0:	4b84      	ldr	r3, [pc, #528]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	055b      	lsls	r3, r3, #21
 80022f8:	4013      	ands	r3, r2
 80022fa:	d109      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4b81      	ldr	r3, [pc, #516]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002300:	4b80      	ldr	r3, [pc, #512]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	0549      	lsls	r1, r1, #21
 8002306:	430a      	orrs	r2, r1
 8002308:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800230a:	183b      	adds	r3, r7, r0
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b7d      	ldr	r3, [pc, #500]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d11a      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231c:	4b7a      	ldr	r3, [pc, #488]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b79      	ldr	r3, [pc, #484]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	0049      	lsls	r1, r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232a:	f7fe fd91 	bl	8000e50 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	e008      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002334:	f7fe fd8c 	bl	8000e50 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0d9      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b70      	ldr	r3, [pc, #448]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4013      	ands	r3, r2
 8002350:	d0f0      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002352:	4b6c      	ldr	r3, [pc, #432]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	23c0      	movs	r3, #192	@ 0xc0
 8002358:	039b      	lsls	r3, r3, #14
 800235a:	4013      	ands	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	23c0      	movs	r3, #192	@ 0xc0
 8002364:	039b      	lsls	r3, r3, #14
 8002366:	4013      	ands	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	429a      	cmp	r2, r3
 800236c:	d013      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	23c0      	movs	r3, #192	@ 0xc0
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	401a      	ands	r2, r3
 8002378:	23c0      	movs	r3, #192	@ 0xc0
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	429a      	cmp	r2, r3
 800237e:	d10a      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002380:	4b60      	ldr	r3, [pc, #384]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	401a      	ands	r2, r3
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	029b      	lsls	r3, r3, #10
 800238e:	429a      	cmp	r2, r3
 8002390:	d101      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0b1      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002396:	4b5b      	ldr	r3, [pc, #364]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800239a:	23c0      	movs	r3, #192	@ 0xc0
 800239c:	029b      	lsls	r3, r3, #10
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03b      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	23c0      	movs	r3, #192	@ 0xc0
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d033      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2220      	movs	r2, #32
 80023be:	4013      	ands	r3, r2
 80023c0:	d02e      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023c2:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c6:	4a51      	ldr	r2, [pc, #324]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0309      	lsls	r1, r1, #12
 80023d6:	430a      	orrs	r2, r1
 80023d8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023da:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023de:	4b49      	ldr	r3, [pc, #292]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e0:	494b      	ldr	r1, [pc, #300]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	d014      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fd2b 	bl	8000e50 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023fe:	e009      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7fe fd26 	bl	8000e50 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	4a42      	ldr	r2, [pc, #264]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e072      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d0ef      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2220      	movs	r2, #32
 8002426:	4013      	ands	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	23c0      	movs	r3, #192	@ 0xc0
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	401a      	ands	r2, r3
 8002434:	23c0      	movs	r3, #192	@ 0xc0
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	429a      	cmp	r2, r3
 800243a:	d10c      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800243c:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	23c0      	movs	r3, #192	@ 0xc0
 800244c:	039b      	lsls	r3, r3, #14
 800244e:	401a      	ands	r2, r3
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002458:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	23c0      	movs	r3, #192	@ 0xc0
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	401a      	ands	r2, r3
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002466:	430a      	orrs	r2, r1
 8002468:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002478:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800247a:	4928      	ldr	r1, [pc, #160]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800247c:	400a      	ands	r2, r1
 800247e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800248a:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	220c      	movs	r2, #12
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800249a:	430a      	orrs	r2, r1
 800249c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a16      	ldr	r2, [pc, #88]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	4013      	ands	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b006      	add	sp, #24
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	fffcffff 	.word	0xfffcffff
 8002510:	fff7ffff 	.word	0xfff7ffff
 8002514:	00001388 	.word	0x00001388
 8002518:	ffcfffff 	.word	0xffcfffff
 800251c:	efffffff 	.word	0xefffffff
 8002520:	fffff3ff 	.word	0xfffff3ff
 8002524:	ffffcfff 	.word	0xffffcfff
 8002528:	fff3ffff 	.word	0xfff3ffff

0800252c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e032      	b.n	80025a4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2239      	movs	r2, #57	@ 0x39
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d107      	bne.n	800255a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2238      	movs	r2, #56	@ 0x38
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7fe fb39 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2239      	movs	r2, #57	@ 0x39
 800255e:	2102      	movs	r1, #2
 8002560:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	0019      	movs	r1, r3
 800256c:	0010      	movs	r0, r2
 800256e:	f000 fae3 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223e      	movs	r2, #62	@ 0x3e
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223a      	movs	r2, #58	@ 0x3a
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223b      	movs	r2, #59	@ 0x3b
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223c      	movs	r2, #60	@ 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223d      	movs	r2, #61	@ 0x3d
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2239      	movs	r2, #57	@ 0x39
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	1dbb      	adds	r3, r7, #6
 80025b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2239      	movs	r2, #57	@ 0x39
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	e05f      	b.n	800268a <HAL_TIM_Base_Start_DMA+0xde>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2239      	movs	r2, #57	@ 0x39
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d126      	bne.n	8002624 <HAL_TIM_Base_Start_DMA+0x78>
  {
    if ((pData == NULL) || (Length == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_TIM_Base_Start_DMA+0x38>
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_Base_Start_DMA+0x3c>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e050      	b.n	800268a <HAL_TIM_Base_Start_DMA+0xde>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2239      	movs	r2, #57	@ 0x39
 80025ec:	2102      	movs	r1, #2
 80025ee:	5499      	strb	r1, [r3, r2]
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <HAL_TIM_Base_Start_DMA+0xe8>)
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a26      	ldr	r2, [pc, #152]	@ (8002698 <HAL_TIM_Base_Start_DMA+0xec>)
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a25      	ldr	r2, [pc, #148]	@ (800269c <HAL_TIM_Base_Start_DMA+0xf0>)
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	69d8      	ldr	r0, [r3, #28]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	332c      	adds	r3, #44	@ 0x2c
 8002614:	001a      	movs	r2, r3
 8002616:	1dbb      	adds	r3, r7, #6
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f7fe fde6 	bl	80011ea <HAL_DMA_Start_IT>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d004      	beq.n	800262c <HAL_TIM_Base_Start_DMA+0x80>
 8002622:	e001      	b.n	8002628 <HAL_TIM_Base_Start_DMA+0x7c>
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e030      	b.n	800268a <HAL_TIM_Base_Start_DMA+0xde>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e02e      	b.n	800268a <HAL_TIM_Base_Start_DMA+0xde>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	0049      	lsls	r1, r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	@ 0x80
 8002644:	05db      	lsls	r3, r3, #23
 8002646:	429a      	cmp	r2, r3
 8002648:	d004      	beq.n	8002654 <HAL_TIM_Base_Start_DMA+0xa8>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a14      	ldr	r2, [pc, #80]	@ (80026a0 <HAL_TIM_Base_Start_DMA+0xf4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d111      	bne.n	8002678 <HAL_TIM_Base_Start_DMA+0xcc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2207      	movs	r2, #7
 800265c:	4013      	ands	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b06      	cmp	r3, #6
 8002664:	d010      	beq.n	8002688 <HAL_TIM_Base_Start_DMA+0xdc>
    {
      __HAL_TIM_ENABLE(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	e007      	b.n	8002688 <HAL_TIM_Base_Start_DMA+0xdc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	08002ae9 	.word	0x08002ae9
 8002698:	08002b19 	.word	0x08002b19
 800269c:	08002a55 	.word	0x08002a55
 80026a0:	40010800 	.word	0x40010800

080026a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d021      	beq.n	8002708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4013      	ands	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4252      	negs	r2, r2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2203      	movs	r2, #3
 80026e4:	4013      	ands	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f992 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e007      	b.n	8002702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f985 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f991 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2204      	movs	r2, #4
 800270c:	4013      	ands	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2204      	movs	r2, #4
 8002714:	4013      	ands	r3, r2
 8002716:	d01e      	beq.n	8002756 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2205      	movs	r2, #5
 800271e:	4252      	negs	r2, r2
 8002720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	23c0      	movs	r3, #192	@ 0xc0
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	0018      	movs	r0, r3
 800273a:	f000 f96b 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 800273e:	e007      	b.n	8002750 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f95e 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0018      	movs	r0, r3
 800274c:	f000 f96a 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2208      	movs	r2, #8
 800275a:	4013      	ands	r3, r2
 800275c:	d021      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2208      	movs	r2, #8
 8002762:	4013      	ands	r3, r2
 8002764:	d01d      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2209      	movs	r2, #9
 800276c:	4252      	negs	r2, r2
 800276e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2203      	movs	r2, #3
 800277e:	4013      	ands	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 f945 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 800278a:	e007      	b.n	800279c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f938 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f000 f944 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2210      	movs	r2, #16
 80027a6:	4013      	ands	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2210      	movs	r2, #16
 80027ae:	4013      	ands	r3, r2
 80027b0:	d01e      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2211      	movs	r2, #17
 80027b8:	4252      	negs	r2, r2
 80027ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2208      	movs	r2, #8
 80027c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	23c0      	movs	r3, #192	@ 0xc0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f91e 	bl	8002a14 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e007      	b.n	80027ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f911 	bl	8002a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f91d 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d00c      	beq.n	8002812 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2202      	movs	r2, #2
 8002806:	4252      	negs	r2, r2
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f8e9 	bl	80029e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2240      	movs	r2, #64	@ 0x40
 8002816:	4013      	ands	r3, r2
 8002818:	d00c      	beq.n	8002834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2240      	movs	r2, #64	@ 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	d008      	beq.n	8002834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2241      	movs	r2, #65	@ 0x41
 8002828:	4252      	negs	r2, r2
 800282a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f900 	bl	8002a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002834:	46c0      	nop			@ (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	230f      	movs	r3, #15
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2238      	movs	r2, #56	@ 0x38
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIM_ConfigClockSource+0x20>
 8002858:	2302      	movs	r3, #2
 800285a:	e0bc      	b.n	80029d6 <HAL_TIM_ConfigClockSource+0x19a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2238      	movs	r2, #56	@ 0x38
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2239      	movs	r2, #57	@ 0x39
 8002868:	2102      	movs	r1, #2
 800286a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2277      	movs	r2, #119	@ 0x77
 8002878:	4393      	bics	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4a58      	ldr	r2, [pc, #352]	@ (80029e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	0192      	lsls	r2, r2, #6
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_TIM_ConfigClockSource+0xde>
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	0192      	lsls	r2, r2, #6
 800289c:	4293      	cmp	r3, r2
 800289e:	d900      	bls.n	80028a2 <HAL_TIM_ConfigClockSource+0x66>
 80028a0:	e088      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	0152      	lsls	r2, r2, #5
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d100      	bne.n	80028ac <HAL_TIM_ConfigClockSource+0x70>
 80028aa:	e088      	b.n	80029be <HAL_TIM_ConfigClockSource+0x182>
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	0152      	lsls	r2, r2, #5
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d900      	bls.n	80028b6 <HAL_TIM_ConfigClockSource+0x7a>
 80028b4:	e07e      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028b6:	2b70      	cmp	r3, #112	@ 0x70
 80028b8:	d018      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0xb0>
 80028ba:	d900      	bls.n	80028be <HAL_TIM_ConfigClockSource+0x82>
 80028bc:	e07a      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028be:	2b60      	cmp	r3, #96	@ 0x60
 80028c0:	d04f      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x126>
 80028c2:	d900      	bls.n	80028c6 <HAL_TIM_ConfigClockSource+0x8a>
 80028c4:	e076      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028c6:	2b50      	cmp	r3, #80	@ 0x50
 80028c8:	d03b      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x106>
 80028ca:	d900      	bls.n	80028ce <HAL_TIM_ConfigClockSource+0x92>
 80028cc:	e072      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028ce:	2b40      	cmp	r3, #64	@ 0x40
 80028d0:	d057      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x146>
 80028d2:	d900      	bls.n	80028d6 <HAL_TIM_ConfigClockSource+0x9a>
 80028d4:	e06e      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028d6:	2b30      	cmp	r3, #48	@ 0x30
 80028d8:	d063      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x166>
 80028da:	d86b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d060      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x166>
 80028e0:	d868      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05d      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x166>
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d05b      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x166>
 80028ea:	e063      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028fc:	f000 f9e6 	bl	8002ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2277      	movs	r2, #119	@ 0x77
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
      break;
 8002918:	e052      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800292a:	f000 f9cf 	bl	8002ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	01c9      	lsls	r1, r1, #7
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
      break;
 8002940:	e03e      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294e:	001a      	movs	r2, r3
 8002950:	f000 f942 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2150      	movs	r1, #80	@ 0x50
 800295a:	0018      	movs	r0, r3
 800295c:	f000 f99c 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 8002960:	e02e      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800296e:	001a      	movs	r2, r3
 8002970:	f000 f960 	bl	8002c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2160      	movs	r1, #96	@ 0x60
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f98c 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 8002980:	e01e      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	001a      	movs	r2, r3
 8002990:	f000 f922 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	@ 0x40
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f97c 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e00e      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 f973 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 80029b2:	e005      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029b4:	230f      	movs	r3, #15
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
      break;
 80029bc:	e000      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80029be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2239      	movs	r2, #57	@ 0x39
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2238      	movs	r2, #56	@ 0x38
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]

  return status;
 80029d0:	230f      	movs	r3, #15
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	ffff00ff 	.word	0xffff00ff

080029e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a0c:	46c0      	nop			@ (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d107      	bne.n	8002a7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	223a      	movs	r2, #58	@ 0x3a
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	e02a      	b.n	8002ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d107      	bne.n	8002a96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	223b      	movs	r2, #59	@ 0x3b
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
 8002a94:	e01d      	b.n	8002ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	223c      	movs	r2, #60	@ 0x3c
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	e010      	b.n	8002ad2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d107      	bne.n	8002aca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2208      	movs	r2, #8
 8002abe:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	223d      	movs	r2, #61	@ 0x3d
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]
 8002ac8:	e003      	b.n	8002ad2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2239      	movs	r2, #57	@ 0x39
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff ffb5 	bl	8002a44 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2239      	movs	r2, #57	@ 0x39
 8002b04:	2101      	movs	r1, #1
 8002b06:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ff6a 	bl	80029e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002b10:	46c0      	nop			@ (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7ff ff63 	bl	80029f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	05db      	lsls	r3, r3, #23
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0x22>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <TIM_Base_SetConfig+0x98>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2270      	movs	r2, #112	@ 0x70
 8002b5e:	4393      	bics	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d003      	beq.n	8002b7e <TIM_Base_SetConfig+0x46>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <TIM_Base_SetConfig+0x98>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d108      	bne.n	8002b90 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <TIM_Base_SetConfig+0x9c>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	4393      	bics	r3, r2
 8002b96:	001a      	movs	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	fffffcff 	.word	0xfffffcff

08002bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	22f0      	movs	r2, #240	@ 0xf0
 8002c02:	4393      	bics	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	220a      	movs	r2, #10
 8002c14:	4393      	bics	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b006      	add	sp, #24
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	001a      	movs	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <TIM_TI2_ConfigInputStage+0x60>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	031b      	lsls	r3, r3, #12
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	22a0      	movs	r2, #160	@ 0xa0
 8002c70:	4393      	bics	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b006      	add	sp, #24
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	ffff0fff 	.word	0xffff0fff

08002c98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2270      	movs	r2, #112	@ 0x70
 8002cac:	4393      	bics	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <TIM_ETR_SetConfig+0x3c>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	021a      	lsls	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	ffff00ff 	.word	0xffff00ff

08002d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2238      	movs	r2, #56	@ 0x38
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e03d      	b.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2238      	movs	r2, #56	@ 0x38
 8002d28:	2101      	movs	r1, #1
 8002d2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2239      	movs	r2, #57	@ 0x39
 8002d30:	2102      	movs	r1, #2
 8002d32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2270      	movs	r2, #112	@ 0x70
 8002d48:	4393      	bics	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	@ 0x80
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d004      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	4393      	bics	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2239      	movs	r2, #57	@ 0x39
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2238      	movs	r2, #56	@ 0x38
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010800 	.word	0x40010800

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e044      	b.n	8002e48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2278      	movs	r2, #120	@ 0x78
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd feb5 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2224      	movs	r2, #36	@ 0x24
 8002dda:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	438a      	bics	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fb16 	bl	8003428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f8c8 	bl	8002f94 <UART_SetConfig>
 8002e04:	0003      	movs	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01c      	b.n	8002e48 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	490d      	ldr	r1, [pc, #52]	@ (8002e50 <HAL_UART_Init+0xa4>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	212a      	movs	r1, #42	@ 0x2a
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2101      	movs	r1, #1
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 fba5 	bl	8003590 <UART_CheckIdleState>
 8002e46:	0003      	movs	r3, r0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	ffffb7ff 	.word	0xffffb7ff

08002e54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	@ 0x28
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	1dbb      	adds	r3, r7, #6
 8002e62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d000      	beq.n	8002e6e <HAL_UART_Transmit+0x1a>
 8002e6c:	e08c      	b.n	8002f88 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_UART_Transmit+0x28>
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e084      	b.n	8002f8a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	015b      	lsls	r3, r3, #5
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d109      	bne.n	8002ea0 <HAL_UART_Transmit+0x4c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e074      	b.n	8002f8a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2284      	movs	r2, #132	@ 0x84
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2221      	movs	r2, #33	@ 0x21
 8002eac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eae:	f7fd ffcf 	bl	8000e50 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1dba      	adds	r2, r7, #6
 8002eba:	2150      	movs	r1, #80	@ 0x50
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	2152      	movs	r1, #82	@ 0x52
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x94>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e02f      	b.n	8002f52 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	0013      	movs	r3, r2
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	@ 0x80
 8002f00:	f000 fbee 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e03b      	b.n	8002f8a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	05d2      	lsls	r2, r2, #23
 8002f24:	0dd2      	lsrs	r2, r2, #23
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e007      	b.n	8002f40 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2252      	movs	r2, #82	@ 0x52
 8002f44:	5a9b      	ldrh	r3, [r3, r2]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b299      	uxth	r1, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2252      	movs	r2, #82	@ 0x52
 8002f50:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2252      	movs	r2, #82	@ 0x52
 8002f56:	5a9b      	ldrh	r3, [r3, r2]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1c9      	bne.n	8002ef2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	0013      	movs	r3, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	f000 fbb8 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e005      	b.n	8002f8a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b008      	add	sp, #32
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b08e      	sub	sp, #56	@ 0x38
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f9c:	231a      	movs	r3, #26
 8002f9e:	2218      	movs	r2, #24
 8002fa0:	189b      	adds	r3, r3, r2
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4ab4      	ldr	r2, [pc, #720]	@ (8003298 <UART_SetConfig+0x304>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4aaf      	ldr	r2, [pc, #700]	@ (800329c <UART_SetConfig+0x308>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4aa9      	ldr	r2, [pc, #676]	@ (80032a0 <UART_SetConfig+0x30c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003004:	4313      	orrs	r3, r2
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4aa5      	ldr	r2, [pc, #660]	@ (80032a4 <UART_SetConfig+0x310>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4aa1      	ldr	r2, [pc, #644]	@ (80032a8 <UART_SetConfig+0x314>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d131      	bne.n	800308c <UART_SetConfig+0xf8>
 8003028:	4ba0      	ldr	r3, [pc, #640]	@ (80032ac <UART_SetConfig+0x318>)
 800302a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302c:	220c      	movs	r2, #12
 800302e:	4013      	ands	r3, r2
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d01d      	beq.n	8003070 <UART_SetConfig+0xdc>
 8003034:	d823      	bhi.n	800307e <UART_SetConfig+0xea>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d00c      	beq.n	8003054 <UART_SetConfig+0xc0>
 800303a:	d820      	bhi.n	800307e <UART_SetConfig+0xea>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <UART_SetConfig+0xb2>
 8003040:	2b04      	cmp	r3, #4
 8003042:	d00e      	beq.n	8003062 <UART_SetConfig+0xce>
 8003044:	e01b      	b.n	800307e <UART_SetConfig+0xea>
 8003046:	231b      	movs	r3, #27
 8003048:	2218      	movs	r2, #24
 800304a:	189b      	adds	r3, r3, r2
 800304c:	19db      	adds	r3, r3, r7
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e065      	b.n	8003120 <UART_SetConfig+0x18c>
 8003054:	231b      	movs	r3, #27
 8003056:	2218      	movs	r2, #24
 8003058:	189b      	adds	r3, r3, r2
 800305a:	19db      	adds	r3, r3, r7
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e05e      	b.n	8003120 <UART_SetConfig+0x18c>
 8003062:	231b      	movs	r3, #27
 8003064:	2218      	movs	r2, #24
 8003066:	189b      	adds	r3, r3, r2
 8003068:	19db      	adds	r3, r3, r7
 800306a:	2204      	movs	r2, #4
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e057      	b.n	8003120 <UART_SetConfig+0x18c>
 8003070:	231b      	movs	r3, #27
 8003072:	2218      	movs	r2, #24
 8003074:	189b      	adds	r3, r3, r2
 8003076:	19db      	adds	r3, r3, r7
 8003078:	2208      	movs	r2, #8
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e050      	b.n	8003120 <UART_SetConfig+0x18c>
 800307e:	231b      	movs	r3, #27
 8003080:	2218      	movs	r2, #24
 8003082:	189b      	adds	r3, r3, r2
 8003084:	19db      	adds	r3, r3, r7
 8003086:	2210      	movs	r2, #16
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e049      	b.n	8003120 <UART_SetConfig+0x18c>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a83      	ldr	r2, [pc, #524]	@ (80032a0 <UART_SetConfig+0x30c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d13e      	bne.n	8003114 <UART_SetConfig+0x180>
 8003096:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <UART_SetConfig+0x318>)
 8003098:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800309a:	23c0      	movs	r3, #192	@ 0xc0
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	22c0      	movs	r2, #192	@ 0xc0
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d027      	beq.n	80030f8 <UART_SetConfig+0x164>
 80030a8:	22c0      	movs	r2, #192	@ 0xc0
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d82a      	bhi.n	8003106 <UART_SetConfig+0x172>
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d011      	beq.n	80030dc <UART_SetConfig+0x148>
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	4293      	cmp	r3, r2
 80030be:	d822      	bhi.n	8003106 <UART_SetConfig+0x172>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <UART_SetConfig+0x13a>
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	00d2      	lsls	r2, r2, #3
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <UART_SetConfig+0x156>
 80030cc:	e01b      	b.n	8003106 <UART_SetConfig+0x172>
 80030ce:	231b      	movs	r3, #27
 80030d0:	2218      	movs	r2, #24
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	19db      	adds	r3, r3, r7
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e021      	b.n	8003120 <UART_SetConfig+0x18c>
 80030dc:	231b      	movs	r3, #27
 80030de:	2218      	movs	r2, #24
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	19db      	adds	r3, r3, r7
 80030e4:	2202      	movs	r2, #2
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e01a      	b.n	8003120 <UART_SetConfig+0x18c>
 80030ea:	231b      	movs	r3, #27
 80030ec:	2218      	movs	r2, #24
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	19db      	adds	r3, r3, r7
 80030f2:	2204      	movs	r2, #4
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e013      	b.n	8003120 <UART_SetConfig+0x18c>
 80030f8:	231b      	movs	r3, #27
 80030fa:	2218      	movs	r2, #24
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	19db      	adds	r3, r3, r7
 8003100:	2208      	movs	r2, #8
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e00c      	b.n	8003120 <UART_SetConfig+0x18c>
 8003106:	231b      	movs	r3, #27
 8003108:	2218      	movs	r2, #24
 800310a:	189b      	adds	r3, r3, r2
 800310c:	19db      	adds	r3, r3, r7
 800310e:	2210      	movs	r2, #16
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e005      	b.n	8003120 <UART_SetConfig+0x18c>
 8003114:	231b      	movs	r3, #27
 8003116:	2218      	movs	r2, #24
 8003118:	189b      	adds	r3, r3, r2
 800311a:	19db      	adds	r3, r3, r7
 800311c:	2210      	movs	r2, #16
 800311e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5e      	ldr	r2, [pc, #376]	@ (80032a0 <UART_SetConfig+0x30c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d000      	beq.n	800312c <UART_SetConfig+0x198>
 800312a:	e084      	b.n	8003236 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800312c:	231b      	movs	r3, #27
 800312e:	2218      	movs	r2, #24
 8003130:	189b      	adds	r3, r3, r2
 8003132:	19db      	adds	r3, r3, r7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b08      	cmp	r3, #8
 8003138:	d01d      	beq.n	8003176 <UART_SetConfig+0x1e2>
 800313a:	dc20      	bgt.n	800317e <UART_SetConfig+0x1ea>
 800313c:	2b04      	cmp	r3, #4
 800313e:	d015      	beq.n	800316c <UART_SetConfig+0x1d8>
 8003140:	dc1d      	bgt.n	800317e <UART_SetConfig+0x1ea>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x1b8>
 8003146:	2b02      	cmp	r3, #2
 8003148:	d005      	beq.n	8003156 <UART_SetConfig+0x1c2>
 800314a:	e018      	b.n	800317e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff f896 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8003150:	0003      	movs	r3, r0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003154:	e01c      	b.n	8003190 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003156:	4b55      	ldr	r3, [pc, #340]	@ (80032ac <UART_SetConfig+0x318>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	4013      	ands	r3, r2
 800315e:	d002      	beq.n	8003166 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003160:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <UART_SetConfig+0x31c>)
 8003162:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003164:	e014      	b.n	8003190 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003166:	4b53      	ldr	r3, [pc, #332]	@ (80032b4 <UART_SetConfig+0x320>)
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800316a:	e011      	b.n	8003190 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316c:	f7fe fff6 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003170:	0003      	movs	r3, r0
 8003172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003174:	e00c      	b.n	8003190 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003176:	2380      	movs	r3, #128	@ 0x80
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800317c:	e008      	b.n	8003190 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003182:	231a      	movs	r3, #26
 8003184:	2218      	movs	r2, #24
 8003186:	189b      	adds	r3, r3, r2
 8003188:	19db      	adds	r3, r3, r7
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
        break;
 800318e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <UART_SetConfig+0x204>
 8003196:	e12f      	b.n	80033f8 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	0013      	movs	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d305      	bcc.n	80031b4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d906      	bls.n	80031c2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80031b4:	231a      	movs	r3, #26
 80031b6:	2218      	movs	r2, #24
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e11a      	b.n	80033f8 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	000b      	movs	r3, r1
 80031d0:	0e1b      	lsrs	r3, r3, #24
 80031d2:	0010      	movs	r0, r2
 80031d4:	0205      	lsls	r5, r0, #8
 80031d6:	431d      	orrs	r5, r3
 80031d8:	000b      	movs	r3, r1
 80031da:	021c      	lsls	r4, r3, #8
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68b8      	ldr	r0, [r7, #8]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	1900      	adds	r0, r0, r4
 80031ee:	4169      	adcs	r1, r5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f7fd f8f9 	bl	80003f4 <__aeabi_uldivmod>
 8003202:	0002      	movs	r2, r0
 8003204:	000b      	movs	r3, r1
 8003206:	0013      	movs	r3, r2
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800320a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800320c:	23c0      	movs	r3, #192	@ 0xc0
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d309      	bcc.n	8003228 <UART_SetConfig+0x294>
 8003214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	035b      	lsls	r3, r3, #13
 800321a:	429a      	cmp	r2, r3
 800321c:	d204      	bcs.n	8003228 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	e0e7      	b.n	80033f8 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003228:	231a      	movs	r3, #26
 800322a:	2218      	movs	r2, #24
 800322c:	189b      	adds	r3, r3, r2
 800322e:	19db      	adds	r3, r3, r7
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e0e0      	b.n	80033f8 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	429a      	cmp	r2, r3
 8003240:	d000      	beq.n	8003244 <UART_SetConfig+0x2b0>
 8003242:	e082      	b.n	800334a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003244:	231b      	movs	r3, #27
 8003246:	2218      	movs	r2, #24
 8003248:	189b      	adds	r3, r3, r2
 800324a:	19db      	adds	r3, r3, r7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d834      	bhi.n	80032bc <UART_SetConfig+0x328>
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <UART_SetConfig+0x324>)
 8003256:	18d3      	adds	r3, r2, r3
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7ff f80e 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8003260:	0003      	movs	r3, r0
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003264:	e033      	b.n	80032ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003266:	f7ff f81f 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 800326a:	0003      	movs	r3, r0
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800326e:	e02e      	b.n	80032ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <UART_SetConfig+0x318>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2210      	movs	r2, #16
 8003276:	4013      	ands	r3, r2
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <UART_SetConfig+0x31c>)
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800327e:	e026      	b.n	80032ce <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003280:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <UART_SetConfig+0x320>)
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003284:	e023      	b.n	80032ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe ff69 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800328a:	0003      	movs	r3, r0
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800328e:	e01e      	b.n	80032ce <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003296:	e01a      	b.n	80032ce <UART_SetConfig+0x33a>
 8003298:	efff69f3 	.word	0xefff69f3
 800329c:	ffffcfff 	.word	0xffffcfff
 80032a0:	40004800 	.word	0x40004800
 80032a4:	fffff4ff 	.word	0xfffff4ff
 80032a8:	40004400 	.word	0x40004400
 80032ac:	40021000 	.word	0x40021000
 80032b0:	003d0900 	.word	0x003d0900
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	0800391c 	.word	0x0800391c
      default:
        pclk = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80032c0:	231a      	movs	r3, #26
 80032c2:	2218      	movs	r2, #24
 80032c4:	189b      	adds	r3, r3, r2
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
        break;
 80032cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d100      	bne.n	80032d6 <UART_SetConfig+0x342>
 80032d4:	e090      	b.n	80033f8 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	18d2      	adds	r2, r2, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f7fc ff0d 	bl	8000108 <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d921      	bls.n	800333c <UART_SetConfig+0x3a8>
 80032f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	025b      	lsls	r3, r3, #9
 80032fe:	429a      	cmp	r2, r3
 8003300:	d21c      	bcs.n	800333c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003304:	b29a      	uxth	r2, r3
 8003306:	200e      	movs	r0, #14
 8003308:	2418      	movs	r4, #24
 800330a:	1903      	adds	r3, r0, r4
 800330c:	19db      	adds	r3, r3, r7
 800330e:	210f      	movs	r1, #15
 8003310:	438a      	bics	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	b299      	uxth	r1, r3
 8003320:	1903      	adds	r3, r0, r4
 8003322:	19db      	adds	r3, r3, r7
 8003324:	1902      	adds	r2, r0, r4
 8003326:	19d2      	adds	r2, r2, r7
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1902      	adds	r2, r0, r4
 8003334:	19d2      	adds	r2, r2, r7
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e05d      	b.n	80033f8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800333c:	231a      	movs	r3, #26
 800333e:	2218      	movs	r2, #24
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e056      	b.n	80033f8 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 800334a:	231b      	movs	r3, #27
 800334c:	2218      	movs	r2, #24
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d822      	bhi.n	800339e <UART_SetConfig+0x40a>
 8003358:	009a      	lsls	r2, r3, #2
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <UART_SetConfig+0x484>)
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003362:	f7fe ff8b 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8003366:	0003      	movs	r3, r0
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800336a:	e021      	b.n	80033b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe ff9c 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 8003370:	0003      	movs	r3, r0
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003374:	e01c      	b.n	80033b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003376:	4b29      	ldr	r3, [pc, #164]	@ (800341c <UART_SetConfig+0x488>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2210      	movs	r2, #16
 800337c:	4013      	ands	r3, r2
 800337e:	d002      	beq.n	8003386 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003380:	4b27      	ldr	r3, [pc, #156]	@ (8003420 <UART_SetConfig+0x48c>)
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003384:	e014      	b.n	80033b0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <UART_SetConfig+0x490>)
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800338a:	e011      	b.n	80033b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338c:	f7fe fee6 	bl	800215c <HAL_RCC_GetSysClockFreq>
 8003390:	0003      	movs	r3, r0
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003394:	e00c      	b.n	80033b0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800339c:	e008      	b.n	80033b0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80033a2:	231a      	movs	r3, #26
 80033a4:	2218      	movs	r2, #24
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
        break;
 80033ae:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	085a      	lsrs	r2, r3, #1
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	18d2      	adds	r2, r2, r3
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0019      	movs	r1, r3
 80033c6:	0010      	movs	r0, r2
 80033c8:	f7fc fe9e 	bl	8000108 <__udivsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	d90a      	bls.n	80033ec <UART_SetConfig+0x458>
 80033d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	429a      	cmp	r2, r3
 80033de:	d205      	bcs.n	80033ec <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e005      	b.n	80033f8 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80033ec:	231a      	movs	r3, #26
 80033ee:	2218      	movs	r2, #24
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2200      	movs	r2, #0
 80033fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2200      	movs	r2, #0
 8003402:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003404:	231a      	movs	r3, #26
 8003406:	2218      	movs	r2, #24
 8003408:	189b      	adds	r3, r3, r2
 800340a:	19db      	adds	r3, r3, r7
 800340c:	781b      	ldrb	r3, [r3, #0]
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b00e      	add	sp, #56	@ 0x38
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	08003940 	.word	0x08003940
 800341c:	40021000 	.word	0x40021000
 8003420:	003d0900 	.word	0x003d0900
 8003424:	00f42400 	.word	0x00f42400

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2208      	movs	r2, #8
 8003436:	4013      	ands	r3, r2
 8003438:	d00b      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a4a      	ldr	r2, [pc, #296]	@ (800356c <UART_AdvFeatureConfig+0x144>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a43      	ldr	r2, [pc, #268]	@ (8003570 <UART_AdvFeatureConfig+0x148>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d00b      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a3b      	ldr	r2, [pc, #236]	@ (8003574 <UART_AdvFeatureConfig+0x14c>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	d00b      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <UART_AdvFeatureConfig+0x150>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	2210      	movs	r2, #16
 80034be:	4013      	ands	r3, r2
 80034c0:	d00b      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	@ (800357c <UART_AdvFeatureConfig+0x154>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2220      	movs	r2, #32
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00b      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a25      	ldr	r2, [pc, #148]	@ (8003580 <UART_AdvFeatureConfig+0x158>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	2240      	movs	r2, #64	@ 0x40
 8003502:	4013      	ands	r3, r2
 8003504:	d01d      	beq.n	8003542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <UART_AdvFeatureConfig+0x15c>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	035b      	lsls	r3, r3, #13
 8003526:	429a      	cmp	r2, r3
 8003528:	d10b      	bne.n	8003542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <UART_AdvFeatureConfig+0x160>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a0e      	ldr	r2, [pc, #56]	@ (800358c <UART_AdvFeatureConfig+0x164>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	ffff7fff 	.word	0xffff7fff
 8003570:	fffdffff 	.word	0xfffdffff
 8003574:	fffeffff 	.word	0xfffeffff
 8003578:	fffbffff 	.word	0xfffbffff
 800357c:	ffffefff 	.word	0xffffefff
 8003580:	ffffdfff 	.word	0xffffdfff
 8003584:	ffefffff 	.word	0xffefffff
 8003588:	ff9fffff 	.word	0xff9fffff
 800358c:	fff7ffff 	.word	0xfff7ffff

08003590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b092      	sub	sp, #72	@ 0x48
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2284      	movs	r2, #132	@ 0x84
 800359c:	2100      	movs	r1, #0
 800359e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a0:	f7fd fc56 	bl	8000e50 <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d12c      	bne.n	8003610 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b8:	2280      	movs	r2, #128	@ 0x80
 80035ba:	0391      	lsls	r1, r2, #14
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4a46      	ldr	r2, [pc, #280]	@ (80036d8 <UART_CheckIdleState+0x148>)
 80035c0:	9200      	str	r2, [sp, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f000 f88c 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d021      	beq.n	8003610 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d6:	2301      	movs	r3, #1
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2180      	movs	r1, #128	@ 0x80
 80035ee:	438a      	bics	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2278      	movs	r2, #120	@ 0x78
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e05f      	b.n	80036d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	2b04      	cmp	r3, #4
 800361c:	d146      	bne.n	80036ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003620:	2280      	movs	r2, #128	@ 0x80
 8003622:	03d1      	lsls	r1, r2, #15
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4a2c      	ldr	r2, [pc, #176]	@ (80036d8 <UART_CheckIdleState+0x148>)
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	f000 f858 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d03b      	beq.n	80036ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003634:	f3ef 8310 	mrs	r3, PRIMASK
 8003638:	60fb      	str	r3, [r7, #12]
  return(result);
 800363a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
 800363e:	2301      	movs	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f383 8810 	msr	PRIMASK, r3
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4921      	ldr	r1, [pc, #132]	@ (80036dc <UART_CheckIdleState+0x14c>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	61bb      	str	r3, [r7, #24]
  return(result);
 800366c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003670:	2301      	movs	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	438a      	bics	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	2120      	movs	r1, #32
 800369e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2278      	movs	r2, #120	@ 0x78
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e011      	b.n	80036d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2280      	movs	r2, #128	@ 0x80
 80036b6:	2120      	movs	r1, #32
 80036b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2278      	movs	r2, #120	@ 0x78
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b010      	add	sp, #64	@ 0x40
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	01ffffff 	.word	0x01ffffff
 80036dc:	fffffedf 	.word	0xfffffedf

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	1dfb      	adds	r3, r7, #7
 80036ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e051      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	3301      	adds	r3, #1
 80036f6:	d04e      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f8:	f7fd fbaa 	bl	8000e50 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e051      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d03b      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b80      	cmp	r3, #128	@ 0x80
 8003722:	d038      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d035      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2208      	movs	r2, #8
 8003732:	4013      	ands	r3, r2
 8003734:	2b08      	cmp	r3, #8
 8003736:	d111      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 f83c 	bl	80037c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2284      	movs	r2, #132	@ 0x84
 800374c:	2108      	movs	r1, #8
 800374e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2278      	movs	r2, #120	@ 0x78
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e02c      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	401a      	ands	r2, r3
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	429a      	cmp	r2, r3
 800376e:	d112      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2280      	movs	r2, #128	@ 0x80
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 f81f 	bl	80037c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2284      	movs	r2, #132	@ 0x84
 8003786:	2120      	movs	r1, #32
 8003788:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2278      	movs	r2, #120	@ 0x78
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00f      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	425a      	negs	r2, r3
 80037a6:	4153      	adcs	r3, r2
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	001a      	movs	r2, r3
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d09e      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	0018      	movs	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	@ 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	617b      	str	r3, [r7, #20]
  return(result);
 80037ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4926      	ldr	r1, [pc, #152]	@ (8003884 <UART_EndRxTransfer+0xc4>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003800:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
 8003804:	2301      	movs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2101      	movs	r1, #1
 800381c:	438a      	bics	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	2b01      	cmp	r3, #1
 8003832:	d118      	bne.n	8003866 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	60bb      	str	r3, [r7, #8]
  return(result);
 800383a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800383e:	2301      	movs	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2110      	movs	r1, #16
 8003856:	438a      	bics	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	2120      	movs	r1, #32
 800386c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b00e      	add	sp, #56	@ 0x38
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	fffffedf 	.word	0xfffffedf

08003888 <memset>:
 8003888:	0003      	movs	r3, r0
 800388a:	1882      	adds	r2, r0, r2
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	7019      	strb	r1, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2600      	movs	r6, #0
 800389c:	4c0c      	ldr	r4, [pc, #48]	@ (80038d0 <__libc_init_array+0x38>)
 800389e:	4d0d      	ldr	r5, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	10a4      	asrs	r4, r4, #2
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	2600      	movs	r6, #0
 80038aa:	f000 f819 	bl	80038e0 <_init>
 80038ae:	4c0a      	ldr	r4, [pc, #40]	@ (80038d8 <__libc_init_array+0x40>)
 80038b0:	4d0a      	ldr	r5, [pc, #40]	@ (80038dc <__libc_init_array+0x44>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	00b3      	lsls	r3, r6, #2
 80038be:	58eb      	ldr	r3, [r5, r3]
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	00b3      	lsls	r3, r6, #2
 80038c8:	58eb      	ldr	r3, [r5, r3]
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	0800396c 	.word	0x0800396c
 80038d4:	0800396c 	.word	0x0800396c
 80038d8:	08003970 	.word	0x08003970
 80038dc:	0800396c 	.word	0x0800396c

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
