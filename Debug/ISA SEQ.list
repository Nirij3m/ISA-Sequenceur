
ISA SEQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003414  08003414  00004414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003480  08003480  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003480  08003480  00004480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003488  08003488  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003488  08003488  00004488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800348c  0800348c  0000448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003490  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000014  080034a4  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080034a4  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bda7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfa  00000000  00000000  00010de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  000129e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000887  00000000  00000000  000134d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ace  00000000  00000000  00013d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d006  00000000  00000000  00024825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067da0  00000000  00000000  0003182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000995cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002720  00000000  00000000  00099610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0009bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033fc 	.word	0x080033fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080033fc 	.word	0x080033fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <generate_pwm_buffer>:
void init_DMA_TIM2();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_pwm_buffer(uint32_t *buffer, uint8_t duty_cycles[], uint8_t num_steps, uint8_t pin_numbers[]) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_steps; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e044      	b.n	80006c0 <generate_pwm_buffer+0xa0>

        for (int j = 0; j < 3;  j++){ //concatenate each PWM value
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	e03b      	b.n	80006b4 <generate_pwm_buffer+0x94>
			if (i < duty_cycles[j] * num_steps / 100) {
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	001a      	movs	r2, r3
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4353      	muls	r3, r2
 800064c:	2164      	movs	r1, #100	@ 0x64
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fde4 	bl	800021c <__divsi3>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4293      	cmp	r3, r2
 800065c:	da13      	bge.n	8000686 <generate_pwm_buffer+0x66>
				buffer[i] |= 1 << pin_numbers[j];
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	18d3      	adds	r3, r2, r3
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	18cb      	adds	r3, r1, r3
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	2301      	movs	r3, #1
 8000674:	408b      	lsls	r3, r1
 8000676:	0018      	movs	r0, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	68f9      	ldr	r1, [r7, #12]
 800067e:	18cb      	adds	r3, r1, r3
 8000680:	4302      	orrs	r2, r0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e013      	b.n	80006ae <generate_pwm_buffer+0x8e>
			} else {
				buffer[i] |= 1 << (pin_numbers[j] + 16);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	18cb      	adds	r3, r1, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3310      	adds	r3, #16
 800069a:	2101      	movs	r1, #1
 800069c:	4099      	lsls	r1, r3
 800069e:	000b      	movs	r3, r1
 80006a0:	0018      	movs	r0, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	18cb      	adds	r3, r1, r3
 80006aa:	4302      	orrs	r2, r0
 80006ac:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3;  j++){ //concatenate each PWM value
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3301      	adds	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	ddc0      	ble.n	800063c <generate_pwm_buffer+0x1c>
    for (int i = 0; i < num_steps; i++) {
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	3301      	adds	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbb5      	blt.n	8000636 <generate_pwm_buffer+0x16>
			}
        }
    }
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b006      	add	sp, #24
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <init_DMA_TIM2>:

void init_DMA_TIM2(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	TIM2->DIER |= 1 << 8; //Enable DMA request on update event -> (overflow)
 80006d8:	2380      	movs	r3, #128	@ 0x80
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2180      	movs	r1, #128	@ 0x80
 80006e4:	0049      	lsls	r1, r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	60da      	str	r2, [r3, #12]
	TIM2->DIER |= 1 << 14; //Enable trigger DMA request
 80006ea:	2380      	movs	r3, #128	@ 0x80
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	68da      	ldr	r2, [r3, #12]
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	01c9      	lsls	r1, r1, #7
 80006f8:	430a      	orrs	r2, r1
 80006fa:	60da      	str	r2, [r3, #12]
	RCC->AHBENR |= 1 << 0;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <init_DMA_TIM2+0x68>)
 80006fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <init_DMA_TIM2+0x68>)
 8000702:	2101      	movs	r1, #1
 8000704:	430a      	orrs	r2, r1
 8000706:	631a      	str	r2, [r3, #48]	@ 0x30
	DMA1_CSELR->CSELR |= 1 << 7; //Select TIM2_UP DMA CHannel
 8000708:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <init_DMA_TIM2+0x6c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <init_DMA_TIM2+0x6c>)
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	430a      	orrs	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CPAR = (uint16_t) &TIM2->ARR; //Adresse of data destination
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <init_DMA_TIM2+0x70>)
 8000716:	222c      	movs	r2, #44	@ 0x2c
 8000718:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR =  (uint32_t) buf_PWM;
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <init_DMA_TIM2+0x70>)
 800071c:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <init_DMA_TIM2+0x74>)
 800071e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = (uint32_t) 0x64; //Counter, 100 datas to read
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <init_DMA_TIM2+0x70>)
 8000722:	2264      	movs	r2, #100	@ 0x64
 8000724:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CCR |= (1 << 11) | (1 << 9) | (1 << 7) | (1 << 5 ) | (1 << 4);
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <init_DMA_TIM2+0x70>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <init_DMA_TIM2+0x70>)
 800072c:	21ab      	movs	r1, #171	@ 0xab
 800072e:	0109      	lsls	r1, r1, #4
 8000730:	430a      	orrs	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	400200a8 	.word	0x400200a8
 8000744:	4002001c 	.word	0x4002001c
 8000748:	20000140 	.word	0x20000140

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fb45 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f831 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f000 f937 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 800075e:	f000 f917 	bl	8000990 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000762:	f000 f893 	bl	800088c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000766:	f000 f8bf 	bl	80008e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  generate_pwm_buffer(buf_PWM, duty_cycles, PWM_RESOLUTION, pin_numbers);
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <main+0x5c>)
 800076c:	490f      	ldr	r1, [pc, #60]	@ (80007ac <main+0x60>)
 800076e:	4810      	ldr	r0, [pc, #64]	@ (80007b0 <main+0x64>)
 8000770:	2264      	movs	r2, #100	@ 0x64
 8000772:	f7ff ff55 	bl	8000620 <generate_pwm_buffer>
  init_DMA_TIM2();
 8000776:	f7ff ffad 	bl	80006d4 <init_DMA_TIM2>
  DMA1_Channel2->CCR |= 1 << 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <main+0x68>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <main+0x68>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]
  TIM2->CR1 |= 1 << 0;
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	601a      	str	r2, [r3, #0]




  GPIOB->ODR ^= 1 << 1;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <main+0x6c>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <main+0x6c>)
 800079c:	2102      	movs	r1, #2
 800079e:	404a      	eors	r2, r1
 80007a0:	615a      	str	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  a = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e7fc      	b.n	80007a2 <main+0x56>
 80007a8:	20000004 	.word	0x20000004
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000140 	.word	0x20000140
 80007b4:	4002001c 	.word	0x4002001c
 80007b8:	50000400 	.word	0x50000400

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b099      	sub	sp, #100	@ 0x64
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	242c      	movs	r4, #44	@ 0x2c
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2334      	movs	r3, #52	@ 0x34
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f002 fde9 	bl	80033a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	2318      	movs	r3, #24
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	0018      	movs	r0, r3
 80007d8:	2314      	movs	r3, #20
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f002 fde1 	bl	80033a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e2:	003b      	movs	r3, r7
 80007e4:	0018      	movs	r0, r3
 80007e6:	2318      	movs	r3, #24
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f002 fdda 	bl	80033a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <SystemClock_Config+0xc8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <SystemClock_Config+0xcc>)
 80007f6:	401a      	ands	r2, r3
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <SystemClock_Config+0xc8>)
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	0109      	lsls	r1, r1, #4
 80007fe:	430a      	orrs	r2, r1
 8000800:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	0021      	movs	r1, r4
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2210      	movs	r2, #16
 8000814:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	187b      	adds	r3, r7, r1
 800081e:	0018      	movs	r0, r3
 8000820:	f000 ff04 	bl	800162c <HAL_RCC_OscConfig>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000828:	f000 f99e 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	2118      	movs	r1, #24
 800082e:	187b      	adds	r3, r7, r1
 8000830:	220f      	movs	r2, #15
 8000832:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fa67 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800085a:	f000 f985 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800085e:	003b      	movs	r3, r7
 8000860:	2204      	movs	r2, #4
 8000862:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000864:	003b      	movs	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086a:	003b      	movs	r3, r7
 800086c:	0018      	movs	r0, r3
 800086e:	f001 fc5d 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000876:	f000 f977 	bl	8000b68 <Error_Handler>
  }
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b019      	add	sp, #100	@ 0x64
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	40007000 	.word	0x40007000
 8000888:	ffffe7ff 	.word	0xffffe7ff

0800088c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <MX_LPUART1_UART_Init+0x58>)
 8000894:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 8000898:	22e1      	movs	r2, #225	@ 0xe1
 800089a:	0252      	lsls	r2, r2, #9
 800089c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	0552      	lsls	r2, r2, #21
 80008a4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <MX_LPUART1_UART_Init+0x54>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 f89b 	bl	8002a08 <HAL_UART_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 80008d6:	f000 f947 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000030 	.word	0x20000030
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	2308      	movs	r3, #8
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2310      	movs	r3, #16
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f002 fd53 	bl	80033a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	003b      	movs	r3, r7
 8000900:	0018      	movs	r0, r3
 8000902:	2308      	movs	r3, #8
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f002 fd4c 	bl	80033a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_TIM2_Init+0xa0>)
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_TIM2_Init+0xa0>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000922:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <MX_TIM2_Init+0xa4>)
 8000924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_TIM2_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fd25 	bl	8002384 <HAL_TIM_Base_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800093e:	f000 f913 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	2108      	movs	r1, #8
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2280      	movs	r2, #128	@ 0x80
 8000948:	0152      	lsls	r2, r2, #5
 800094a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	187a      	adds	r2, r7, r1
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fe22 	bl	800259c <HAL_TIM_ConfigClockSource>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800095c:	f000 f904 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	003b      	movs	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	003b      	movs	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096c:	003a      	movs	r2, r7
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_TIM2_Init+0xa0>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fff8 	bl	8002968 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800097c:	f000 f8f4 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b006      	add	sp, #24
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000b8 	.word	0x200000b8
 800098c:	00000c7f 	.word	0x00000c7f

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_DMA_Init+0x38>)
 8000998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_DMA_Init+0x38>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_DMA_Init+0x38>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	200a      	movs	r0, #10
 80009b4:	f000 fb30 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 fb42 	bl	8001042 <HAL_NVIC_EnableIRQ>

}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	240c      	movs	r4, #12
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2314      	movs	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f002 fce1 	bl	80033a4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b5c      	ldr	r3, [pc, #368]	@ (8000b54 <MX_GPIO_Init+0x188>)
 80009e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009e6:	4b5b      	ldr	r3, [pc, #364]	@ (8000b54 <MX_GPIO_Init+0x188>)
 80009e8:	2104      	movs	r1, #4
 80009ea:	430a      	orrs	r2, r1
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ee:	4b59      	ldr	r3, [pc, #356]	@ (8000b54 <MX_GPIO_Init+0x188>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f2:	2204      	movs	r2, #4
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b56      	ldr	r3, [pc, #344]	@ (8000b54 <MX_GPIO_Init+0x188>)
 80009fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009fe:	4b55      	ldr	r3, [pc, #340]	@ (8000b54 <MX_GPIO_Init+0x188>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a06:	4b53      	ldr	r3, [pc, #332]	@ (8000b54 <MX_GPIO_Init+0x188>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <MX_GPIO_Init+0x188>)
 8000a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a16:	4b4f      	ldr	r3, [pc, #316]	@ (8000b54 <MX_GPIO_Init+0x188>)
 8000a18:	2102      	movs	r1, #2
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b54 <MX_GPIO_Init+0x188>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a22:	2202      	movs	r2, #2
 8000a24:	4013      	ands	r3, r2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_EXP1_Pin|PWM_EXP2_Pin, GPIO_PIN_RESET);
 8000a2a:	494b      	ldr	r1, [pc, #300]	@ (8000b58 <MX_GPIO_Init+0x18c>)
 8000a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b5c <MX_GPIO_Init+0x190>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fdb7 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXP_START_GPIO_Port, EXP_START_Pin, GPIO_PIN_RESET);
 8000a36:	23a0      	movs	r3, #160	@ 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fdb0 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_SEQ_Pin|PWM_PARACH_Pin, GPIO_PIN_RESET);
 8000a44:	4946      	ldr	r1, [pc, #280]	@ (8000b60 <MX_GPIO_Init+0x194>)
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x198>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fdaa 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM_EXP1_Pin PWM_EXP2_Pin */
  GPIO_InitStruct.Pin = PWM_EXP1_Pin|PWM_EXP2_Pin;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	4a41      	ldr	r2, [pc, #260]	@ (8000b58 <MX_GPIO_Init+0x18c>)
 8000a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2203      	movs	r2, #3
 8000a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8000b5c <MX_GPIO_Init+0x190>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fc2a 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXP_START_Pin */
  GPIO_InitStruct.Pin = EXP_START_Pin;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2208      	movs	r2, #8
 8000a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EXP_START_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	193a      	adds	r2, r7, r4
 8000a8e:	23a0      	movs	r3, #160	@ 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fc17 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin LED_SEQ_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_SEQ_Pin;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b64 <MX_GPIO_Init+0x198>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fc05 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LAUNCH_SIG_Pin RLD_PARA_Pin */
  GPIO_InitStruct.Pin = LAUNCH_SIG_Pin|RLD_PARA_Pin;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2284      	movs	r2, #132	@ 0x84
 8000ac8:	0392      	lsls	r2, r2, #14
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <MX_GPIO_Init+0x198>)
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	0010      	movs	r0, r2
 8000ada:	f000 fbf5 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLD_EXP_Pin */
  GPIO_InitStruct.Pin = RLD_EXP_Pin;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	0212      	lsls	r2, r2, #8
 8000ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2284      	movs	r2, #132	@ 0x84
 8000aea:	0392      	lsls	r2, r2, #14
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RLD_EXP_GPIO_Port, &GPIO_InitStruct);
 8000af4:	193a      	adds	r2, r7, r4
 8000af6:	23a0      	movs	r3, #160	@ 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fbe3 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_PARACH_Pin */
  GPIO_InitStruct.Pin = PWM_PARACH_Pin;
 8000b02:	0021      	movs	r1, r4
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2280      	movs	r2, #128	@ 0x80
 8000b08:	0092      	lsls	r2, r2, #2
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_PARACH_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <MX_GPIO_Init+0x198>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f000 fbcf 	bl	80012c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f000 fa72 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b34:	2006      	movs	r0, #6
 8000b36:	f000 fa84 	bl	8001042 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fa6a 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f000 fa7c 	bl	8001042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b009      	add	sp, #36	@ 0x24
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	40021000 	.word	0x40021000
 8000b58:	00002001 	.word	0x00002001
 8000b5c:	50000800 	.word	0x50000800
 8000b60:	00000203 	.word	0x00000203
 8000b64:	50000400 	.word	0x50000400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0549      	lsls	r1, r1, #21
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	240c      	movs	r4, #12
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 fbf8 	bl	80033a4 <memset>
  if(huart->Instance==LPUART1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <HAL_UART_MspInit+0x80>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d129      	bne.n	8000c12 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0x84>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bdc:	2202      	movs	r2, #2
 8000bde:	4013      	ands	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	22c0      	movs	r2, #192	@ 0xc0
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2206      	movs	r2, #6
 8000c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <HAL_UART_MspInit+0x88>)
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	f000 fb5b 	bl	80012c8 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b009      	add	sp, #36	@ 0x24
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	50000400 	.word	0x50000400

08000c28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d138      	bne.n	8000cae <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x90>)
 8000c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x90>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc0 <HAL_TIM_Base_MspInit+0x98>)
 8000c4c:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_8;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c56:	2210      	movs	r2, #16
 8000c58:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c68:	2280      	movs	r2, #128	@ 0x80
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c70:	2280      	movs	r2, #128	@ 0x80
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c78:	2220      	movs	r2, #32
 8000c7a:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f9f9 	bl	800107c <HAL_DMA_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8000c8e:	f7ff ff6b 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c96:	61da      	str	r2, [r3, #28]
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_TIM_Base_MspInit+0x94>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f9b8 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca8:	200f      	movs	r0, #15
 8000caa:	f000 f9ca 	bl	8001042 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	200000f8 	.word	0x200000f8
 8000cc0:	4002001c 	.word	0x4002001c

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8cc 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAUNCH_SIG_Pin);
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f000 fc70 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RLD_PARA_Pin);
 8000d00:	2008      	movs	r0, #8
 8000d02:	f000 fc6d 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RLD_EXP_Pin);
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fc63 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fa20 	bl	800116c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	200000f8 	.word	0x200000f8

08000d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <TIM2_IRQHandler+0x14>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fb60 	bl	8002404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	200000b8 	.word	0x200000b8

08000d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d5e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d60:	f7ff fff6 	bl	8000d50 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d64:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d66:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d68:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <LoopForever+0xa>)
    CMP R1, R2
 8000d6c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d6e:	d105      	bne.n	8000d7c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d70:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d72:	4912      	ldr	r1, [pc, #72]	@ (8000dbc <LoopForever+0x12>)
    STR R1, [R0]
 8000d74:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d76:	4812      	ldr	r0, [pc, #72]	@ (8000dc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d78:	4912      	ldr	r1, [pc, #72]	@ (8000dc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d7a:	6001      	str	r1, [r0, #0]

08000d7c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	4812      	ldr	r0, [pc, #72]	@ (8000dc8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d7e:	4913      	ldr	r1, [pc, #76]	@ (8000dcc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d80:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <LoopForever+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d94:	4c10      	ldr	r4, [pc, #64]	@ (8000dd8 <LoopForever+0x2e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f002 fb07 	bl	80033b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fcd1 	bl	800074c <main>

08000daa <LoopForever>:

LoopForever:
    b LoopForever
 8000daa:	e7fe      	b.n	8000daa <LoopForever>
   ldr   r0, =_estack
 8000dac:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 8000db0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000db4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000db8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000dbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000dc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000dc4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dd0:	08003490 	.word	0x08003490
  ldr r2, =_sbss
 8000dd4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dd8:	200002d4 	.word	0x200002d4

08000ddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_IRQHandler>
	...

08000de0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x3c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_Init+0x3c>)
 8000df2:	2140      	movs	r1, #64	@ 0x40
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f811 	bl	8000e20 <HAL_InitTick>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e001      	b.n	8000e0e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0a:	f7ff feb3 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_InitTick+0x5c>)
 8000e2a:	681c      	ldr	r4, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_InitTick+0x60>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	0019      	movs	r1, r3
 8000e32:	23fa      	movs	r3, #250	@ 0xfa
 8000e34:	0098      	lsls	r0, r3, #2
 8000e36:	f7ff f967 	bl	8000108 <__udivsi3>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f7ff f962 	bl	8000108 <__udivsi3>
 8000e44:	0003      	movs	r3, r0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f90b 	bl	8001062 <HAL_SYSTICK_Config>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e00f      	b.n	8000e74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d80b      	bhi.n	8000e72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	425b      	negs	r3, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f8d8 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_InitTick+0x64>)
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000010 	.word	0x20000010
 8000e84:	2000000c 	.word	0x2000000c

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	001a      	movs	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	18d2      	adds	r2, r2, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	200002d0 	.word	0x200002d0

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	@ (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	200002d0 	.word	0x200002d0

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed2:	d809      	bhi.n	8000ee8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	401a      	ands	r2, r3
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_EnableIRQ+0x30>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
  }
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f08:	d828      	bhi.n	8000f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	33c0      	adds	r3, #192	@ 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	589b      	ldr	r3, [r3, r2]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	@ 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	@ 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	481f      	ldr	r0, [pc, #124]	@ (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	33c0      	adds	r3, #192	@ 0xc0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f5a:	e031      	b.n	8000fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0019      	movs	r1, r3
 8000f64:	230f      	movs	r3, #15
 8000f66:	400b      	ands	r3, r1
 8000f68:	3b08      	subs	r3, #8
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	@ 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	@ 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	001c      	movs	r4, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	4023      	ands	r3, r4
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	18c3      	adds	r3, r0, r3
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	045b      	lsls	r3, r3, #17
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d301      	bcc.n	8000fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e010      	b.n	800100a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <SysTick_Config+0x44>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff7c 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x44>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x44>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	0002      	movs	r2, r0
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ffaf 	bl	8000fd0 <SysTick_Config>
 8001072:	0003      	movs	r3, r0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e061      	b.n	8001152 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <HAL_DMA_Init+0xe0>)
 8001094:	4694      	mov	ip, r2
 8001096:	4463      	add	r3, ip
 8001098:	2114      	movs	r1, #20
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff f834 	bl	8000108 <__udivsi3>
 80010a0:	0003      	movs	r3, r0
 80010a2:	009a      	lsls	r2, r3, #2
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <HAL_DMA_Init+0xe4>)
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2225      	movs	r2, #37	@ 0x25
 80010b2:	2102      	movs	r1, #2
 80010b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <HAL_DMA_Init+0xe8>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	01db      	lsls	r3, r3, #7
 8001104:	429a      	cmp	r2, r3
 8001106:	d018      	beq.n	800113a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_DMA_Init+0xec>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001110:	211c      	movs	r1, #28
 8001112:	400b      	ands	r3, r1
 8001114:	210f      	movs	r1, #15
 8001116:	4099      	lsls	r1, r3
 8001118:	000b      	movs	r3, r1
 800111a:	43d9      	mvns	r1, r3
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_DMA_Init+0xec>)
 800111e:	400a      	ands	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_DMA_Init+0xec>)
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	201c      	movs	r0, #28
 8001130:	4003      	ands	r3, r0
 8001132:	409a      	lsls	r2, r3
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_DMA_Init+0xec>)
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2225      	movs	r2, #37	@ 0x25
 8001144:	2101      	movs	r1, #1
 8001146:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	@ 0x24
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	bffdfff8 	.word	0xbffdfff8
 8001160:	40020000 	.word	0x40020000
 8001164:	ffff800f 	.word	0xffff800f
 8001168:	400200a8 	.word	0x400200a8

0800116c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	221c      	movs	r2, #28
 800118a:	4013      	ands	r3, r2
 800118c:	2204      	movs	r2, #4
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	d026      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x7a>
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2204      	movs	r2, #4
 800119c:	4013      	ands	r3, r2
 800119e:	d022      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2220      	movs	r2, #32
 80011a8:	4013      	ands	r3, r2
 80011aa:	d107      	bne.n	80011bc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2104      	movs	r1, #4
 80011b8:	438a      	bics	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c0:	221c      	movs	r2, #28
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	2104      	movs	r1, #4
 80011ca:	4091      	lsls	r1, r2
 80011cc:	000a      	movs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <HAL_DMA_IRQHandler+0x6e>
 80011d8:	e071      	b.n	80012be <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	0010      	movs	r0, r2
 80011e2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80011e4:	e06b      	b.n	80012be <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	221c      	movs	r2, #28
 80011ec:	4013      	ands	r3, r2
 80011ee:	2202      	movs	r2, #2
 80011f0:	409a      	lsls	r2, r3
 80011f2:	0013      	movs	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4013      	ands	r3, r2
 80011f8:	d02d      	beq.n	8001256 <HAL_DMA_IRQHandler+0xea>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d029      	beq.n	8001256 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2220      	movs	r2, #32
 800120a:	4013      	ands	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	210a      	movs	r1, #10
 800121a:	438a      	bics	r2, r1
 800121c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2225      	movs	r2, #37	@ 0x25
 8001222:	2101      	movs	r1, #1
 8001224:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	221c      	movs	r2, #28
 800122c:	401a      	ands	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	2102      	movs	r1, #2
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2224      	movs	r2, #36	@ 0x24
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d039      	beq.n	80012be <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	0010      	movs	r0, r2
 8001252:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001254:	e033      	b.n	80012be <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	221c      	movs	r2, #28
 800125c:	4013      	ands	r3, r2
 800125e:	2208      	movs	r2, #8
 8001260:	409a      	lsls	r2, r3
 8001262:	0013      	movs	r3, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	d02a      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x154>
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2208      	movs	r2, #8
 800126e:	4013      	ands	r3, r2
 8001270:	d026      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	210e      	movs	r1, #14
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	221c      	movs	r2, #28
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	2101      	movs	r1, #1
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2225      	movs	r2, #37	@ 0x25
 80012a0:	2101      	movs	r1, #1
 80012a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2224      	movs	r2, #36	@ 0x24
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	0010      	movs	r0, r2
 80012bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	46c0      	nop			@ (mov r8, r8)
}
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012de:	e149      	b.n	8001574 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4091      	lsls	r1, r2
 80012ea:	000a      	movs	r2, r1
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <HAL_GPIO_Init+0x30>
 80012f6:	e13a      	b.n	800156e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2203      	movs	r2, #3
 80012fe:	4013      	ands	r3, r2
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	0013      	movs	r3, r2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	2201      	movs	r2, #1
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b03      	cmp	r3, #3
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	58d3      	ldr	r3, [r2, r3]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2207      	movs	r2, #7
 80013cc:	4013      	ands	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2107      	movs	r1, #7
 80013e6:	400b      	ands	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	401a      	ands	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	23c0      	movs	r3, #192	@ 0xc0
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d100      	bne.n	8001444 <HAL_GPIO_Init+0x17c>
 8001442:	e094      	b.n	800156e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <HAL_GPIO_Init+0x2c4>)
 8001446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001448:	4b50      	ldr	r3, [pc, #320]	@ (800158c <HAL_GPIO_Init+0x2c4>)
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001450:	4a4f      	ldr	r2, [pc, #316]	@ (8001590 <HAL_GPIO_Init+0x2c8>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	589b      	ldr	r3, [r3, r2]
 800145c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	409a      	lsls	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	43da      	mvns	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	23a0      	movs	r3, #160	@ 0xa0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	429a      	cmp	r2, r3
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x1de>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a44      	ldr	r2, [pc, #272]	@ (8001594 <HAL_GPIO_Init+0x2cc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x1da>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a43      	ldr	r2, [pc, #268]	@ (8001598 <HAL_GPIO_Init+0x2d0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x1d6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a42      	ldr	r2, [pc, #264]	@ (800159c <HAL_GPIO_Init+0x2d4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x1d2>
 8001496:	2305      	movs	r3, #5
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x1e0>
 800149a:	2306      	movs	r3, #6
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x1e0>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x1e0>
 80014a6:	2300      	movs	r3, #0
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	2103      	movs	r1, #3
 80014ac:	400a      	ands	r2, r1
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	@ (8001590 <HAL_GPIO_Init+0x2c8>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43da      	mvns	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	035b      	lsls	r3, r3, #13
 80014de:	4013      	ands	r3, r2
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	039b      	lsls	r3, r3, #14
 8001508:	4013      	ands	r3, r2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	2380      	movs	r3, #128	@ 0x80
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	4013      	ands	r3, r2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_GPIO_Init+0x2d8>)
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	40da      	lsrs	r2, r3
 800157c:	1e13      	subs	r3, r2, #0
 800157e:	d000      	beq.n	8001582 <HAL_GPIO_Init+0x2ba>
 8001580:	e6ae      	b.n	80012e0 <HAL_GPIO_Init+0x18>
  }
}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b006      	add	sp, #24
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	50000400 	.word	0x50000400
 8001598:	50000800 	.word	0x50000800
 800159c:	50001c00 	.word	0x50001c00
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	0008      	movs	r0, r1
 80015ae:	0011      	movs	r1, r2
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	1c02      	adds	r2, r0, #0
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	1c7b      	adds	r3, r7, #1
 80015b8:	1c0a      	adds	r2, r1, #0
 80015ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015bc:	1c7b      	adds	r3, r7, #1
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c4:	1cbb      	adds	r3, r7, #2
 80015c6:	881a      	ldrh	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	0002      	movs	r2, r0
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	1dba      	adds	r2, r7, #6
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	4013      	ands	r3, r2
 80015f6:	d008      	beq.n	800160a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015fa:	1dba      	adds	r2, r7, #6
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f807 	bl	8001618 <HAL_GPIO_EXTI_Callback>
  }
}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	0002      	movs	r2, r0
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f000 fb6c 	bl	8001d18 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001640:	4bc8      	ldr	r3, [pc, #800]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	220c      	movs	r2, #12
 8001646:	4013      	ands	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164a:	4bc6      	ldr	r3, [pc, #792]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	2380      	movs	r3, #128	@ 0x80
 8001650:	025b      	lsls	r3, r3, #9
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x36>
 8001660:	e07d      	b.n	800175e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d007      	beq.n	8001678 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d112      	bne.n	8001694 <HAL_RCC_OscConfig+0x68>
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	429a      	cmp	r2, r3
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4bba      	ldr	r3, [pc, #744]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x5a>
 8001684:	e06a      	b.n	800175c <HAL_RCC_OscConfig+0x130>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d166      	bne.n	800175c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f000 fb42 	bl	8001d18 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x84>
 80016a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4baf      	ldr	r3, [pc, #700]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	0249      	lsls	r1, r1, #9
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e027      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	23a0      	movs	r3, #160	@ 0xa0
 80016b6:	02db      	lsls	r3, r3, #11
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d10e      	bne.n	80016da <HAL_RCC_OscConfig+0xae>
 80016bc:	4ba9      	ldr	r3, [pc, #676]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	02c9      	lsls	r1, r1, #11
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4ba5      	ldr	r3, [pc, #660]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0249      	lsls	r1, r1, #9
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e012      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016da:	4ba2      	ldr	r3, [pc, #648]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4ba1      	ldr	r3, [pc, #644]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016e0:	49a1      	ldr	r1, [pc, #644]	@ (8001968 <HAL_RCC_OscConfig+0x33c>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	4b9f      	ldr	r3, [pc, #636]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4b9b      	ldr	r3, [pc, #620]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80016fa:	499c      	ldr	r1, [pc, #624]	@ (800196c <HAL_RCC_OscConfig+0x340>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d014      	beq.n	8001732 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fbd0 	bl	8000eac <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001712:	f7ff fbcb 	bl	8000eac <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	@ 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e2f9      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001724:	4b8f      	ldr	r3, [pc, #572]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0xe6>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fbbb 	bl	8000eac <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fbb6 	bl	8000eac <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e2e4      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800174e:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	029b      	lsls	r3, r3, #10
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x110>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x13e>
 8001768:	e099      	b.n	800189e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	2220      	movs	r2, #32
 8001774:	4013      	ands	r3, r2
 8001776:	d009      	beq.n	800178c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001778:	4b7a      	ldr	r3, [pc, #488]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b79      	ldr	r3, [pc, #484]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800177e:	2120      	movs	r1, #32
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	2220      	movs	r2, #32
 8001788:	4393      	bics	r3, r2
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d13e      	bne.n	8001816 <HAL_RCC_OscConfig+0x1ea>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d13b      	bne.n	8001816 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800179e:	4b71      	ldr	r3, [pc, #452]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d004      	beq.n	80017b2 <HAL_RCC_OscConfig+0x186>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e2b2      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x344>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017c8:	4b66      	ldr	r3, [pc, #408]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2209      	movs	r2, #9
 80017ce:	4393      	bics	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	4b64      	ldr	r3, [pc, #400]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017da:	f000 fbeb 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80017de:	0001      	movs	r1, r0
 80017e0:	4b60      	ldr	r3, [pc, #384]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	220f      	movs	r2, #15
 80017e8:	4013      	ands	r3, r2
 80017ea:	4a62      	ldr	r2, [pc, #392]	@ (8001974 <HAL_RCC_OscConfig+0x348>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	000a      	movs	r2, r1
 80017f0:	40da      	lsrs	r2, r3
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x34c>)
 80017f4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017f6:	4b61      	ldr	r3, [pc, #388]	@ (800197c <HAL_RCC_OscConfig+0x350>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2513      	movs	r5, #19
 80017fc:	197c      	adds	r4, r7, r5
 80017fe:	0018      	movs	r0, r3
 8001800:	f7ff fb0e 	bl	8000e20 <HAL_InitTick>
 8001804:	0003      	movs	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001808:	197b      	adds	r3, r7, r5
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d046      	beq.n	800189e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001810:	197b      	adds	r3, r7, r5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	e280      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	d027      	beq.n	800186c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800181c:	4b51      	ldr	r3, [pc, #324]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2209      	movs	r2, #9
 8001822:	4393      	bics	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb3d 	bl	8000eac <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fb38 	bl	8000eac <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e266      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	4b46      	ldr	r3, [pc, #280]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d0f1      	beq.n	8001838 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b43      	ldr	r3, [pc, #268]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a45      	ldr	r2, [pc, #276]	@ (8001970 <HAL_RCC_OscConfig+0x344>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	021a      	lsls	r2, r3, #8
 8001864:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	e018      	b.n	800189e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b3c      	ldr	r3, [pc, #240]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fb18 	bl	8000eac <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fb13 	bl	8000eac <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e241      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001894:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d1f1      	bne.n	8001882 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2210      	movs	r2, #16
 80018a4:	4013      	ands	r3, r2
 80018a6:	d100      	bne.n	80018aa <HAL_RCC_OscConfig+0x27e>
 80018a8:	e0a1      	b.n	80019ee <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d140      	bne.n	8001932 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x29c>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e227      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001980 <HAL_RCC_OscConfig+0x354>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	0a19      	lsrs	r1, r3, #8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	061a      	lsls	r2, r3, #24
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	0b5b      	lsrs	r3, r3, #13
 80018f6:	3301      	adds	r3, #1
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	0212      	lsls	r2, r2, #8
 80018fc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	210f      	movs	r1, #15
 8001906:	400b      	ands	r3, r1
 8001908:	491a      	ldr	r1, [pc, #104]	@ (8001974 <HAL_RCC_OscConfig+0x348>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <HAL_RCC_OscConfig+0x34c>)
 8001910:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <HAL_RCC_OscConfig+0x350>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2513      	movs	r5, #19
 8001918:	197c      	adds	r4, r7, r5
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fa80 	bl	8000e20 <HAL_InitTick>
 8001920:	0003      	movs	r3, r0
 8001922:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001924:	197b      	adds	r3, r7, r5
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d060      	beq.n	80019ee <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800192c:	197b      	adds	r3, r7, r5
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	e1f2      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d03f      	beq.n	80019ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_OscConfig+0x338>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0049      	lsls	r1, r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fab0 	bl	8000eac <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001952:	f7ff faab 	bl	8000eac <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d911      	bls.n	8001984 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1d9      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
 8001964:	40021000 	.word	0x40021000
 8001968:	fffeffff 	.word	0xfffeffff
 800196c:	fffbffff 	.word	0xfffbffff
 8001970:	ffffe0ff 	.word	0xffffe0ff
 8001974:	08003414 	.word	0x08003414
 8001978:	20000008 	.word	0x20000008
 800197c:	2000000c 	.word	0x2000000c
 8001980:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001984:	4bc9      	ldr	r3, [pc, #804]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d0e0      	beq.n	8001952 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001990:	4bc6      	ldr	r3, [pc, #792]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4ac6      	ldr	r2, [pc, #792]	@ (8001cb0 <HAL_RCC_OscConfig+0x684>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	4bc3      	ldr	r3, [pc, #780]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a4:	4bc1      	ldr	r3, [pc, #772]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	0a19      	lsrs	r1, r3, #8
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	061a      	lsls	r2, r3, #24
 80019b2:	4bbe      	ldr	r3, [pc, #760]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	e019      	b.n	80019ee <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ba:	4bbc      	ldr	r3, [pc, #752]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4bbb      	ldr	r3, [pc, #748]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019c0:	49bc      	ldr	r1, [pc, #752]	@ (8001cb4 <HAL_RCC_OscConfig+0x688>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fa71 	bl	8000eac <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d0:	f7ff fa6c 	bl	8000eac <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e19a      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019e2:	4bb2      	ldr	r3, [pc, #712]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2208      	movs	r2, #8
 80019f4:	4013      	ands	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a00:	4baa      	ldr	r3, [pc, #680]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a04:	4ba9      	ldr	r3, [pc, #676]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa4e 	bl	8000eac <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff fa49 	bl	8000eac <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e177      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a28:	4ba0      	ldr	r3, [pc, #640]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f1      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3ea>
 8001a32:	e018      	b.n	8001a66 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b9d      	ldr	r3, [pc, #628]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a38:	4b9c      	ldr	r3, [pc, #624]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fa34 	bl	8000eac <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fa2f 	bl	8000eac <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e15d      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5c:	4b93      	ldr	r3, [pc, #588]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f1      	bne.n	8001a4a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x446>
 8001a70:	e0ae      	b.n	8001bd0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2023      	movs	r0, #35	@ 0x23
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	055b      	lsls	r3, r3, #21
 8001a82:	4013      	ands	r3, r2
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b89      	ldr	r3, [pc, #548]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a8a:	4b88      	ldr	r3, [pc, #544]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	0549      	lsls	r1, r1, #21
 8001a90:	430a      	orrs	r2, r1
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b87      	ldr	r3, [pc, #540]	@ (8001cb8 <HAL_RCC_OscConfig+0x68c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b84      	ldr	r3, [pc, #528]	@ (8001cb8 <HAL_RCC_OscConfig+0x68c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b83      	ldr	r3, [pc, #524]	@ (8001cb8 <HAL_RCC_OscConfig+0x68c>)
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0049      	lsls	r1, r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f9fa 	bl	8000eac <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7ff f9f5 	bl	8000eac <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	@ 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e123      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <HAL_RCC_OscConfig+0x68c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4cc>
 8001ae8:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001aea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001af6:	e031      	b.n	8001b5c <HAL_RCC_OscConfig+0x530>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4ee>
 8001b00:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b04:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b06:	496b      	ldr	r1, [pc, #428]	@ (8001cb4 <HAL_RCC_OscConfig+0x688>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b0c:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b12:	496a      	ldr	r1, [pc, #424]	@ (8001cbc <HAL_RCC_OscConfig+0x690>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b18:	e020      	b.n	8001b5c <HAL_RCC_OscConfig+0x530>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	23a0      	movs	r3, #160	@ 0xa0
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x518>
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b2a:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b2c:	2180      	movs	r1, #128	@ 0x80
 8001b2e:	00c9      	lsls	r1, r1, #3
 8001b30:	430a      	orrs	r2, r1
 8001b32:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b34:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b38:	4b5c      	ldr	r3, [pc, #368]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	0049      	lsls	r1, r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x530>
 8001b44:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b48:	4b58      	ldr	r3, [pc, #352]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b4a:	495a      	ldr	r1, [pc, #360]	@ (8001cb4 <HAL_RCC_OscConfig+0x688>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b50:	4b56      	ldr	r3, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b54:	4b55      	ldr	r3, [pc, #340]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b56:	4959      	ldr	r1, [pc, #356]	@ (8001cbc <HAL_RCC_OscConfig+0x690>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff f9a2 	bl	8000eac <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f99d 	bl	8000eac <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a51      	ldr	r2, [pc, #324]	@ (8001cc0 <HAL_RCC_OscConfig+0x694>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0ca      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b82:	4b4a      	ldr	r3, [pc, #296]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d0ef      	beq.n	8001b6e <HAL_RCC_OscConfig+0x542>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff f98c 	bl	8000eac <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff f987 	bl	8000eac <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a46      	ldr	r2, [pc, #280]	@ (8001cc0 <HAL_RCC_OscConfig+0x694>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0b4      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bae:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bba:	2323      	movs	r3, #35	@ 0x23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001bca:	493e      	ldr	r1, [pc, #248]	@ (8001cc4 <HAL_RCC_OscConfig+0x698>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x5ae>
 8001bd8:	e09d      	b.n	8001d16 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5b6>
 8001be0:	e076      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d145      	bne.n	8001c76 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001bf0:	4935      	ldr	r1, [pc, #212]	@ (8001cc8 <HAL_RCC_OscConfig+0x69c>)
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f959 	bl	8000eac <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f954 	bl	8000eac <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e082      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	049b      	lsls	r3, r3, #18
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	4a2a      	ldr	r2, [pc, #168]	@ (8001ccc <HAL_RCC_OscConfig+0x6a0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	431a      	orrs	r2, r3
 8001c38:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	0449      	lsls	r1, r1, #17
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f92e 	bl	8000eac <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f929 	bl	8000eac <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e057      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	049b      	lsls	r3, r3, #18
 8001c70:	4013      	ands	r3, r2
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x62a>
 8001c74:	e04f      	b.n	8001d16 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001c7c:	4912      	ldr	r1, [pc, #72]	@ (8001cc8 <HAL_RCC_OscConfig+0x69c>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff f913 	bl	8000eac <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f90e 	bl	8000eac <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e03c      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c9e:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_RCC_OscConfig+0x680>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	049b      	lsls	r3, r3, #18
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x660>
 8001caa:	e034      	b.n	8001d16 <HAL_RCC_OscConfig+0x6ea>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	ffff1fff 	.word	0xffff1fff
 8001cb4:	fffffeff 	.word	0xfffffeff
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	fffffbff 	.word	0xfffffbff
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	efffffff 	.word	0xefffffff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_OscConfig+0x6f4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	025b      	lsls	r3, r3, #9
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d10f      	bne.n	8001d12 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	23f0      	movs	r3, #240	@ 0xf0
 8001cf6:	039b      	lsls	r3, r3, #14
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	23c0      	movs	r3, #192	@ 0xc0
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b00a      	add	sp, #40	@ 0x28
 8001d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e128      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b96      	ldr	r3, [pc, #600]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d91e      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b93      	ldr	r3, [pc, #588]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	4b90      	ldr	r3, [pc, #576]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f8a8 	bl	8000eac <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	e009      	b.n	8001d76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f7ff f8a3 	bl	8000eac <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4a8a      	ldr	r2, [pc, #552]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e109      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1ee      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	22f0      	movs	r2, #240	@ 0xf0
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_RCC_ClockConfig+0x8a>
 8001dac:	e089      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001db6:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d120      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0e1      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dce:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0d5      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0ca      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df4:	4b69      	ldr	r3, [pc, #420]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0c2      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b65      	ldr	r3, [pc, #404]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4b62      	ldr	r3, [pc, #392]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f848 	bl	8000eac <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d111      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7ff f83f 	bl	8000eac <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a58      	ldr	r2, [pc, #352]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0a5      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3e:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	220c      	movs	r2, #12
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x106>
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d111      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7ff f829 	bl	8000eac <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e08f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	220c      	movs	r2, #12
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d1ef      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x132>
 8001e76:	e024      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7ff f813 	bl	8000eac <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e079      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e96:	4b41      	ldr	r3, [pc, #260]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d1ef      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x15e>
 8001ea2:	e00e      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f802 	bl	8000eac <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a3a      	ldr	r2, [pc, #232]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e068      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eb8:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d21e      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee2:	f7fe ffe3 	bl	8000eac <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe ffde 	bl	8000eac <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e044      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a20      	ldr	r2, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x27c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa4 <HAL_RCC_ClockConfig+0x280>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00da      	lsls	r2, r3, #3
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4c:	f000 f832 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f50:	0001      	movs	r1, r0
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	220f      	movs	r2, #15
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_RCC_ClockConfig+0x284>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	000a      	movs	r2, r1
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_ClockConfig+0x288>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_RCC_ClockConfig+0x28c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	250b      	movs	r5, #11
 8001f6e:	197c      	adds	r4, r7, r5
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7fe ff55 	bl	8000e20 <HAL_InitTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f82:	197b      	adds	r3, r7, r5
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	40022000 	.word	0x40022000
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	fffff8ff 	.word	0xfffff8ff
 8001fa4:	ffffc7ff 	.word	0xffffc7ff
 8001fa8:	08003414 	.word	0x08003414
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d013      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001fca:	d85c      	bhi.n	8002086 <HAL_RCC_GetSysClockFreq+0xd2>
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d002      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x22>
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d00b      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x38>
 8001fd4:	e057      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d002      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fe4:	e05d      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fe8:	613b      	str	r3, [r7, #16]
      break;
 8001fea:	e05a      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fec:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fee:	613b      	str	r3, [r7, #16]
      break;
 8001ff0:	e057      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0d9b      	lsrs	r3, r3, #22
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	3301      	adds	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	4013      	ands	r3, r2
 8002016:	d00f      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	000a      	movs	r2, r1
 800201c:	0152      	lsls	r2, r2, #5
 800201e:	1a52      	subs	r2, r2, r1
 8002020:	0193      	lsls	r3, r2, #6
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	185b      	adds	r3, r3, r1
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe f86b 	bl	8000108 <__udivsi3>
 8002032:	0003      	movs	r3, r0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e023      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d00f      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	000a      	movs	r2, r1
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	1a52      	subs	r2, r2, r1
 800204a:	0193      	lsls	r3, r2, #6
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	185b      	adds	r3, r3, r1
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe f856 	bl	8000108 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00e      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	000a      	movs	r2, r1
 8002066:	0152      	lsls	r2, r2, #5
 8002068:	1a52      	subs	r2, r2, r1
 800206a:	0193      	lsls	r3, r2, #6
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	185b      	adds	r3, r3, r1
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f7fe f846 	bl	8000108 <__udivsi3>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e00d      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0b5b      	lsrs	r3, r3, #13
 800208c:	2207      	movs	r2, #7
 800208e:	4013      	ands	r3, r2
 8002090:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      break;
 80020a0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a2:	693b      	ldr	r3, [r7, #16]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b006      	add	sp, #24
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	003d0900 	.word	0x003d0900
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	0800342c 	.word	0x0800342c

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000008 	.word	0x20000008

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d8:	f7ff fff2 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	000b      	movs	r3, r1
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08003424 	.word	0x08003424

08002100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002104:	f7ff ffdc 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 8002108:	0001      	movs	r1, r0
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	0adb      	lsrs	r3, r3, #11
 8002110:	2207      	movs	r2, #7
 8002112:	4013      	ands	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	40d9      	lsrs	r1, r3
 800211a:	000b      	movs	r3, r1
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	40021000 	.word	0x40021000
 8002128:	08003424 	.word	0x08003424

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002134:	2017      	movs	r0, #23
 8002136:	183b      	adds	r3, r7, r0
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2220      	movs	r2, #32
 8002142:	4013      	ands	r3, r2
 8002144:	d100      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002146:	e0c7      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002148:	4b84      	ldr	r3, [pc, #528]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800214a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	4013      	ands	r3, r2
 8002152:	d109      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b81      	ldr	r3, [pc, #516]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002158:	4b80      	ldr	r3, [pc, #512]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800215a:	2180      	movs	r1, #128	@ 0x80
 800215c:	0549      	lsls	r1, r1, #21
 800215e:	430a      	orrs	r2, r1
 8002160:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002162:	183b      	adds	r3, r7, r0
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b7d      	ldr	r3, [pc, #500]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d11a      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002174:	4b7a      	ldr	r3, [pc, #488]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b79      	ldr	r3, [pc, #484]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	0049      	lsls	r1, r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe fe93 	bl	8000eac <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	e008      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fe8e 	bl	8000eac <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0d9      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b70      	ldr	r3, [pc, #448]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f0      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021aa:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	23c0      	movs	r3, #192	@ 0xc0
 80021b0:	039b      	lsls	r3, r3, #14
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	23c0      	movs	r3, #192	@ 0xc0
 80021bc:	039b      	lsls	r3, r3, #14
 80021be:	4013      	ands	r3, r2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d013      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	23c0      	movs	r3, #192	@ 0xc0
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	401a      	ands	r2, r3
 80021d0:	23c0      	movs	r3, #192	@ 0xc0
 80021d2:	029b      	lsls	r3, r3, #10
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10a      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021d8:	4b60      	ldr	r3, [pc, #384]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	401a      	ands	r2, r3
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0b1      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021ee:	4b5b      	ldr	r3, [pc, #364]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f2:	23c0      	movs	r3, #192	@ 0xc0
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03b      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	23c0      	movs	r3, #192	@ 0xc0
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	4013      	ands	r3, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d033      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2220      	movs	r2, #32
 8002216:	4013      	ands	r3, r2
 8002218:	d02e      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800221a:	4b50      	ldr	r3, [pc, #320]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002224:	4b4d      	ldr	r3, [pc, #308]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002228:	4b4c      	ldr	r3, [pc, #304]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0309      	lsls	r1, r1, #12
 800222e:	430a      	orrs	r2, r1
 8002230:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002232:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002236:	4b49      	ldr	r3, [pc, #292]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002238:	494b      	ldr	r1, [pc, #300]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800223a:	400a      	ands	r2, r1
 800223c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800223e:	4b47      	ldr	r3, [pc, #284]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4013      	ands	r3, r2
 800224c:	d014      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fe2d 	bl	8000eac <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002256:	e009      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7fe fe28 	bl	8000eac <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	4a42      	ldr	r2, [pc, #264]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e072      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800226e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d0ef      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2220      	movs	r2, #32
 800227e:	4013      	ands	r3, r2
 8002280:	d01f      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	23c0      	movs	r3, #192	@ 0xc0
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	401a      	ands	r2, r3
 800228c:	23c0      	movs	r3, #192	@ 0xc0
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	429a      	cmp	r2, r3
 8002292:	d10c      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002294:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a35      	ldr	r2, [pc, #212]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	23c0      	movs	r3, #192	@ 0xc0
 80022a4:	039b      	lsls	r3, r3, #14
 80022a6:	401a      	ands	r2, r3
 80022a8:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	23c0      	movs	r3, #192	@ 0xc0
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	401a      	ands	r2, r3
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022c2:	2317      	movs	r3, #23
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d0:	4b22      	ldr	r3, [pc, #136]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022d2:	4928      	ldr	r1, [pc, #160]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	220c      	movs	r2, #12
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2204      	movs	r2, #4
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002310:	430a      	orrs	r2, r1
 8002312:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2208      	movs	r2, #8
 800231a:	4013      	ands	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002324:	4013      	ands	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800232e:	430a      	orrs	r2, r1
 8002330:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800233c:	4b07      	ldr	r3, [pc, #28]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002340:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800234c:	430a      	orrs	r2, r1
 800234e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b006      	add	sp, #24
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	fffcffff 	.word	0xfffcffff
 8002368:	fff7ffff 	.word	0xfff7ffff
 800236c:	00001388 	.word	0x00001388
 8002370:	ffcfffff 	.word	0xffcfffff
 8002374:	efffffff 	.word	0xefffffff
 8002378:	fffff3ff 	.word	0xfffff3ff
 800237c:	ffffcfff 	.word	0xffffcfff
 8002380:	fff3ffff 	.word	0xfff3ffff

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e032      	b.n	80023fc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2239      	movs	r2, #57	@ 0x39
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2238      	movs	r2, #56	@ 0x38
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fe fc3b 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2239      	movs	r2, #57	@ 0x39
 80023b6:	2102      	movs	r1, #2
 80023b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	0019      	movs	r1, r3
 80023c4:	0010      	movs	r0, r2
 80023c6:	f000 f9e5 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223e      	movs	r2, #62	@ 0x3e
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	223a      	movs	r2, #58	@ 0x3a
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	223b      	movs	r2, #59	@ 0x3b
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	223c      	movs	r2, #60	@ 0x3c
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223d      	movs	r2, #61	@ 0x3d
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2239      	movs	r2, #57	@ 0x39
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d021      	beq.n	8002468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d01d      	beq.n	8002468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2203      	movs	r2, #3
 8002432:	4252      	negs	r2, r2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f98a 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8002450:	e007      	b.n	8002462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f97d 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f989 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2204      	movs	r2, #4
 800246c:	4013      	ands	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d01e      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2205      	movs	r2, #5
 800247e:	4252      	negs	r2, r2
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	23c0      	movs	r3, #192	@ 0xc0
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 f963 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 800249e:	e007      	b.n	80024b0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f956 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 f962 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2208      	movs	r2, #8
 80024ba:	4013      	ands	r3, r2
 80024bc:	d021      	beq.n	8002502 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d01d      	beq.n	8002502 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2209      	movs	r2, #9
 80024cc:	4252      	negs	r2, r2
 80024ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2203      	movs	r2, #3
 80024de:	4013      	ands	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f93d 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80024ea:	e007      	b.n	80024fc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f930 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f93c 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d022      	beq.n	8002550 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2210      	movs	r2, #16
 800250e:	4013      	ands	r3, r2
 8002510:	d01e      	beq.n	8002550 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2211      	movs	r2, #17
 8002518:	4252      	negs	r2, r2
 800251a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2208      	movs	r2, #8
 8002520:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	23c0      	movs	r3, #192	@ 0xc0
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f916 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8002538:	e007      	b.n	800254a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 f909 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f915 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d00c      	beq.n	8002572 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	4013      	ands	r3, r2
 800255e:	d008      	beq.n	8002572 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	4252      	negs	r2, r2
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f8e9 	bl	8002744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2240      	movs	r2, #64	@ 0x40
 8002576:	4013      	ands	r3, r2
 8002578:	d00c      	beq.n	8002594 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2240      	movs	r2, #64	@ 0x40
 800257e:	4013      	ands	r3, r2
 8002580:	d008      	beq.n	8002594 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2241      	movs	r2, #65	@ 0x41
 8002588:	4252      	negs	r2, r2
 800258a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f8f8 	bl	8002784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	230f      	movs	r3, #15
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2238      	movs	r2, #56	@ 0x38
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIM_ConfigClockSource+0x20>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0bc      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x19a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2238      	movs	r2, #56	@ 0x38
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2239      	movs	r2, #57	@ 0x39
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2277      	movs	r2, #119	@ 0x77
 80025d8:	4393      	bics	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4a58      	ldr	r2, [pc, #352]	@ (8002740 <HAL_TIM_ConfigClockSource+0x1a4>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	0192      	lsls	r2, r2, #6
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d040      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xde>
 80025f8:	2280      	movs	r2, #128	@ 0x80
 80025fa:	0192      	lsls	r2, r2, #6
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x66>
 8002600:	e088      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	0152      	lsls	r2, r2, #5
 8002606:	4293      	cmp	r3, r2
 8002608:	d100      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x70>
 800260a:	e088      	b.n	800271e <HAL_TIM_ConfigClockSource+0x182>
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	0152      	lsls	r2, r2, #5
 8002610:	4293      	cmp	r3, r2
 8002612:	d900      	bls.n	8002616 <HAL_TIM_ConfigClockSource+0x7a>
 8002614:	e07e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002616:	2b70      	cmp	r3, #112	@ 0x70
 8002618:	d018      	beq.n	800264c <HAL_TIM_ConfigClockSource+0xb0>
 800261a:	d900      	bls.n	800261e <HAL_TIM_ConfigClockSource+0x82>
 800261c:	e07a      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800261e:	2b60      	cmp	r3, #96	@ 0x60
 8002620:	d04f      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x126>
 8002622:	d900      	bls.n	8002626 <HAL_TIM_ConfigClockSource+0x8a>
 8002624:	e076      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002626:	2b50      	cmp	r3, #80	@ 0x50
 8002628:	d03b      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x106>
 800262a:	d900      	bls.n	800262e <HAL_TIM_ConfigClockSource+0x92>
 800262c:	e072      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	d057      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x146>
 8002632:	d900      	bls.n	8002636 <HAL_TIM_ConfigClockSource+0x9a>
 8002634:	e06e      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002636:	2b30      	cmp	r3, #48	@ 0x30
 8002638:	d063      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002640:	d868      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d05d      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d05b      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x166>
 800264a:	e063      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	f000 f964 	bl	8002928 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2277      	movs	r2, #119	@ 0x77
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e052      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	f000 f94d 	bl	8002928 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	01c9      	lsls	r1, r1, #7
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	001a      	movs	r2, r3
 80026b0:	f000 f8c0 	bl	8002834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	@ 0x50
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 f91a 	bl	80028f4 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ce:	001a      	movs	r2, r3
 80026d0:	f000 f8de 	bl	8002890 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	@ 0x60
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f90a 	bl	80028f4 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	001a      	movs	r2, r3
 80026f0:	f000 f8a0 	bl	8002834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	@ 0x40
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 f8fa 	bl	80028f4 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00e      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 f8f1 	bl	80028f4 <TIM_ITRx_SetConfig>
      break;
 8002712:	e005      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800271e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2239      	movs	r2, #57	@ 0x39
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2238      	movs	r2, #56	@ 0x38
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

  return status;
 8002730:	230f      	movs	r3, #15
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	ffff00ff 	.word	0xffff00ff

08002744 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	05db      	lsls	r3, r3, #23
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d003      	beq.n	80027b6 <TIM_Base_SetConfig+0x22>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <TIM_Base_SetConfig+0x98>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d108      	bne.n	80027c8 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2270      	movs	r2, #112	@ 0x70
 80027ba:	4393      	bics	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0x46>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a15      	ldr	r2, [pc, #84]	@ (800282c <TIM_Base_SetConfig+0x98>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <TIM_Base_SetConfig+0x9c>)
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	4393      	bics	r3, r2
 80027f2:	001a      	movs	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2204      	movs	r2, #4
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40010800 	.word	0x40010800
 8002830:	fffffcff 	.word	0xfffffcff

08002834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	2201      	movs	r2, #1
 800284c:	4393      	bics	r3, r2
 800284e:	001a      	movs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	22f0      	movs	r2, #240	@ 0xf0
 800285e:	4393      	bics	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	220a      	movs	r2, #10
 8002870:	4393      	bics	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	621a      	str	r2, [r3, #32]
}
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}

08002890 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2210      	movs	r2, #16
 80028a8:	4393      	bics	r3, r2
 80028aa:	001a      	movs	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <TIM_TI2_ConfigInputStage+0x60>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	031b      	lsls	r3, r3, #12
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	22a0      	movs	r2, #160	@ 0xa0
 80028cc:	4393      	bics	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	621a      	str	r2, [r3, #32]
}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b006      	add	sp, #24
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	ffff0fff 	.word	0xffff0fff

080028f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2270      	movs	r2, #112	@ 0x70
 8002908:	4393      	bics	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	2207      	movs	r2, #7
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <TIM_ETR_SetConfig+0x3c>)
 8002940:	4013      	ands	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	021a      	lsls	r2, r3, #8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	431a      	orrs	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b006      	add	sp, #24
 8002962:	bd80      	pop	{r7, pc}
 8002964:	ffff00ff 	.word	0xffff00ff

08002968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2238      	movs	r2, #56	@ 0x38
 8002976:	5c9b      	ldrb	r3, [r3, r2]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800297c:	2302      	movs	r3, #2
 800297e:	e03d      	b.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2238      	movs	r2, #56	@ 0x38
 8002984:	2101      	movs	r1, #1
 8002986:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2239      	movs	r2, #57	@ 0x39
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2270      	movs	r2, #112	@ 0x70
 80029a4:	4393      	bics	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d004      	beq.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d10c      	bne.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	4393      	bics	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2239      	movs	r2, #57	@ 0x39
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2238      	movs	r2, #56	@ 0x38
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010800 	.word	0x40010800

08002a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e044      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2278      	movs	r2, #120	@ 0x78
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe f8b5 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	@ 0x24
 8002a36:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 fa76 	bl	8002f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 f828 	bl	8002ab0 <UART_SetConfig>
 8002a60:	0003      	movs	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e01c      	b.n	8002aa4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	490d      	ldr	r1, [pc, #52]	@ (8002aac <HAL_UART_Init+0xa4>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	212a      	movs	r1, #42	@ 0x2a
 8002a86:	438a      	bics	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fb05 	bl	80030ac <UART_CheckIdleState>
 8002aa2:	0003      	movs	r3, r0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffffb7ff 	.word	0xffffb7ff

08002ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08e      	sub	sp, #56	@ 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ab8:	231a      	movs	r3, #26
 8002aba:	2218      	movs	r2, #24
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	19db      	adds	r3, r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4ab4      	ldr	r2, [pc, #720]	@ (8002db4 <UART_SetConfig+0x304>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4aaf      	ldr	r2, [pc, #700]	@ (8002db8 <UART_SetConfig+0x308>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4aa9      	ldr	r2, [pc, #676]	@ (8002dbc <UART_SetConfig+0x30c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b20:	4313      	orrs	r3, r2
 8002b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4aa5      	ldr	r2, [pc, #660]	@ (8002dc0 <UART_SetConfig+0x310>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4aa1      	ldr	r2, [pc, #644]	@ (8002dc4 <UART_SetConfig+0x314>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d131      	bne.n	8002ba8 <UART_SetConfig+0xf8>
 8002b44:	4ba0      	ldr	r3, [pc, #640]	@ (8002dc8 <UART_SetConfig+0x318>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b48:	220c      	movs	r2, #12
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d01d      	beq.n	8002b8c <UART_SetConfig+0xdc>
 8002b50:	d823      	bhi.n	8002b9a <UART_SetConfig+0xea>
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d00c      	beq.n	8002b70 <UART_SetConfig+0xc0>
 8002b56:	d820      	bhi.n	8002b9a <UART_SetConfig+0xea>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <UART_SetConfig+0xb2>
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d00e      	beq.n	8002b7e <UART_SetConfig+0xce>
 8002b60:	e01b      	b.n	8002b9a <UART_SetConfig+0xea>
 8002b62:	231b      	movs	r3, #27
 8002b64:	2218      	movs	r2, #24
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e065      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b70:	231b      	movs	r3, #27
 8002b72:	2218      	movs	r2, #24
 8002b74:	189b      	adds	r3, r3, r2
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e05e      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b7e:	231b      	movs	r3, #27
 8002b80:	2218      	movs	r2, #24
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	19db      	adds	r3, r3, r7
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e057      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b8c:	231b      	movs	r3, #27
 8002b8e:	2218      	movs	r2, #24
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	19db      	adds	r3, r3, r7
 8002b94:	2208      	movs	r2, #8
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e050      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b9a:	231b      	movs	r3, #27
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e049      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a83      	ldr	r2, [pc, #524]	@ (8002dbc <UART_SetConfig+0x30c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d13e      	bne.n	8002c30 <UART_SetConfig+0x180>
 8002bb2:	4b85      	ldr	r3, [pc, #532]	@ (8002dc8 <UART_SetConfig+0x318>)
 8002bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bb6:	23c0      	movs	r3, #192	@ 0xc0
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	22c0      	movs	r2, #192	@ 0xc0
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d027      	beq.n	8002c14 <UART_SetConfig+0x164>
 8002bc4:	22c0      	movs	r2, #192	@ 0xc0
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d82a      	bhi.n	8002c22 <UART_SetConfig+0x172>
 8002bcc:	2280      	movs	r2, #128	@ 0x80
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d011      	beq.n	8002bf8 <UART_SetConfig+0x148>
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d822      	bhi.n	8002c22 <UART_SetConfig+0x172>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <UART_SetConfig+0x13a>
 8002be0:	2280      	movs	r2, #128	@ 0x80
 8002be2:	00d2      	lsls	r2, r2, #3
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <UART_SetConfig+0x156>
 8002be8:	e01b      	b.n	8002c22 <UART_SetConfig+0x172>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2218      	movs	r2, #24
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e021      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2218      	movs	r2, #24
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e01a      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2204      	movs	r2, #4
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e013      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c14:	231b      	movs	r3, #27
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e00c      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c22:	231b      	movs	r3, #27
 8002c24:	2218      	movs	r2, #24
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e005      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c30:	231b      	movs	r3, #27
 8002c32:	2218      	movs	r2, #24
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	2210      	movs	r2, #16
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5e      	ldr	r2, [pc, #376]	@ (8002dbc <UART_SetConfig+0x30c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d000      	beq.n	8002c48 <UART_SetConfig+0x198>
 8002c46:	e084      	b.n	8002d52 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c48:	231b      	movs	r3, #27
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	19db      	adds	r3, r3, r7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d01d      	beq.n	8002c92 <UART_SetConfig+0x1e2>
 8002c56:	dc20      	bgt.n	8002c9a <UART_SetConfig+0x1ea>
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d015      	beq.n	8002c88 <UART_SetConfig+0x1d8>
 8002c5c:	dc1d      	bgt.n	8002c9a <UART_SetConfig+0x1ea>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <UART_SetConfig+0x1b8>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d005      	beq.n	8002c72 <UART_SetConfig+0x1c2>
 8002c66:	e018      	b.n	8002c9a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7ff fa34 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c70:	e01c      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c72:	4b55      	ldr	r3, [pc, #340]	@ (8002dc8 <UART_SetConfig+0x318>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c7c:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <UART_SetConfig+0x31c>)
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c80:	e014      	b.n	8002cac <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002c82:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <UART_SetConfig+0x320>)
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c86:	e011      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c88:	f7ff f994 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c90:	e00c      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002c98:	e008      	b.n	8002cac <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002c9e:	231a      	movs	r3, #26
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        break;
 8002caa:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <UART_SetConfig+0x204>
 8002cb2:	e12f      	b.n	8002f14 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	0013      	movs	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d305      	bcc.n	8002cd0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d906      	bls.n	8002cde <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002cd0:	231a      	movs	r3, #26
 8002cd2:	2218      	movs	r2, #24
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e11a      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	6939      	ldr	r1, [r7, #16]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	000b      	movs	r3, r1
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	0010      	movs	r0, r2
 8002cf0:	0205      	lsls	r5, r0, #8
 8002cf2:	431d      	orrs	r5, r3
 8002cf4:	000b      	movs	r3, r1
 8002cf6:	021c      	lsls	r4, r3, #8
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	1900      	adds	r0, r0, r4
 8002d0a:	4169      	adcs	r1, r5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f7fd fb6b 	bl	80003f4 <__aeabi_uldivmod>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	000b      	movs	r3, r1
 8002d22:	0013      	movs	r3, r2
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d28:	23c0      	movs	r3, #192	@ 0xc0
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d309      	bcc.n	8002d44 <UART_SetConfig+0x294>
 8002d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d204      	bcs.n	8002d44 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e0e7      	b.n	8002f14 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002d44:	231a      	movs	r3, #26
 8002d46:	2218      	movs	r2, #24
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e0e0      	b.n	8002f14 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d000      	beq.n	8002d60 <UART_SetConfig+0x2b0>
 8002d5e:	e082      	b.n	8002e66 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002d60:	231b      	movs	r3, #27
 8002d62:	2218      	movs	r2, #24
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d834      	bhi.n	8002dd8 <UART_SetConfig+0x328>
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <UART_SetConfig+0x324>)
 8002d72:	18d3      	adds	r3, r2, r3
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff f9ac 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d80:	e033      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d82:	f7ff f9bd 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 8002d86:	0003      	movs	r3, r0
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002d8a:	e02e      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <UART_SetConfig+0x318>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d002      	beq.n	8002d9c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <UART_SetConfig+0x31c>)
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d9a:	e026      	b.n	8002dea <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <UART_SetConfig+0x320>)
 8002d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002da0:	e023      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da2:	f7ff f907 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8002da6:	0003      	movs	r3, r0
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002daa:	e01e      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002db2:	e01a      	b.n	8002dea <UART_SetConfig+0x33a>
 8002db4:	efff69f3 	.word	0xefff69f3
 8002db8:	ffffcfff 	.word	0xffffcfff
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	fffff4ff 	.word	0xfffff4ff
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	003d0900 	.word	0x003d0900
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	08003438 	.word	0x08003438
      default:
        pclk = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ddc:	231a      	movs	r3, #26
 8002dde:	2218      	movs	r2, #24
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
        break;
 8002de8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d100      	bne.n	8002df2 <UART_SetConfig+0x342>
 8002df0:	e090      	b.n	8002f14 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df4:	005a      	lsls	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	18d2      	adds	r2, r2, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0019      	movs	r1, r3
 8002e04:	0010      	movs	r0, r2
 8002e06:	f7fd f97f 	bl	8000108 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d921      	bls.n	8002e58 <UART_SetConfig+0x3a8>
 8002e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d21c      	bcs.n	8002e58 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	200e      	movs	r0, #14
 8002e24:	2418      	movs	r4, #24
 8002e26:	1903      	adds	r3, r0, r4
 8002e28:	19db      	adds	r3, r3, r7
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	1903      	adds	r3, r0, r4
 8002e3e:	19db      	adds	r3, r3, r7
 8002e40:	1902      	adds	r2, r0, r4
 8002e42:	19d2      	adds	r2, r2, r7
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1902      	adds	r2, r0, r4
 8002e50:	19d2      	adds	r2, r2, r7
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	e05d      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002e58:	231a      	movs	r3, #26
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e056      	b.n	8002f14 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e66:	231b      	movs	r3, #27
 8002e68:	2218      	movs	r2, #24
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	19db      	adds	r3, r3, r7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d822      	bhi.n	8002eba <UART_SetConfig+0x40a>
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	4b2f      	ldr	r3, [pc, #188]	@ (8002f34 <UART_SetConfig+0x484>)
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7e:	f7ff f929 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002e82:	0003      	movs	r3, r0
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e86:	e021      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e88:	f7ff f93a 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e90:	e01c      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e92:	4b29      	ldr	r3, [pc, #164]	@ (8002f38 <UART_SetConfig+0x488>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d002      	beq.n	8002ea2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e9c:	4b27      	ldr	r3, [pc, #156]	@ (8002f3c <UART_SetConfig+0x48c>)
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ea0:	e014      	b.n	8002ecc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002ea2:	4b27      	ldr	r3, [pc, #156]	@ (8002f40 <UART_SetConfig+0x490>)
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ea6:	e011      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea8:	f7ff f884 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8002eac:	0003      	movs	r3, r0
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002eb0:	e00c      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002eb8:	e008      	b.n	8002ecc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
        break;
 8002eca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	085a      	lsrs	r2, r3, #1
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	18d2      	adds	r2, r2, r3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	f7fd f910 	bl	8000108 <__udivsi3>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d90a      	bls.n	8002f08 <UART_SetConfig+0x458>
 8002ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d205      	bcs.n	8002f08 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e005      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002f08:	231a      	movs	r3, #26
 8002f0a:	2218      	movs	r2, #24
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2200      	movs	r2, #0
 8002f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002f20:	231a      	movs	r3, #26
 8002f22:	2218      	movs	r2, #24
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	19db      	adds	r3, r3, r7
 8002f28:	781b      	ldrb	r3, [r3, #0]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b00e      	add	sp, #56	@ 0x38
 8002f30:	bdb0      	pop	{r4, r5, r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	0800345c 	.word	0x0800345c
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	003d0900 	.word	0x003d0900
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2208      	movs	r2, #8
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003088 <UART_AdvFeatureConfig+0x144>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2201      	movs	r2, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a43      	ldr	r2, [pc, #268]	@ (800308c <UART_AdvFeatureConfig+0x148>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	2202      	movs	r2, #2
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8003090 <UART_AdvFeatureConfig+0x14c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <UART_AdvFeatureConfig+0x150>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	2210      	movs	r2, #16
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <UART_AdvFeatureConfig+0x154>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4a25      	ldr	r2, [pc, #148]	@ (800309c <UART_AdvFeatureConfig+0x158>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	4013      	ands	r3, r2
 8003020:	d01d      	beq.n	800305e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <UART_AdvFeatureConfig+0x15c>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	035b      	lsls	r3, r3, #13
 8003042:	429a      	cmp	r2, r3
 8003044:	d10b      	bne.n	800305e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <UART_AdvFeatureConfig+0x160>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2280      	movs	r2, #128	@ 0x80
 8003064:	4013      	ands	r3, r2
 8003066:	d00b      	beq.n	8003080 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <UART_AdvFeatureConfig+0x164>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	ffff7fff 	.word	0xffff7fff
 800308c:	fffdffff 	.word	0xfffdffff
 8003090:	fffeffff 	.word	0xfffeffff
 8003094:	fffbffff 	.word	0xfffbffff
 8003098:	ffffefff 	.word	0xffffefff
 800309c:	ffffdfff 	.word	0xffffdfff
 80030a0:	ffefffff 	.word	0xffefffff
 80030a4:	ff9fffff 	.word	0xff9fffff
 80030a8:	fff7ffff 	.word	0xfff7ffff

080030ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b092      	sub	sp, #72	@ 0x48
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2284      	movs	r2, #132	@ 0x84
 80030b8:	2100      	movs	r1, #0
 80030ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030bc:	f7fd fef6 	bl	8000eac <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2208      	movs	r2, #8
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d12c      	bne.n	800312c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d4:	2280      	movs	r2, #128	@ 0x80
 80030d6:	0391      	lsls	r1, r2, #14
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4a46      	ldr	r2, [pc, #280]	@ (80031f4 <UART_CheckIdleState+0x148>)
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	f000 f88c 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d021      	beq.n	800312c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030f2:	2301      	movs	r3, #1
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	438a      	bics	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2278      	movs	r2, #120	@ 0x78
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05f      	b.n	80031ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	4013      	ands	r3, r2
 8003136:	2b04      	cmp	r3, #4
 8003138:	d146      	bne.n	80031c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	03d1      	lsls	r1, r2, #15
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4a2c      	ldr	r2, [pc, #176]	@ (80031f4 <UART_CheckIdleState+0x148>)
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	f000 f858 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d03b      	beq.n	80031c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003150:	f3ef 8310 	mrs	r3, PRIMASK
 8003154:	60fb      	str	r3, [r7, #12]
  return(result);
 8003156:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
 800315a:	2301      	movs	r3, #1
 800315c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4921      	ldr	r1, [pc, #132]	@ (80031f8 <UART_CheckIdleState+0x14c>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003182:	f3ef 8310 	mrs	r3, PRIMASK
 8003186:	61bb      	str	r3, [r7, #24]
  return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	633b      	str	r3, [r7, #48]	@ 0x30
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	2120      	movs	r1, #32
 80031ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2278      	movs	r2, #120	@ 0x78
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e011      	b.n	80031ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	@ 0x80
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2278      	movs	r2, #120	@ 0x78
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b010      	add	sp, #64	@ 0x40
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	01ffffff 	.word	0x01ffffff
 80031f8:	fffffedf 	.word	0xfffffedf

080031fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	e051      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3301      	adds	r3, #1
 8003212:	d04e      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fd fe4a 	bl	8000eac <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e051      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2204      	movs	r2, #4
 8003236:	4013      	ands	r3, r2
 8003238:	d03b      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b80      	cmp	r3, #128	@ 0x80
 800323e:	d038      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b40      	cmp	r3, #64	@ 0x40
 8003244:	d035      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2208      	movs	r2, #8
 800324e:	4013      	ands	r3, r2
 8003250:	2b08      	cmp	r3, #8
 8003252:	d111      	bne.n	8003278 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2208      	movs	r2, #8
 800325a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f83c 	bl	80032dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2284      	movs	r2, #132	@ 0x84
 8003268:	2108      	movs	r1, #8
 800326a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2278      	movs	r2, #120	@ 0x78
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02c      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	401a      	ands	r2, r3
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	429a      	cmp	r2, r3
 800328a:	d112      	bne.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2280      	movs	r2, #128	@ 0x80
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	0018      	movs	r0, r3
 800329a:	f000 f81f 	bl	80032dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2284      	movs	r2, #132	@ 0x84
 80032a2:	2120      	movs	r1, #32
 80032a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2278      	movs	r2, #120	@ 0x78
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e00f      	b.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	425a      	negs	r2, r3
 80032c2:	4153      	adcs	r3, r2
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	001a      	movs	r2, r3
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d09e      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	@ 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e4:	f3ef 8310 	mrs	r3, PRIMASK
 80032e8:	617b      	str	r3, [r7, #20]
  return(result);
 80032ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4926      	ldr	r1, [pc, #152]	@ (80033a0 <UART_EndRxTransfer+0xc4>)
 8003306:	400a      	ands	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003316:	f3ef 8310 	mrs	r3, PRIMASK
 800331a:	623b      	str	r3, [r7, #32]
  return(result);
 800331c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2101      	movs	r1, #1
 8003338:	438a      	bics	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	2b01      	cmp	r3, #1
 800334e:	d118      	bne.n	8003382 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	60bb      	str	r3, [r7, #8]
  return(result);
 8003356:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335a:	2301      	movs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2110      	movs	r1, #16
 8003372:	438a      	bics	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	2120      	movs	r1, #32
 8003388:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b00e      	add	sp, #56	@ 0x38
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	fffffedf 	.word	0xfffffedf

080033a4 <memset>:
 80033a4:	0003      	movs	r3, r0
 80033a6:	1882      	adds	r2, r0, r2
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d100      	bne.n	80033ae <memset+0xa>
 80033ac:	4770      	bx	lr
 80033ae:	7019      	strb	r1, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e7f9      	b.n	80033a8 <memset+0x4>

080033b4 <__libc_init_array>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	2600      	movs	r6, #0
 80033b8:	4c0c      	ldr	r4, [pc, #48]	@ (80033ec <__libc_init_array+0x38>)
 80033ba:	4d0d      	ldr	r5, [pc, #52]	@ (80033f0 <__libc_init_array+0x3c>)
 80033bc:	1b64      	subs	r4, r4, r5
 80033be:	10a4      	asrs	r4, r4, #2
 80033c0:	42a6      	cmp	r6, r4
 80033c2:	d109      	bne.n	80033d8 <__libc_init_array+0x24>
 80033c4:	2600      	movs	r6, #0
 80033c6:	f000 f819 	bl	80033fc <_init>
 80033ca:	4c0a      	ldr	r4, [pc, #40]	@ (80033f4 <__libc_init_array+0x40>)
 80033cc:	4d0a      	ldr	r5, [pc, #40]	@ (80033f8 <__libc_init_array+0x44>)
 80033ce:	1b64      	subs	r4, r4, r5
 80033d0:	10a4      	asrs	r4, r4, #2
 80033d2:	42a6      	cmp	r6, r4
 80033d4:	d105      	bne.n	80033e2 <__libc_init_array+0x2e>
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	00b3      	lsls	r3, r6, #2
 80033da:	58eb      	ldr	r3, [r5, r3]
 80033dc:	4798      	blx	r3
 80033de:	3601      	adds	r6, #1
 80033e0:	e7ee      	b.n	80033c0 <__libc_init_array+0xc>
 80033e2:	00b3      	lsls	r3, r6, #2
 80033e4:	58eb      	ldr	r3, [r5, r3]
 80033e6:	4798      	blx	r3
 80033e8:	3601      	adds	r6, #1
 80033ea:	e7f2      	b.n	80033d2 <__libc_init_array+0x1e>
 80033ec:	08003488 	.word	0x08003488
 80033f0:	08003488 	.word	0x08003488
 80033f4:	0800348c 	.word	0x0800348c
 80033f8:	08003488 	.word	0x08003488

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
